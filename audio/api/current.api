// Signature format: 4.0
package com.google.android.horologist.audio {

  public interface AudioOutput {
    method public String getId();
    method public String getName();
    method public default String getType();
    property public abstract String id;
    property public abstract String name;
    property public default String type;
    field public static final com.google.android.horologist.audio.AudioOutput.Companion Companion;
    field public static final String TYPE_HEADPHONES = "headphones";
    field public static final String TYPE_NONE = "none";
    field public static final String TYPE_WATCH = "watch";
  }

  public static final class AudioOutput.BluetoothHeadset implements com.google.android.horologist.audio.AudioOutput {
    ctor public AudioOutput.BluetoothHeadset(String id, String name);
    method public String component1();
    method public String component2();
    method public com.google.android.horologist.audio.AudioOutput.BluetoothHeadset copy(String id, String name);
    method public String getId();
    method public String getName();
    property public String id;
    property public String name;
    property public String type;
  }

  public static final class AudioOutput.Companion {
    field public static final String TYPE_HEADPHONES = "headphones";
    field public static final String TYPE_NONE = "none";
    field public static final String TYPE_WATCH = "watch";
  }

  public static final class AudioOutput.None implements com.google.android.horologist.audio.AudioOutput {
    method public String getId();
    method public String getName();
    property public String id;
    property public String name;
    property public String type;
    field public static final com.google.android.horologist.audio.AudioOutput.None INSTANCE;
  }

  public static final class AudioOutput.Unknown implements com.google.android.horologist.audio.AudioOutput {
    ctor public AudioOutput.Unknown(String id, String name);
    method public String component1();
    method public String component2();
    method public com.google.android.horologist.audio.AudioOutput.Unknown copy(String id, String name);
    method public String getId();
    method public String getName();
    property public String id;
    property public String name;
  }

  public static final class AudioOutput.WatchSpeaker implements com.google.android.horologist.audio.AudioOutput {
    ctor public AudioOutput.WatchSpeaker(String id, String name);
    method public String component1();
    method public String component2();
    method public com.google.android.horologist.audio.AudioOutput.WatchSpeaker copy(String id, String name);
    method public String getId();
    method public String getName();
    property public String id;
    property public String name;
    property public String type;
  }

  public interface AudioOutputRepository extends java.lang.AutoCloseable {
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.audio.AudioOutput> getAudioOutput();
    method public kotlinx.coroutines.flow.StateFlow<java.util.List<com.google.android.horologist.audio.AudioOutput>> getAvailable();
    method @Deprecated public void launchOutputSelection(boolean closeOnConnect);
    method public void launchOutputSelection();
    property public abstract kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.audio.AudioOutput> audioOutput;
    property public abstract kotlinx.coroutines.flow.StateFlow<java.util.List<com.google.android.horologist.audio.AudioOutput>> available;
  }

  @Deprecated public final class BluetoothSettings {
    method @Deprecated public void launchBluetoothSettings(android.content.Context, optional boolean closeOnConnect);
    field @Deprecated public static final com.google.android.horologist.audio.BluetoothSettings INSTANCE;
  }

  @kotlin.RequiresOptIn(message="Horologist Audio is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalHorologistAudioApi {
  }

  public final class SystemAudioRepository implements com.google.android.horologist.audio.AudioOutputRepository com.google.android.horologist.audio.VolumeRepository {
    ctor public SystemAudioRepository(android.content.Context application, androidx.mediarouter.media.MediaRouter mediaRouter, optional androidx.mediarouter.media.MediaRouteSelector selector);
    method public void close();
    method public void decreaseVolume();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.audio.AudioOutput> getAudioOutput();
    method public kotlinx.coroutines.flow.StateFlow<java.util.List<com.google.android.horologist.audio.AudioOutput>> getAvailable();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.audio.VolumeState> getVolumeState();
    method public void increaseVolume();
    method public void launchOutputSelection(boolean closeOnConnect);
    method public void launchOutputSelection();
    property public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.audio.AudioOutput> audioOutput;
    property public kotlinx.coroutines.flow.StateFlow<java.util.List<com.google.android.horologist.audio.AudioOutput>> available;
    property public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.audio.VolumeState> volumeState;
    field public static final com.google.android.horologist.audio.SystemAudioRepository.Companion Companion;
  }

  public static final class SystemAudioRepository.Companion {
    method public com.google.android.horologist.audio.SystemAudioRepository fromContext(android.content.Context application);
  }

  public final class SystemAudioRepositoryKt {
  }

  public interface VolumeRepository extends java.lang.AutoCloseable {
    method public void decreaseVolume();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.audio.VolumeState> getVolumeState();
    method public void increaseVolume();
    property public abstract kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.audio.VolumeState> volumeState;
  }

  public final class VolumeState {
    ctor public VolumeState(int current, int max);
    method public int component1();
    method public int component2();
    method public com.google.android.horologist.audio.VolumeState copy(int current, int max);
    method public int getCurrent();
    method public int getMax();
    method public boolean isMax();
    property public final int current;
    property public final boolean isMax;
    property public final int max;
  }

}

