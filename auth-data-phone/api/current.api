// Signature format: 4.0
package com.google.android.horologist.auth.data.phone {

  @kotlin.RequiresOptIn(message="Horologist Auth Data Phone is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalHorologistAuthDataPhoneApi {
  }

}

package com.google.android.horologist.auth.data.phone.common {

  public final class LoggingKt {
  }

}

package com.google.android.horologist.auth.data.phone.tokenshare {

  @com.google.android.horologist.auth.data.phone.ExperimentalHorologistAuthDataPhoneApi public interface TokenBundleRepository<TokenBundle> {
    method public suspend Object? update(TokenBundle? tokenBundle, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

}

package com.google.android.horologist.auth.data.phone.tokenshare.impl {

  @com.google.android.horologist.auth.data.phone.ExperimentalHorologistAuthDataPhoneApi public final class TokenBundleRepositoryImpl<TokenBundle> implements com.google.android.horologist.auth.data.phone.tokenshare.TokenBundleRepository<TokenBundle> {
    ctor public TokenBundleRepositoryImpl(androidx.datastore.core.DataStore<TokenBundle> dataStore);
    method public suspend Object? update(TokenBundle? tokenBundle, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    field public static final com.google.android.horologist.auth.data.phone.tokenshare.impl.TokenBundleRepositoryImpl.Companion Companion;
  }

  public static final class TokenBundleRepositoryImpl.Companion {
    method public <TokenBundle> com.google.android.horologist.auth.data.phone.tokenshare.impl.TokenBundleRepositoryImpl<TokenBundle> create(com.google.android.horologist.data.WearDataLayerRegistry registry, optional String key, kotlinx.coroutines.CoroutineScope coroutineScope, androidx.datastore.core.Serializer<TokenBundle> serializer);
  }

}

