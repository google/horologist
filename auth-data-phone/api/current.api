// Signature format: 4.0
package com.google.android.horologist.auth.data.phone {

  @kotlin.RequiresOptIn(message="Horologist Auth Data Phone is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalHorologistAuthDataPhoneApi {
  }

}

package com.google.android.horologist.auth.data.phone.common {

  public final class LoggingKt {
  }

}

package com.google.android.horologist.auth.data.phone.tokenshare {

  @com.google.android.horologist.auth.data.phone.ExperimentalHorologistAuthDataPhoneApi public interface TokenRepository {
    method public suspend Object? updateToken(String token, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    field public static final com.google.android.horologist.auth.data.phone.tokenshare.TokenRepository.Companion Companion;
    field public static final String KEY_TOKEN = "token";
    field public static final String SERVICE_PATH_PREFIX = "/horologist_auth";
  }

  public static final class TokenRepository.Companion {
    field public static final String KEY_TOKEN = "token";
    field public static final String SERVICE_PATH_PREFIX = "/horologist_auth";
  }

}

package com.google.android.horologist.auth.data.phone.tokenshare.impl {

  @com.google.android.horologist.auth.data.phone.ExperimentalHorologistAuthDataPhoneApi public final class TokenRepositoryImpl implements com.google.android.horologist.auth.data.phone.tokenshare.TokenRepository {
    ctor public TokenRepositoryImpl(com.google.android.gms.wearable.DataClient dataClient);
    method public suspend Object? updateToken(String token, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

}

