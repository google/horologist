// Signature format: 4.0
package com.google.android.horologist.auth.data {

  @kotlin.RequiresOptIn(message="Horologist Auth Data is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalHorologistAuthDataApi {
  }

}

package com.google.android.horologist.auth.data.common.model {

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public final class AuthUser {
    ctor public AuthUser(optional String? displayName, optional String? email, optional String? avatarUri);
    method public String? component1();
    method public String? component2();
    method public String? component3();
    method public com.google.android.horologist.auth.data.common.model.AuthUser copy(String? displayName, String? email, String? avatarUri);
    method public String? getAvatarUri();
    method public String? getDisplayName();
    method public String? getEmail();
    property public final String? avatarUri;
    property public final String? displayName;
    property public final String? email;
  }

}

package com.google.android.horologist.auth.data.common.repository {

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public interface AuthRepository {
    method public suspend Object? getAuthUser(kotlin.coroutines.Continuation<? super com.google.android.horologist.auth.data.common.model.AuthUser> p);
  }

}

package com.google.android.horologist.auth.data.googlesignin {

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public final class AuthUserMapper {
    method public com.google.android.horologist.auth.data.common.model.AuthUser? map(com.google.android.gms.auth.api.signin.GoogleSignInAccount? googleSignInAccount);
    field public static final com.google.android.horologist.auth.data.googlesignin.AuthUserMapper INSTANCE;
  }

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public interface GoogleSignInAccountListener {
    method public suspend Object? onAccountReceived(com.google.android.gms.auth.api.signin.GoogleSignInAccount account, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
  }

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public final class GoogleSignInAccountListenerNoOpImpl implements com.google.android.horologist.auth.data.googlesignin.GoogleSignInAccountListener {
    ctor public GoogleSignInAccountListenerNoOpImpl();
    method public suspend Object? onAccountReceived(com.google.android.gms.auth.api.signin.GoogleSignInAccount account, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
  }

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public final class GoogleSignInAuthRepository implements com.google.android.horologist.auth.data.common.repository.AuthRepository {
    ctor public GoogleSignInAuthRepository(android.content.Context applicationContext);
    method public suspend Object? getAuthUser(kotlin.coroutines.Continuation<? super com.google.android.horologist.auth.data.common.model.AuthUser> p);
  }

}

package com.google.android.horologist.auth.data.oauth.common.impl.google.api {

  @com.squareup.moshi.JsonClass(generateAdapter=true) public final class DeviceCodeResponse {
    ctor public DeviceCodeResponse(@com.squareup.moshi.Json(name="verification_url") String verificationUri, @com.squareup.moshi.Json(name="user_code") String userCode, @com.squareup.moshi.Json(name="device_code") String deviceCode, @com.squareup.moshi.Json(name="interval") int interval);
    method public String component1();
    method public String component2();
    method public String component3();
    method public int component4();
    method public com.google.android.horologist.auth.data.oauth.common.impl.google.api.DeviceCodeResponse copy(@com.squareup.moshi.Json(name="verification_url") String verificationUri, @com.squareup.moshi.Json(name="user_code") String userCode, @com.squareup.moshi.Json(name="device_code") String deviceCode, @com.squareup.moshi.Json(name="interval") int interval);
    method public String getDeviceCode();
    method public int getInterval();
    method public String getUserCode();
    method public String getVerificationUri();
    property public final String deviceCode;
    property public final int interval;
    property public final String userCode;
    property public final String verificationUri;
  }

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public interface GoogleOAuthService {
    method @retrofit2.http.FormUrlEncoded @retrofit2.http.POST("device/code") public suspend Object? deviceCode(@retrofit2.http.Field("client_id") String clientId, @retrofit2.http.Field("scope") String scope, kotlin.coroutines.Continuation<? super com.google.android.horologist.auth.data.oauth.common.impl.google.api.DeviceCodeResponse> p);
    method @retrofit2.http.FormUrlEncoded @retrofit2.http.POST("token") public suspend Object? token(@retrofit2.http.Field("client_id") String clientId, @retrofit2.http.Field("client_secret") String clientSecret, optional @retrofit2.http.Field("code") String? code, optional @retrofit2.http.Field("code_verifier") String? codeVerifier, optional @retrofit2.http.Field("grant_type") String? grantType, optional @retrofit2.http.Field("redirect_uri") String? redirectUri, optional @retrofit2.http.Field("device_code") String? deviceCode, optional kotlin.coroutines.Continuation<? super com.google.android.horologist.auth.data.oauth.common.impl.google.api.TokenResponse> p);
    field public static final com.google.android.horologist.auth.data.oauth.common.impl.google.api.GoogleOAuthService.Companion Companion;
    field public static final String GOOGLE_OAUTH_SERVER = "https://oauth2.googleapis.com/";
    field public static final String GRANT_TYPE_PARAM_AUTH_CODE_GRANT_VALUE = "authorization_code";
    field public static final String GRANT_TYPE_PARAM_AUTH_DEVICE_GRANT_VALUE = "urn:ietf:params:oauth:grant-type:device_code";
    field public static final String SCOPE_KEY = "scope";
    field public static final String USER_AUTH_ENDPOINT = "https://accounts.google.com/o/oauth2/v2/auth";
    field public static final String USER_INFO_PROFILE_SCOPE_VALUE = "https://www.googleapis.com/auth/userinfo.profile";
  }

  public static final class GoogleOAuthService.Companion {
    field public static final String GOOGLE_OAUTH_SERVER = "https://oauth2.googleapis.com/";
    field public static final String GRANT_TYPE_PARAM_AUTH_CODE_GRANT_VALUE = "authorization_code";
    field public static final String GRANT_TYPE_PARAM_AUTH_DEVICE_GRANT_VALUE = "urn:ietf:params:oauth:grant-type:device_code";
    field public static final String SCOPE_KEY = "scope";
    field public static final String USER_AUTH_ENDPOINT = "https://accounts.google.com/o/oauth2/v2/auth";
    field public static final String USER_INFO_PROFILE_SCOPE_VALUE = "https://www.googleapis.com/auth/userinfo.profile";
  }

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public final class GoogleOAuthServiceFactory {
    ctor public GoogleOAuthServiceFactory(okhttp3.OkHttpClient okHttpClient, com.squareup.moshi.Moshi moshi);
    method public com.google.android.horologist.auth.data.oauth.common.impl.google.api.GoogleOAuthService get();
  }

  @com.squareup.moshi.JsonClass(generateAdapter=true) public final class TokenResponse {
    ctor public TokenResponse(@com.squareup.moshi.Json(name="access_token") String accessToken, @com.squareup.moshi.Json(name="expires_in") int expiresIn, @com.squareup.moshi.Json(name="id_token") String? idToken, @com.squareup.moshi.Json(name="refresh_token") String? refreshToken, @com.squareup.moshi.Json(name="scope") String? scope, @com.squareup.moshi.Json(name="token_type") String tokenType);
    method public String component1();
    method public int component2();
    method public String? component3();
    method public String? component4();
    method public String? component5();
    method public String component6();
    method public com.google.android.horologist.auth.data.oauth.common.impl.google.api.TokenResponse copy(@com.squareup.moshi.Json(name="access_token") String accessToken, @com.squareup.moshi.Json(name="expires_in") int expiresIn, @com.squareup.moshi.Json(name="id_token") String? idToken, @com.squareup.moshi.Json(name="refresh_token") String? refreshToken, @com.squareup.moshi.Json(name="scope") String? scope, @com.squareup.moshi.Json(name="token_type") String tokenType);
    method public String getAccessToken();
    method public int getExpiresIn();
    method public String? getIdToken();
    method public String? getRefreshToken();
    method public String? getScope();
    method public String getTokenType();
    property public final String accessToken;
    property public final int expiresIn;
    property public final String? idToken;
    property public final String? refreshToken;
    property public final String? scope;
    property public final String tokenType;
  }

}

package com.google.android.horologist.auth.data.oauth.devicegrant {

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public interface AuthDeviceGrantConfigRepository<Config> {
    method public suspend Object? fetch(kotlin.coroutines.Continuation<? super Config> p);
  }

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public interface AuthDeviceGrantTokenPayloadListener<TokenPayload> {
    method public suspend Object? onPayloadReceived(TokenPayload? payload, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
  }

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public final class AuthDeviceGrantTokenPayloadListenerNoOpImpl<TokenPayload> implements com.google.android.horologist.auth.data.oauth.devicegrant.AuthDeviceGrantTokenPayloadListener<TokenPayload> {
    ctor public AuthDeviceGrantTokenPayloadListenerNoOpImpl();
    method public suspend Object? onPayloadReceived(TokenPayload? payload, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
  }

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public interface AuthDeviceGrantTokenRepository<AuthDeviceGrantConfig, VerificationInfoPayload, TokenPayload> {
    method public suspend Object? fetch(AuthDeviceGrantConfig? config, VerificationInfoPayload? verificationInfoPayload, kotlin.coroutines.Continuation<? super kotlin.Result<? extends TokenPayload>> p);
  }

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public interface AuthDeviceGrantVerificationInfoRepository<AuthDeviceGrantConfig, VerificationInfo> {
    method public suspend Object? fetch(AuthDeviceGrantConfig? config, kotlin.coroutines.Continuation<? super kotlin.Result<? extends VerificationInfo>> p);
  }

}

package com.google.android.horologist.auth.data.oauth.devicegrant.impl {

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public final class AuthDeviceGrantConfigRepositoryDefaultImpl implements com.google.android.horologist.auth.data.oauth.devicegrant.AuthDeviceGrantConfigRepository<com.google.android.horologist.auth.data.oauth.devicegrant.impl.AuthDeviceGrantDefaultConfig> {
    ctor public AuthDeviceGrantConfigRepositoryDefaultImpl(String clientId, String clientSecret);
    method public suspend Object? fetch(kotlin.coroutines.Continuation<? super com.google.android.horologist.auth.data.oauth.devicegrant.impl.AuthDeviceGrantDefaultConfig> p);
  }

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public final class AuthDeviceGrantDefaultConfig {
    ctor public AuthDeviceGrantDefaultConfig(String clientId, String clientSecret);
    method public String component1();
    method public String component2();
    method public com.google.android.horologist.auth.data.oauth.devicegrant.impl.AuthDeviceGrantDefaultConfig copy(String clientId, String clientSecret);
    method public String getClientId();
    method public String getClientSecret();
    property public final String clientId;
    property public final String clientSecret;
  }

}

package com.google.android.horologist.auth.data.oauth.devicegrant.impl.google {

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public final class AuthDeviceGrantTokenRepositoryGoogleImpl implements com.google.android.horologist.auth.data.oauth.devicegrant.AuthDeviceGrantTokenRepository<com.google.android.horologist.auth.data.oauth.devicegrant.impl.AuthDeviceGrantDefaultConfig,com.google.android.horologist.auth.data.oauth.common.impl.google.api.DeviceCodeResponse,java.lang.String> {
    ctor public AuthDeviceGrantTokenRepositoryGoogleImpl(android.app.Application application, com.google.android.horologist.auth.data.oauth.common.impl.google.api.GoogleOAuthService googleOAuthService);
    method public suspend Object? fetch(com.google.android.horologist.auth.data.oauth.devicegrant.impl.AuthDeviceGrantDefaultConfig config, com.google.android.horologist.auth.data.oauth.common.impl.google.api.DeviceCodeResponse verificationInfoPayload, kotlin.coroutines.Continuation<? super kotlin.Result<? extends java.lang.String>> p);
  }

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public final class AuthDeviceGrantVerificationInfoRepositoryGoogleImpl implements com.google.android.horologist.auth.data.oauth.devicegrant.AuthDeviceGrantVerificationInfoRepository<com.google.android.horologist.auth.data.oauth.devicegrant.impl.AuthDeviceGrantDefaultConfig,com.google.android.horologist.auth.data.oauth.common.impl.google.api.DeviceCodeResponse> {
    ctor public AuthDeviceGrantVerificationInfoRepositoryGoogleImpl(com.google.android.horologist.auth.data.oauth.common.impl.google.api.GoogleOAuthService googleOAuthService);
    method public suspend Object? fetch(com.google.android.horologist.auth.data.oauth.devicegrant.impl.AuthDeviceGrantDefaultConfig config, kotlin.coroutines.Continuation<? super kotlin.Result<? extends com.google.android.horologist.auth.data.oauth.common.impl.google.api.DeviceCodeResponse>> p);
    field public static final com.google.android.horologist.auth.data.oauth.devicegrant.impl.google.AuthDeviceGrantVerificationInfoRepositoryGoogleImpl.Companion Companion;
  }

  public static final class AuthDeviceGrantVerificationInfoRepositoryGoogleImpl.Companion {
  }

}

package com.google.android.horologist.auth.data.oauth.pkce {

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public interface AuthPKCEConfigRepository<Config> {
    method public suspend Object? fetch(kotlin.coroutines.Continuation<? super Config> p);
  }

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public interface AuthPKCEOAuthCodeRepository<AuthPKCEConfig, OAuthCodePayload> {
    method public suspend Object? fetch(AuthPKCEConfig? config, androidx.wear.phone.interactions.authentication.CodeVerifier codeVerifier, kotlin.coroutines.Continuation<? super kotlin.Result<? extends OAuthCodePayload>> p);
  }

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public interface AuthPKCETokenPayloadListener<TokenPayload> {
    method public suspend Object? onPayloadReceived(TokenPayload? payload, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
  }

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public final class AuthPKCETokenPayloadListenerNoOpImpl<TokenPayload> implements com.google.android.horologist.auth.data.oauth.pkce.AuthPKCETokenPayloadListener<TokenPayload> {
    ctor public AuthPKCETokenPayloadListenerNoOpImpl();
    method public suspend Object? onPayloadReceived(TokenPayload? payload, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
  }

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public interface AuthPKCETokenRepository<AuthPKCEConfig, OAuthCodePayload, TokenPayload> {
    method public suspend Object? fetch(AuthPKCEConfig? config, String codeVerifier, OAuthCodePayload? oAuthCodePayload, kotlin.coroutines.Continuation<? super kotlin.Result<? extends TokenPayload>> p);
  }

}

package com.google.android.horologist.auth.data.oauth.pkce.impl {

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public final class AuthPKCEDefaultConfig {
    ctor public AuthPKCEDefaultConfig(String clientId, String clientSecret, android.net.Uri authProviderUrl, optional android.net.Uri? redirectUrl);
    method public String component1();
    method public String component2();
    method public android.net.Uri component3();
    method public android.net.Uri? component4();
    method public com.google.android.horologist.auth.data.oauth.pkce.impl.AuthPKCEDefaultConfig copy(String clientId, String clientSecret, android.net.Uri authProviderUrl, android.net.Uri? redirectUrl);
    method public android.net.Uri getAuthProviderUrl();
    method public String getClientId();
    method public String getClientSecret();
    method public android.net.Uri? getRedirectUrl();
    property public final android.net.Uri authProviderUrl;
    property public final String clientId;
    property public final String clientSecret;
    property public final android.net.Uri? redirectUrl;
  }

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public final class AuthPKCEOAuthCodeRepositoryImpl implements com.google.android.horologist.auth.data.oauth.pkce.AuthPKCEOAuthCodeRepository<com.google.android.horologist.auth.data.oauth.pkce.impl.AuthPKCEDefaultConfig,com.google.android.horologist.auth.data.oauth.pkce.impl.google.AuthPKCEOAuthCodeGooglePayload> {
    ctor public AuthPKCEOAuthCodeRepositoryImpl(android.app.Application application);
    method public suspend Object? fetch(com.google.android.horologist.auth.data.oauth.pkce.impl.AuthPKCEDefaultConfig config, androidx.wear.phone.interactions.authentication.CodeVerifier codeVerifier, kotlin.coroutines.Continuation<? super kotlin.Result<? extends com.google.android.horologist.auth.data.oauth.pkce.impl.google.AuthPKCEOAuthCodeGooglePayload>> p);
  }

}

package com.google.android.horologist.auth.data.oauth.pkce.impl.google {

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public final class AuthPKCEConfigRepositoryGoogleImpl implements com.google.android.horologist.auth.data.oauth.pkce.AuthPKCEConfigRepository<com.google.android.horologist.auth.data.oauth.pkce.impl.AuthPKCEDefaultConfig> {
    ctor public AuthPKCEConfigRepositoryGoogleImpl(String clientId, String clientSecret, optional String encodedPath, optional java.util.Map<java.lang.String,java.lang.String> queryParameters);
    method public suspend Object? fetch(kotlin.coroutines.Continuation<? super com.google.android.horologist.auth.data.oauth.pkce.impl.AuthPKCEDefaultConfig> p);
  }

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public final class AuthPKCEOAuthCodeGooglePayload {
    ctor public AuthPKCEOAuthCodeGooglePayload(String code, String redirectUrl);
    method public String component1();
    method public String component2();
    method public com.google.android.horologist.auth.data.oauth.pkce.impl.google.AuthPKCEOAuthCodeGooglePayload copy(String code, String redirectUrl);
    method public String getCode();
    method public String getRedirectUrl();
    property public final String code;
    property public final String redirectUrl;
  }

  @com.google.android.horologist.auth.data.ExperimentalHorologistAuthDataApi public final class AuthPKCETokenRepositoryGoogleImpl implements com.google.android.horologist.auth.data.oauth.pkce.AuthPKCETokenRepository<com.google.android.horologist.auth.data.oauth.pkce.impl.AuthPKCEDefaultConfig,com.google.android.horologist.auth.data.oauth.pkce.impl.google.AuthPKCEOAuthCodeGooglePayload,com.google.android.horologist.auth.data.oauth.common.impl.google.api.TokenResponse> {
    ctor public AuthPKCETokenRepositoryGoogleImpl(com.google.android.horologist.auth.data.oauth.common.impl.google.api.GoogleOAuthService googleOAuthService);
    method public suspend Object? fetch(com.google.android.horologist.auth.data.oauth.pkce.impl.AuthPKCEDefaultConfig config, String codeVerifier, com.google.android.horologist.auth.data.oauth.pkce.impl.google.AuthPKCEOAuthCodeGooglePayload oAuthCodePayload, kotlin.coroutines.Continuation<? super kotlin.Result<? extends com.google.android.horologist.auth.data.oauth.common.impl.google.api.TokenResponse>> p);
  }

}

