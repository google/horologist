// Signature format: 4.0
package com.google.android.horologist.auth.ui {

  @kotlin.RequiresOptIn(message="Horologist Auth UI is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalHorologistAuthUiApi {
  }

}

package com.google.android.horologist.auth.ui.oauth.devicegrant {

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public abstract sealed class AuthDeviceGrantScreenState {
  }

  public static final class AuthDeviceGrantScreenState.CheckPhone extends com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState {
    ctor public AuthDeviceGrantScreenState.CheckPhone(String code);
    method public String component1();
    method public com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState.CheckPhone copy(String code);
    method public String getCode();
    property public final String code;
  }

  public static final class AuthDeviceGrantScreenState.Failed extends com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState {
    field public static final com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState.Failed INSTANCE;
  }

  public static final class AuthDeviceGrantScreenState.Idle extends com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState {
    field public static final com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState.Idle INSTANCE;
  }

  public static final class AuthDeviceGrantScreenState.Loading extends com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState {
    field public static final com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState.Loading INSTANCE;
  }

  public static final class AuthDeviceGrantScreenState.Success extends com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState {
    field public static final com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState.Success INSTANCE;
  }

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public class AuthDeviceGrantViewModel<AuthDeviceGrantConfig, VerificationInfoPayload, TokenPayload> extends androidx.lifecycle.ViewModel {
    ctor public AuthDeviceGrantViewModel(com.google.android.horologist.auth.data.oauth.devicegrant.AuthDeviceGrantConfigRepository<AuthDeviceGrantConfig> authDeviceGrantConfigRepository, com.google.android.horologist.auth.data.oauth.devicegrant.AuthDeviceGrantVerificationInfoRepository<AuthDeviceGrantConfig,VerificationInfoPayload> authDeviceGrantVerificationInfoRepository, com.google.android.horologist.auth.data.oauth.devicegrant.AuthDeviceGrantTokenRepository<AuthDeviceGrantConfig,VerificationInfoPayload,TokenPayload> authDeviceGrantTokenRepository, kotlin.jvm.functions.Function2<? super AuthDeviceGrantConfig,? super VerificationInfoPayload,java.lang.String> checkPhonePayloadMapper, optional com.google.android.horologist.auth.data.oauth.devicegrant.AuthDeviceGrantTokenPayloadListener<TokenPayload> authDeviceGrantTokenPayloadListener);
    method public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState> getUiState();
    method public final void startAuthFlow();
    property public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState> uiState;
  }

}

package com.google.android.horologist.auth.ui.pkce {

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public abstract sealed class AuthPKCEScreenState {
  }

  public static final class AuthPKCEScreenState.CheckPhone extends com.google.android.horologist.auth.ui.pkce.AuthPKCEScreenState {
    field public static final com.google.android.horologist.auth.ui.pkce.AuthPKCEScreenState.CheckPhone INSTANCE;
  }

  public static final class AuthPKCEScreenState.Failed extends com.google.android.horologist.auth.ui.pkce.AuthPKCEScreenState {
    field public static final com.google.android.horologist.auth.ui.pkce.AuthPKCEScreenState.Failed INSTANCE;
  }

  public static final class AuthPKCEScreenState.Idle extends com.google.android.horologist.auth.ui.pkce.AuthPKCEScreenState {
    field public static final com.google.android.horologist.auth.ui.pkce.AuthPKCEScreenState.Idle INSTANCE;
  }

  public static final class AuthPKCEScreenState.Loading extends com.google.android.horologist.auth.ui.pkce.AuthPKCEScreenState {
    field public static final com.google.android.horologist.auth.ui.pkce.AuthPKCEScreenState.Loading INSTANCE;
  }

  public static final class AuthPKCEScreenState.Success extends com.google.android.horologist.auth.ui.pkce.AuthPKCEScreenState {
    field public static final com.google.android.horologist.auth.ui.pkce.AuthPKCEScreenState.Success INSTANCE;
  }

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public class AuthPKCEViewModel<AuthPKCEConfig, OAuthCodePayload, TokenPayload> extends androidx.lifecycle.ViewModel {
    ctor public AuthPKCEViewModel(com.google.android.horologist.auth.data.pkce.AuthPKCEConfigRepository<AuthPKCEConfig> authPKCEConfigRepository, com.google.android.horologist.auth.data.pkce.AuthPKCEOAuthCodeRepository<AuthPKCEConfig,OAuthCodePayload> authPKCEOAuthCodeRepository, com.google.android.horologist.auth.data.pkce.AuthPKCETokenRepository<AuthPKCEConfig,OAuthCodePayload,TokenPayload> authPKCETokenRepository, optional com.google.android.horologist.auth.data.pkce.AuthPKCETokenPayloadListener<TokenPayload> authPKCETokenPayloadListener);
    method public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.pkce.AuthPKCEScreenState> getUiState();
    method public final void startAuthFlow();
    property public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.pkce.AuthPKCEScreenState> uiState;
  }

}

