// Signature format: 4.0
package com.google.android.horologist.auth.ui {

  @kotlin.RequiresOptIn(message="Horologist Auth UI is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalHorologistAuthUiApi {
  }

}

package com.google.android.horologist.auth.ui.common.logging {

  public final class LoggingKt {
  }

}

package com.google.android.horologist.auth.ui.common.screens.prompt {

  public final class SignInPromptScreenKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public static void SignInPromptScreen(String message, kotlin.jvm.functions.Function1<? super com.google.android.horologist.auth.composables.model.AccountUiModel,kotlin.Unit> onAlreadySignedIn, com.google.android.horologist.compose.layout.ScalingLazyColumnState columnState, optional androidx.compose.ui.Modifier modifier, optional String title, optional com.google.android.horologist.auth.ui.common.screens.prompt.SignInPromptViewModel viewModel, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.ScalingLazyListScope,kotlin.Unit> content);
  }

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public abstract sealed class SignInPromptScreenState {
  }

  public static final class SignInPromptScreenState.Idle extends com.google.android.horologist.auth.ui.common.screens.prompt.SignInPromptScreenState {
    field public static final com.google.android.horologist.auth.ui.common.screens.prompt.SignInPromptScreenState.Idle INSTANCE;
  }

  public static final class SignInPromptScreenState.Loading extends com.google.android.horologist.auth.ui.common.screens.prompt.SignInPromptScreenState {
    field public static final com.google.android.horologist.auth.ui.common.screens.prompt.SignInPromptScreenState.Loading INSTANCE;
  }

  public static final class SignInPromptScreenState.SignedIn extends com.google.android.horologist.auth.ui.common.screens.prompt.SignInPromptScreenState {
    ctor public SignInPromptScreenState.SignedIn(com.google.android.horologist.auth.composables.model.AccountUiModel account);
    method public com.google.android.horologist.auth.composables.model.AccountUiModel component1();
    method public com.google.android.horologist.auth.ui.common.screens.prompt.SignInPromptScreenState.SignedIn copy(com.google.android.horologist.auth.composables.model.AccountUiModel account);
    method public com.google.android.horologist.auth.composables.model.AccountUiModel getAccount();
    property public final com.google.android.horologist.auth.composables.model.AccountUiModel account;
  }

  public static final class SignInPromptScreenState.SignedOut extends com.google.android.horologist.auth.ui.common.screens.prompt.SignInPromptScreenState {
    field public static final com.google.android.horologist.auth.ui.common.screens.prompt.SignInPromptScreenState.SignedOut INSTANCE;
  }

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public class SignInPromptViewModel extends androidx.lifecycle.ViewModel {
    ctor public SignInPromptViewModel(com.google.android.horologist.auth.data.common.repository.AuthUserRepository authUserRepository);
    method public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.common.screens.prompt.SignInPromptScreenState> getUiState();
    method public final void onIdleStateObserved();
    property public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.common.screens.prompt.SignInPromptScreenState> uiState;
  }

}

package com.google.android.horologist.auth.ui.common.screens.streamline {

  public final class StreamlineSignInDefaultScreenKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public static void StreamlineSignInDefaultScreen(kotlin.jvm.functions.Function1<? super com.google.android.horologist.auth.composables.model.AccountUiModel,kotlin.Unit> onSignedInConfirmationDialogDismissOrTimeout, kotlin.jvm.functions.Function0<kotlin.Unit> onNoAccountsAvailable, com.google.android.horologist.compose.layout.ScalingLazyColumnState columnState, com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInDefaultViewModel viewModel, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public abstract sealed class StreamlineSignInDefaultScreenState {
  }

  public static final class StreamlineSignInDefaultScreenState.Idle extends com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInDefaultScreenState {
    field public static final com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInDefaultScreenState.Idle INSTANCE;
  }

  public static final class StreamlineSignInDefaultScreenState.Loading extends com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInDefaultScreenState {
    field public static final com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInDefaultScreenState.Loading INSTANCE;
  }

  public static final class StreamlineSignInDefaultScreenState.MultipleAccountsAvailable extends com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInDefaultScreenState {
    ctor public StreamlineSignInDefaultScreenState.MultipleAccountsAvailable(java.util.List<com.google.android.horologist.auth.composables.model.AccountUiModel> accounts);
    method public java.util.List<com.google.android.horologist.auth.composables.model.AccountUiModel> component1();
    method public com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInDefaultScreenState.MultipleAccountsAvailable copy(java.util.List<com.google.android.horologist.auth.composables.model.AccountUiModel> accounts);
    method public java.util.List<com.google.android.horologist.auth.composables.model.AccountUiModel> getAccounts();
    property public final java.util.List<com.google.android.horologist.auth.composables.model.AccountUiModel> accounts;
  }

  public static final class StreamlineSignInDefaultScreenState.NoAccountsAvailable extends com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInDefaultScreenState {
    field public static final com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInDefaultScreenState.NoAccountsAvailable INSTANCE;
  }

  public static final class StreamlineSignInDefaultScreenState.SignedIn extends com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInDefaultScreenState {
    ctor public StreamlineSignInDefaultScreenState.SignedIn(com.google.android.horologist.auth.composables.model.AccountUiModel account);
    method public com.google.android.horologist.auth.composables.model.AccountUiModel component1();
    method public com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInDefaultScreenState.SignedIn copy(com.google.android.horologist.auth.composables.model.AccountUiModel account);
    method public com.google.android.horologist.auth.composables.model.AccountUiModel getAccount();
    property public final com.google.android.horologist.auth.composables.model.AccountUiModel account;
  }

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public final class StreamlineSignInDefaultViewModel extends androidx.lifecycle.ViewModel {
    ctor public StreamlineSignInDefaultViewModel(com.google.android.horologist.auth.data.common.repository.AuthUserRepository authUserRepository);
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInDefaultScreenState> getUiState();
    method public void onAccountSelected(com.google.android.horologist.auth.composables.model.AccountUiModel account);
    method public void onIdleStateObserved();
    property public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInDefaultScreenState> uiState;
  }

  public final class StreamlineSignInScreenKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public static void StreamlineSignInScreen(kotlin.jvm.functions.Function1<? super com.google.android.horologist.auth.composables.model.AccountUiModel,kotlin.Unit> onSingleAccountAvailable, kotlin.jvm.functions.Function1<? super java.util.List<com.google.android.horologist.auth.composables.model.AccountUiModel>,kotlin.Unit> onMultipleAccountsAvailable, kotlin.jvm.functions.Function0<kotlin.Unit> onNoAccountsAvailable, optional com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInViewModel viewModel, optional kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public abstract sealed class StreamlineSignInScreenState {
  }

  public static final class StreamlineSignInScreenState.Idle extends com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInScreenState {
    field public static final com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInScreenState.Idle INSTANCE;
  }

  public static final class StreamlineSignInScreenState.Loading extends com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInScreenState {
    field public static final com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInScreenState.Loading INSTANCE;
  }

  public static final class StreamlineSignInScreenState.MultipleAccountsAvailable extends com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInScreenState {
    ctor public StreamlineSignInScreenState.MultipleAccountsAvailable(java.util.List<com.google.android.horologist.auth.composables.model.AccountUiModel> accounts);
    method public java.util.List<com.google.android.horologist.auth.composables.model.AccountUiModel> component1();
    method public com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInScreenState.MultipleAccountsAvailable copy(java.util.List<com.google.android.horologist.auth.composables.model.AccountUiModel> accounts);
    method public java.util.List<com.google.android.horologist.auth.composables.model.AccountUiModel> getAccounts();
    property public final java.util.List<com.google.android.horologist.auth.composables.model.AccountUiModel> accounts;
  }

  public static final class StreamlineSignInScreenState.NoAccountsAvailable extends com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInScreenState {
    field public static final com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInScreenState.NoAccountsAvailable INSTANCE;
  }

  public static final class StreamlineSignInScreenState.SingleAccountAvailable extends com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInScreenState {
    ctor public StreamlineSignInScreenState.SingleAccountAvailable(com.google.android.horologist.auth.composables.model.AccountUiModel account);
    method public com.google.android.horologist.auth.composables.model.AccountUiModel component1();
    method public com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInScreenState.SingleAccountAvailable copy(com.google.android.horologist.auth.composables.model.AccountUiModel account);
    method public com.google.android.horologist.auth.composables.model.AccountUiModel getAccount();
    property public final com.google.android.horologist.auth.composables.model.AccountUiModel account;
  }

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public class StreamlineSignInViewModel extends androidx.lifecycle.ViewModel {
    ctor public StreamlineSignInViewModel(com.google.android.horologist.auth.data.common.repository.AuthUserRepository authUserRepository);
    method public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInScreenState> getUiState();
    method public final void onIdleStateObserved();
    property public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.common.screens.streamline.StreamlineSignInScreenState> uiState;
  }

}

package com.google.android.horologist.auth.ui.ext {

  public final class CompareAndSetKt {
  }

}

package com.google.android.horologist.auth.ui.googlesignin.prompt {

  public final class GoogleSignInPromptViewModelFactoryKt {
    method public static androidx.lifecycle.ViewModelProvider.Factory getGoogleSignInPromptViewModelFactory();
    property public static final androidx.lifecycle.ViewModelProvider.Factory GoogleSignInPromptViewModelFactory;
  }

}

package com.google.android.horologist.auth.ui.googlesignin.signin {

  public final class GoogleSignInScreenKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public static void GoogleSignInScreen(kotlin.jvm.functions.Function0<kotlin.Unit> onAuthCancelled, kotlin.jvm.functions.Function0<kotlin.Unit> failedContent, optional androidx.compose.ui.Modifier modifier, optional com.google.android.horologist.auth.ui.googlesignin.signin.GoogleSignInViewModel viewModel, kotlin.jvm.functions.Function1<? super com.google.android.horologist.auth.ui.googlesignin.signin.GoogleSignInScreenState.Success,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public static void GoogleSignInScreen(kotlin.jvm.functions.Function0<kotlin.Unit> onAuthCancelled, kotlin.jvm.functions.Function0<kotlin.Unit> onAuthSucceed, optional androidx.compose.ui.Modifier modifier, optional com.google.android.horologist.auth.ui.googlesignin.signin.GoogleSignInViewModel viewModel);
  }

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public abstract sealed class GoogleSignInScreenState {
  }

  public static final class GoogleSignInScreenState.Cancelled extends com.google.android.horologist.auth.ui.googlesignin.signin.GoogleSignInScreenState {
    field public static final com.google.android.horologist.auth.ui.googlesignin.signin.GoogleSignInScreenState.Cancelled INSTANCE;
  }

  public static final class GoogleSignInScreenState.Failed extends com.google.android.horologist.auth.ui.googlesignin.signin.GoogleSignInScreenState {
    field public static final com.google.android.horologist.auth.ui.googlesignin.signin.GoogleSignInScreenState.Failed INSTANCE;
  }

  public static final class GoogleSignInScreenState.Idle extends com.google.android.horologist.auth.ui.googlesignin.signin.GoogleSignInScreenState {
    field public static final com.google.android.horologist.auth.ui.googlesignin.signin.GoogleSignInScreenState.Idle INSTANCE;
  }

  public static final class GoogleSignInScreenState.SelectAccount extends com.google.android.horologist.auth.ui.googlesignin.signin.GoogleSignInScreenState {
    field public static final com.google.android.horologist.auth.ui.googlesignin.signin.GoogleSignInScreenState.SelectAccount INSTANCE;
  }

  public static final class GoogleSignInScreenState.Success extends com.google.android.horologist.auth.ui.googlesignin.signin.GoogleSignInScreenState {
    ctor public GoogleSignInScreenState.Success(String? displayName, String? email, android.net.Uri? photoUrl);
    method public String? component1();
    method public String? component2();
    method public android.net.Uri? component3();
    method public com.google.android.horologist.auth.ui.googlesignin.signin.GoogleSignInScreenState.Success copy(String? displayName, String? email, android.net.Uri? photoUrl);
    method public String? getDisplayName();
    method public String? getEmail();
    method public android.net.Uri? getPhotoUrl();
    property public final String? displayName;
    property public final String? email;
    property public final android.net.Uri? photoUrl;
  }

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public class GoogleSignInViewModel extends androidx.lifecycle.ViewModel {
    ctor public GoogleSignInViewModel(com.google.android.gms.auth.api.signin.GoogleSignInClient googleSignInClient, optional com.google.android.horologist.auth.data.googlesignin.GoogleSignInEventListener googleSignInEventListener);
    method public final com.google.android.gms.auth.api.signin.GoogleSignInClient getGoogleSignInClient();
    method public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.googlesignin.signin.GoogleSignInScreenState> getUiState();
    method public final void onAccountSelected(com.google.android.gms.auth.api.signin.GoogleSignInAccount account);
    method public final void onAccountSelectionFailed();
    method public final void onAuthCancelled();
    method public final void onIdleStateObserved();
    property public final com.google.android.gms.auth.api.signin.GoogleSignInClient googleSignInClient;
    property public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.googlesignin.signin.GoogleSignInScreenState> uiState;
  }

}

package com.google.android.horologist.auth.ui.mapper {

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public final class AccountUiModelMapper {
    method public com.google.android.horologist.auth.composables.model.AccountUiModel map(com.google.android.horologist.auth.data.common.model.AuthUser authUser, optional String defaultEmail);
    field public static final com.google.android.horologist.auth.ui.mapper.AccountUiModelMapper INSTANCE;
  }

}

package com.google.android.horologist.auth.ui.oauth.devicegrant.signin {

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public abstract sealed class DeviceGrantScreenState {
  }

  public static final class DeviceGrantScreenState.CheckPhone extends com.google.android.horologist.auth.ui.oauth.devicegrant.signin.DeviceGrantScreenState {
    ctor public DeviceGrantScreenState.CheckPhone(String code);
    method public String component1();
    method public com.google.android.horologist.auth.ui.oauth.devicegrant.signin.DeviceGrantScreenState.CheckPhone copy(String code);
    method public String getCode();
    property public final String code;
  }

  public static final class DeviceGrantScreenState.Failed extends com.google.android.horologist.auth.ui.oauth.devicegrant.signin.DeviceGrantScreenState {
    field public static final com.google.android.horologist.auth.ui.oauth.devicegrant.signin.DeviceGrantScreenState.Failed INSTANCE;
  }

  public static final class DeviceGrantScreenState.Idle extends com.google.android.horologist.auth.ui.oauth.devicegrant.signin.DeviceGrantScreenState {
    field public static final com.google.android.horologist.auth.ui.oauth.devicegrant.signin.DeviceGrantScreenState.Idle INSTANCE;
  }

  public static final class DeviceGrantScreenState.Loading extends com.google.android.horologist.auth.ui.oauth.devicegrant.signin.DeviceGrantScreenState {
    field public static final com.google.android.horologist.auth.ui.oauth.devicegrant.signin.DeviceGrantScreenState.Loading INSTANCE;
  }

  public static final class DeviceGrantScreenState.Success extends com.google.android.horologist.auth.ui.oauth.devicegrant.signin.DeviceGrantScreenState {
    field public static final com.google.android.horologist.auth.ui.oauth.devicegrant.signin.DeviceGrantScreenState.Success INSTANCE;
  }

  public final class DeviceGrantSignInScreenKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public static <DeviceGrantConfig, VerificationInfoPayload, TokenPayload> void DeviceGrantSignInScreen(kotlin.jvm.functions.Function0<kotlin.Unit> failedContent, optional androidx.compose.ui.Modifier modifier, com.google.android.horologist.auth.ui.oauth.devicegrant.signin.DeviceGrantViewModel<DeviceGrantConfig,VerificationInfoPayload,TokenPayload> viewModel, kotlin.jvm.functions.Function1<? super com.google.android.horologist.auth.ui.oauth.devicegrant.signin.DeviceGrantScreenState.Success,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public static <DeviceGrantConfig, VerificationInfoPayload, TokenPayload> void DeviceGrantSignInScreen(kotlin.jvm.functions.Function0<kotlin.Unit> onAuthSucceed, optional androidx.compose.ui.Modifier modifier, com.google.android.horologist.auth.ui.oauth.devicegrant.signin.DeviceGrantViewModel<DeviceGrantConfig,VerificationInfoPayload,TokenPayload> viewModel);
  }

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public class DeviceGrantViewModel<DeviceGrantConfig, VerificationInfoPayload, TokenPayload> extends androidx.lifecycle.ViewModel {
    ctor public DeviceGrantViewModel(com.google.android.horologist.auth.data.oauth.devicegrant.DeviceGrantConfigRepository<DeviceGrantConfig> deviceGrantConfigRepository, com.google.android.horologist.auth.data.oauth.devicegrant.DeviceGrantVerificationInfoRepository<DeviceGrantConfig,VerificationInfoPayload> deviceGrantVerificationInfoRepository, com.google.android.horologist.auth.data.oauth.devicegrant.DeviceGrantTokenRepository<DeviceGrantConfig,VerificationInfoPayload,TokenPayload> deviceGrantTokenRepository, kotlin.jvm.functions.Function2<? super DeviceGrantConfig,? super VerificationInfoPayload,java.lang.String> checkPhonePayloadMapper, optional com.google.android.horologist.auth.data.oauth.devicegrant.DeviceGrantTokenPayloadListener<TokenPayload> deviceGrantTokenPayloadListener);
    method public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.oauth.devicegrant.signin.DeviceGrantScreenState> getUiState();
    method public final void startAuthFlow();
    property public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.oauth.devicegrant.signin.DeviceGrantScreenState> uiState;
  }

}

package com.google.android.horologist.auth.ui.oauth.pkce.signin {

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public abstract sealed class PKCEScreenState {
  }

  public static final class PKCEScreenState.CheckPhone extends com.google.android.horologist.auth.ui.oauth.pkce.signin.PKCEScreenState {
    field public static final com.google.android.horologist.auth.ui.oauth.pkce.signin.PKCEScreenState.CheckPhone INSTANCE;
  }

  public static final class PKCEScreenState.Failed extends com.google.android.horologist.auth.ui.oauth.pkce.signin.PKCEScreenState {
    field public static final com.google.android.horologist.auth.ui.oauth.pkce.signin.PKCEScreenState.Failed INSTANCE;
  }

  public static final class PKCEScreenState.Idle extends com.google.android.horologist.auth.ui.oauth.pkce.signin.PKCEScreenState {
    field public static final com.google.android.horologist.auth.ui.oauth.pkce.signin.PKCEScreenState.Idle INSTANCE;
  }

  public static final class PKCEScreenState.Loading extends com.google.android.horologist.auth.ui.oauth.pkce.signin.PKCEScreenState {
    field public static final com.google.android.horologist.auth.ui.oauth.pkce.signin.PKCEScreenState.Loading INSTANCE;
  }

  public static final class PKCEScreenState.Success extends com.google.android.horologist.auth.ui.oauth.pkce.signin.PKCEScreenState {
    field public static final com.google.android.horologist.auth.ui.oauth.pkce.signin.PKCEScreenState.Success INSTANCE;
  }

  public final class PKCESignInScreenKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public static <PKCEConfig, OAuthCodePayload, TokenPayload> void PKCESignInScreen(kotlin.jvm.functions.Function0<kotlin.Unit> failedContent, optional androidx.compose.ui.Modifier modifier, com.google.android.horologist.auth.ui.oauth.pkce.signin.PKCESignInViewModel<PKCEConfig,OAuthCodePayload,TokenPayload> viewModel, kotlin.jvm.functions.Function1<? super com.google.android.horologist.auth.ui.oauth.pkce.signin.PKCEScreenState.Success,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public static <PKCEConfig, OAuthCodePayload, TokenPayload> void PKCESignInScreen(kotlin.jvm.functions.Function0<kotlin.Unit> onAuthSucceed, optional androidx.compose.ui.Modifier modifier, com.google.android.horologist.auth.ui.oauth.pkce.signin.PKCESignInViewModel<PKCEConfig,OAuthCodePayload,TokenPayload> viewModel);
  }

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public class PKCESignInViewModel<PKCEConfig, OAuthCodePayload, TokenPayload> extends androidx.lifecycle.ViewModel {
    ctor public PKCESignInViewModel(com.google.android.horologist.auth.data.oauth.pkce.PKCEConfigRepository<PKCEConfig> pkceConfigRepository, com.google.android.horologist.auth.data.oauth.pkce.PKCEOAuthCodeRepository<PKCEConfig,OAuthCodePayload> pkceOAuthCodeRepository, com.google.android.horologist.auth.data.oauth.pkce.PKCETokenRepository<PKCEConfig,OAuthCodePayload,TokenPayload> pkceTokenRepository, optional com.google.android.horologist.auth.data.oauth.pkce.PKCETokenPayloadListener<TokenPayload> pkceTokenPayloadListener);
    method public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.oauth.pkce.signin.PKCEScreenState> getUiState();
    method public final void startAuthFlow();
    property public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.oauth.pkce.signin.PKCEScreenState> uiState;
  }

}

