// Signature format: 4.0
package com.google.android.horologist.auth.ui {

  @kotlin.RequiresOptIn(message="Horologist Auth UI is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalHorologistAuthUiApi {
  }

}

package com.google.android.horologist.auth.ui.common.screens {

  public final class LoadingViewKt {
  }

  public final class SignInPromptScreenKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public static void SignInPromptScreen(String message, kotlin.jvm.functions.Function0<kotlin.Unit> onAlreadySignedIn, com.google.android.horologist.compose.layout.ScalingLazyColumnState columnState, optional androidx.compose.ui.Modifier modifier, optional String title, optional com.google.android.horologist.auth.ui.common.screens.SignInPromptViewModel viewModel, kotlin.jvm.functions.Function1<? super androidx.wear.compose.material.ScalingLazyListScope,kotlin.Unit> content);
  }

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public abstract sealed class SignInPromptScreenState {
  }

  public static final class SignInPromptScreenState.Idle extends com.google.android.horologist.auth.ui.common.screens.SignInPromptScreenState {
    field public static final com.google.android.horologist.auth.ui.common.screens.SignInPromptScreenState.Idle INSTANCE;
  }

  public static final class SignInPromptScreenState.Loading extends com.google.android.horologist.auth.ui.common.screens.SignInPromptScreenState {
    field public static final com.google.android.horologist.auth.ui.common.screens.SignInPromptScreenState.Loading INSTANCE;
  }

  public static final class SignInPromptScreenState.SignedIn extends com.google.android.horologist.auth.ui.common.screens.SignInPromptScreenState {
    ctor public SignInPromptScreenState.SignedIn(optional String? displayName, optional String? email, optional Object? avatarUri);
    method public String? component1();
    method public String? component2();
    method public Object? component3();
    method public com.google.android.horologist.auth.ui.common.screens.SignInPromptScreenState.SignedIn copy(String? displayName, String? email, Object? avatarUri);
    method public Object? getAvatarUri();
    method public String? getDisplayName();
    method public String? getEmail();
    property public final Object? avatarUri;
    property public final String? displayName;
    property public final String? email;
  }

  public static final class SignInPromptScreenState.SignedOut extends com.google.android.horologist.auth.ui.common.screens.SignInPromptScreenState {
    field public static final com.google.android.horologist.auth.ui.common.screens.SignInPromptScreenState.SignedOut INSTANCE;
  }

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public class SignInPromptViewModel extends androidx.lifecycle.ViewModel {
    ctor public SignInPromptViewModel(com.google.android.horologist.auth.data.common.repository.AuthRepository authRepository);
    method public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.common.screens.SignInPromptScreenState> getUiState();
    method public final void startFlow();
    property public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.common.screens.SignInPromptScreenState> uiState;
  }

}

package com.google.android.horologist.auth.ui.ext {

  public final class CompareAndSetKt {
  }

}

package com.google.android.horologist.auth.ui.googlesignin {

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public final class GoogleSignInPromptViewModel {
    method public androidx.lifecycle.ViewModelProvider.Factory getFactory();
    property public final androidx.lifecycle.ViewModelProvider.Factory Factory;
    field public static final com.google.android.horologist.auth.ui.googlesignin.GoogleSignInPromptViewModel INSTANCE;
  }

  public final class GoogleSignInScreenKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public static void GoogleSignInScreen(optional androidx.compose.ui.Modifier modifier, optional com.google.android.horologist.auth.ui.googlesignin.GoogleSignInViewModel viewModel, kotlin.jvm.functions.Function1<? super com.google.android.horologist.auth.ui.googlesignin.GoogleSignInScreenState.Success,kotlin.Unit> successContent, kotlin.jvm.functions.Function0<kotlin.Unit> failedContent);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public static void GoogleSignInScreen(optional androidx.compose.ui.Modifier modifier, optional com.google.android.horologist.auth.ui.googlesignin.GoogleSignInViewModel viewModel, kotlin.jvm.functions.Function0<kotlin.Unit> onAuthSucceed);
  }

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public abstract sealed class GoogleSignInScreenState {
  }

  public static final class GoogleSignInScreenState.Failed extends com.google.android.horologist.auth.ui.googlesignin.GoogleSignInScreenState {
    field public static final com.google.android.horologist.auth.ui.googlesignin.GoogleSignInScreenState.Failed INSTANCE;
  }

  public static final class GoogleSignInScreenState.Idle extends com.google.android.horologist.auth.ui.googlesignin.GoogleSignInScreenState {
    field public static final com.google.android.horologist.auth.ui.googlesignin.GoogleSignInScreenState.Idle INSTANCE;
  }

  public static final class GoogleSignInScreenState.SelectAccount extends com.google.android.horologist.auth.ui.googlesignin.GoogleSignInScreenState {
    field public static final com.google.android.horologist.auth.ui.googlesignin.GoogleSignInScreenState.SelectAccount INSTANCE;
  }

  public static final class GoogleSignInScreenState.Success extends com.google.android.horologist.auth.ui.googlesignin.GoogleSignInScreenState {
    ctor public GoogleSignInScreenState.Success(String? displayName, String? email, android.net.Uri? photoUrl);
    method public String? component1();
    method public String? component2();
    method public android.net.Uri? component3();
    method public com.google.android.horologist.auth.ui.googlesignin.GoogleSignInScreenState.Success copy(String? displayName, String? email, android.net.Uri? photoUrl);
    method public String? getDisplayName();
    method public String? getEmail();
    method public android.net.Uri? getPhotoUrl();
    property public final String? displayName;
    property public final String? email;
    property public final android.net.Uri? photoUrl;
  }

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public class GoogleSignInViewModel extends androidx.lifecycle.ViewModel {
    ctor public GoogleSignInViewModel(optional com.google.android.horologist.auth.data.googlesignin.GoogleSignInAccountListener googleSignInAccountListener);
    method public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.googlesignin.GoogleSignInScreenState> getUiState();
    method public final void onAccountSelected(com.google.android.gms.auth.api.signin.GoogleSignInAccount account);
    method public final void onAccountSelectionFailed();
    method public final void startAuthFlow();
    property public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.googlesignin.GoogleSignInScreenState> uiState;
  }

}

package com.google.android.horologist.auth.ui.oauth.devicegrant {

  public final class AuthDeviceGrantScreenKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public static <AuthDeviceGrantConfig, VerificationInfoPayload, TokenPayload> void AuthDeviceGrantScreen(optional androidx.compose.ui.Modifier modifier, com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantViewModel<AuthDeviceGrantConfig,VerificationInfoPayload,TokenPayload> viewModel, kotlin.jvm.functions.Function1<? super com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState.Success,kotlin.Unit> successContent, kotlin.jvm.functions.Function0<kotlin.Unit> failedContent);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public static <AuthDeviceGrantConfig, VerificationInfoPayload, TokenPayload> void AuthDeviceGrantScreen(optional androidx.compose.ui.Modifier modifier, com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantViewModel<AuthDeviceGrantConfig,VerificationInfoPayload,TokenPayload> viewModel, kotlin.jvm.functions.Function0<kotlin.Unit> onAuthSucceed);
  }

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public abstract sealed class AuthDeviceGrantScreenState {
  }

  public static final class AuthDeviceGrantScreenState.CheckPhone extends com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState {
    ctor public AuthDeviceGrantScreenState.CheckPhone(String code);
    method public String component1();
    method public com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState.CheckPhone copy(String code);
    method public String getCode();
    property public final String code;
  }

  public static final class AuthDeviceGrantScreenState.Failed extends com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState {
    field public static final com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState.Failed INSTANCE;
  }

  public static final class AuthDeviceGrantScreenState.Idle extends com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState {
    field public static final com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState.Idle INSTANCE;
  }

  public static final class AuthDeviceGrantScreenState.Loading extends com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState {
    field public static final com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState.Loading INSTANCE;
  }

  public static final class AuthDeviceGrantScreenState.Success extends com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState {
    field public static final com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState.Success INSTANCE;
  }

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public class AuthDeviceGrantViewModel<AuthDeviceGrantConfig, VerificationInfoPayload, TokenPayload> extends androidx.lifecycle.ViewModel {
    ctor public AuthDeviceGrantViewModel(com.google.android.horologist.auth.data.oauth.devicegrant.AuthDeviceGrantConfigRepository<AuthDeviceGrantConfig> authDeviceGrantConfigRepository, com.google.android.horologist.auth.data.oauth.devicegrant.AuthDeviceGrantVerificationInfoRepository<AuthDeviceGrantConfig,VerificationInfoPayload> authDeviceGrantVerificationInfoRepository, com.google.android.horologist.auth.data.oauth.devicegrant.AuthDeviceGrantTokenRepository<AuthDeviceGrantConfig,VerificationInfoPayload,TokenPayload> authDeviceGrantTokenRepository, kotlin.jvm.functions.Function2<? super AuthDeviceGrantConfig,? super VerificationInfoPayload,java.lang.String> checkPhonePayloadMapper, optional com.google.android.horologist.auth.data.oauth.devicegrant.AuthDeviceGrantTokenPayloadListener<TokenPayload> authDeviceGrantTokenPayloadListener);
    method public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState> getUiState();
    method public final void startAuthFlow();
    property public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.oauth.devicegrant.AuthDeviceGrantScreenState> uiState;
  }

}

package com.google.android.horologist.auth.ui.oauth.pkce {

  public final class AuthPKCEScreenKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public static <AuthPKCEConfig, OAuthCodePayload, TokenPayload> void AuthPKCEScreen(optional androidx.compose.ui.Modifier modifier, com.google.android.horologist.auth.ui.oauth.pkce.AuthPKCEViewModel<AuthPKCEConfig,OAuthCodePayload,TokenPayload> viewModel, kotlin.jvm.functions.Function1<? super com.google.android.horologist.auth.ui.oauth.pkce.AuthPKCEScreenState.Success,kotlin.Unit> successContent, kotlin.jvm.functions.Function0<kotlin.Unit> failedContent);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public static <AuthPKCEConfig, OAuthCodePayload, TokenPayload> void AuthPKCEScreen(optional androidx.compose.ui.Modifier modifier, com.google.android.horologist.auth.ui.oauth.pkce.AuthPKCEViewModel<AuthPKCEConfig,OAuthCodePayload,TokenPayload> viewModel, kotlin.jvm.functions.Function0<kotlin.Unit> onAuthSucceed);
  }

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public abstract sealed class AuthPKCEScreenState {
  }

  public static final class AuthPKCEScreenState.CheckPhone extends com.google.android.horologist.auth.ui.oauth.pkce.AuthPKCEScreenState {
    field public static final com.google.android.horologist.auth.ui.oauth.pkce.AuthPKCEScreenState.CheckPhone INSTANCE;
  }

  public static final class AuthPKCEScreenState.Failed extends com.google.android.horologist.auth.ui.oauth.pkce.AuthPKCEScreenState {
    field public static final com.google.android.horologist.auth.ui.oauth.pkce.AuthPKCEScreenState.Failed INSTANCE;
  }

  public static final class AuthPKCEScreenState.Idle extends com.google.android.horologist.auth.ui.oauth.pkce.AuthPKCEScreenState {
    field public static final com.google.android.horologist.auth.ui.oauth.pkce.AuthPKCEScreenState.Idle INSTANCE;
  }

  public static final class AuthPKCEScreenState.Loading extends com.google.android.horologist.auth.ui.oauth.pkce.AuthPKCEScreenState {
    field public static final com.google.android.horologist.auth.ui.oauth.pkce.AuthPKCEScreenState.Loading INSTANCE;
  }

  public static final class AuthPKCEScreenState.Success extends com.google.android.horologist.auth.ui.oauth.pkce.AuthPKCEScreenState {
    field public static final com.google.android.horologist.auth.ui.oauth.pkce.AuthPKCEScreenState.Success INSTANCE;
  }

  @com.google.android.horologist.auth.ui.ExperimentalHorologistAuthUiApi public class AuthPKCEViewModel<AuthPKCEConfig, OAuthCodePayload, TokenPayload> extends androidx.lifecycle.ViewModel {
    ctor public AuthPKCEViewModel(com.google.android.horologist.auth.data.oauth.pkce.AuthPKCEConfigRepository<AuthPKCEConfig> authPKCEConfigRepository, com.google.android.horologist.auth.data.oauth.pkce.AuthPKCEOAuthCodeRepository<AuthPKCEConfig,OAuthCodePayload> authPKCEOAuthCodeRepository, com.google.android.horologist.auth.data.oauth.pkce.AuthPKCETokenRepository<AuthPKCEConfig,OAuthCodePayload,TokenPayload> authPKCETokenRepository, optional com.google.android.horologist.auth.data.oauth.pkce.AuthPKCETokenPayloadListener<TokenPayload> authPKCETokenPayloadListener);
    method public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.oauth.pkce.AuthPKCEScreenState> getUiState();
    method public final void startAuthFlow();
    property public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.auth.ui.oauth.pkce.AuthPKCEScreenState> uiState;
  }

}

