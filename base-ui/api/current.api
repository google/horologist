// Signature format: 4.0
package com.google.android.horologist.base.ui {

  @kotlin.RequiresOptIn(message="Horologist base ui is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalHorologistBaseUiApi {
  }

}

package com.google.android.horologist.base.ui.components {

  public final class AlertDialogKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void AlertDialog(String body, kotlin.jvm.functions.Function0<kotlin.Unit> onCancelButtonClick, kotlin.jvm.functions.Function0<kotlin.Unit> onOKButtonClick, boolean showDialog, androidx.wear.compose.foundation.lazy.ScalingLazyListState scalingLazyListState, optional androidx.compose.ui.Modifier modifier, optional String title, optional String okButtonContentDescription, optional String cancelButtonContentDescription);
  }

  public final class ConfirmationDialogKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void ConfirmationDialog(kotlin.jvm.functions.Function0<kotlin.Unit> onTimeout, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit>? icon, optional androidx.wear.compose.foundation.lazy.ScalingLazyListState scrollState, optional long durationMillis, optional long backgroundColor, optional long contentColor, optional long iconColor, optional androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement, optional androidx.compose.foundation.layout.PaddingValues contentPadding, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> content);
  }

  public enum IconRtlMode {
    method public static com.google.android.horologist.base.ui.components.IconRtlMode valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static com.google.android.horologist.base.ui.components.IconRtlMode[] values();
    enum_constant public static final com.google.android.horologist.base.ui.components.IconRtlMode Default;
    enum_constant public static final com.google.android.horologist.base.ui.components.IconRtlMode Mirrored;
  }

  public final class StandardButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void StandardButton(androidx.compose.ui.graphics.vector.ImageVector imageVector, String contentDescription, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional com.google.android.horologist.base.ui.components.StandardButtonType buttonType, optional com.google.android.horologist.base.ui.components.StandardButtonSize buttonSize, optional boolean enabled);
  }

  @com.google.android.horologist.annotations.ExperimentalHorologistApi public enum StandardButtonSize {
    method public final float getIconSize();
    method public final float getTapTargetSize();
    method public static com.google.android.horologist.base.ui.components.StandardButtonSize valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static com.google.android.horologist.base.ui.components.StandardButtonSize[] values();
    property public final float iconSize;
    property public final float tapTargetSize;
    enum_constant public static final com.google.android.horologist.base.ui.components.StandardButtonSize Default;
    enum_constant public static final com.google.android.horologist.base.ui.components.StandardButtonSize ExtraSmall;
    enum_constant public static final com.google.android.horologist.base.ui.components.StandardButtonSize Large;
    enum_constant public static final com.google.android.horologist.base.ui.components.StandardButtonSize Small;
  }

  @com.google.android.horologist.annotations.ExperimentalHorologistApi public enum StandardButtonType {
    method public static com.google.android.horologist.base.ui.components.StandardButtonType valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static com.google.android.horologist.base.ui.components.StandardButtonType[] values();
    enum_constant public static final com.google.android.horologist.base.ui.components.StandardButtonType IconOnly;
    enum_constant public static final com.google.android.horologist.base.ui.components.StandardButtonType Primary;
    enum_constant public static final com.google.android.horologist.base.ui.components.StandardButtonType Secondary;
  }

  public final class StandardChipIconWithProgressKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void StandardChipIconWithProgress(optional androidx.compose.ui.Modifier modifier, optional Object? icon, optional boolean largeIcon, optional androidx.compose.ui.graphics.painter.Painter? placeholder, optional long progressIndicatorColor, optional long progressTrackColor);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void StandardChipIconWithProgress(float progress, optional androidx.compose.ui.Modifier modifier, optional Object? icon, optional boolean largeIcon, optional androidx.compose.ui.graphics.painter.Painter? placeholder, optional long progressIndicatorColor, optional long progressTrackColor);
  }

  public final class StandardChipKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void StandardChip(String label, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional String? secondaryLabel, optional Object? icon, optional boolean largeIcon, optional androidx.compose.ui.graphics.painter.Painter? placeholder, optional com.google.android.horologist.base.ui.components.StandardChipType chipType, optional boolean enabled);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void StandardChip(String label, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional String? secondaryLabel, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit>? icon, optional boolean largeIcon, optional com.google.android.horologist.base.ui.components.StandardChipType chipType, optional boolean enabled);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void StandardChip(@StringRes int labelId, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional String? secondaryLabel, optional Object? icon, optional boolean largeIcon, optional androidx.compose.ui.graphics.painter.Painter? placeholder, optional com.google.android.horologist.base.ui.components.StandardChipType chipType, optional boolean enabled);
  }

  public enum StandardChipType {
    method public static com.google.android.horologist.base.ui.components.StandardChipType valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static com.google.android.horologist.base.ui.components.StandardChipType[] values();
    enum_constant public static final com.google.android.horologist.base.ui.components.StandardChipType Primary;
    enum_constant public static final com.google.android.horologist.base.ui.components.StandardChipType Secondary;
  }

  public final class StandardIconKt {
    method @androidx.compose.runtime.Composable public static void StandardIcon(androidx.compose.ui.graphics.vector.ImageVector imageVector, String? contentDescription, optional androidx.compose.ui.Modifier modifier, optional com.google.android.horologist.base.ui.components.IconRtlMode rtlMode);
  }

  public final class TitleKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void Title(@StringRes int textId, optional androidx.compose.ui.Modifier modifier);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void Title(String text, optional androidx.compose.ui.Modifier modifier);
  }

}

package com.google.android.horologist.base.ui.semantics {

  @com.google.android.horologist.annotations.ExperimentalHorologistApi public final class CustomSemanticsProperties {
    method public androidx.compose.ui.graphics.vector.ImageVector getIconImageVector(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.graphics.vector.ImageVector> getIconImageVectorKey();
    method public void setIconImageVector(androidx.compose.ui.semantics.SemanticsPropertyReceiver, androidx.compose.ui.graphics.vector.ImageVector);
    property public final androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.graphics.vector.ImageVector> IconImageVectorKey;
    field public static final com.google.android.horologist.base.ui.semantics.CustomSemanticsProperties INSTANCE;
  }

}

package com.google.android.horologist.base.ui.util {

  public final class A11yKt {
    method public static String? getDECORATIVE_ELEMENT_CONTENT_DESCRIPTION();
    property public static final String? DECORATIVE_ELEMENT_CONTENT_DESCRIPTION;
  }

  public final class RememberVectorPainterKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static androidx.compose.ui.graphics.vector.VectorPainter rememberVectorPainter(androidx.compose.ui.graphics.vector.ImageVector image, long tintColor, optional int tintBlendMode);
  }

}

