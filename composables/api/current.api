// Signature format: 4.0
package com.google.android.horologist.composables {

  public final class DatePickerKt {
    method @androidx.compose.runtime.Composable public static void DatePicker(kotlin.jvm.functions.Function1<? super java.time.LocalDate,kotlin.Unit> onDateConfirm, optional androidx.compose.ui.Modifier modifier, optional java.time.LocalDate date, optional java.time.LocalDate? fromDate, optional java.time.LocalDate? toDate);
  }

  public final class DatePickerPreviewKt {
    method @androidx.compose.runtime.Composable @androidx.wear.compose.ui.tooling.preview.WearPreviewDevices @androidx.wear.compose.ui.tooling.preview.WearPreviewFontScales public static void DatePickerPreview();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(device=androidx.wear.tooling.preview.devices.WearDevices.LARGE_ROUND, showSystemUi=true, backgroundColor=4278190080L, showBackground=true, group="Fonts - Small", fontScale=0.94f) public static void DatePickerPreviewLargeDeviceSmallFont();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(device=androidx.wear.tooling.preview.devices.WearDevices.SMALL_ROUND, showSystemUi=true, backgroundColor=4278190080L, showBackground=true, group="Fonts - Largest", fontScale=1.24f) public static void DatePickerPreviewSmallDeviceWithLargeFontBold();
  }

  public final class MarqueeTextKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void MarqueeText(androidx.compose.ui.text.AnnotatedString text, optional androidx.compose.ui.Modifier modifier, optional java.util.Map<java.lang.String,androidx.compose.foundation.text.InlineTextContent> inlineContent, optional long color, optional androidx.compose.ui.text.TextStyle style, optional int textAlign, optional float followGap, optional float edgeGradientWidth, optional float marqueeDpPerSecond, optional long pauseTime);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void MarqueeText(String text, optional androidx.compose.ui.Modifier modifier, optional long color, optional androidx.compose.ui.text.TextStyle style, optional int textAlign, optional float followGap, optional float edgeGradientWidth, optional float marqueeDpPerSecond, optional long pauseTime);
  }

  public final class MarqueeTextPreviewKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreview public static void MarqueeTextConstantScrollingPreview();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreview public static void MarqueeTextConstantWithIconScrollingPreview();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreview public static void MarqueeTextShortTextCenterPreview();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreview public static void MarqueeTextShortTextRightPreview();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreview public static void MarqueeTextShortTextRtlPreview();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreview public static void MarqueeTextStyledPreview();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreview public static void MarqueeTextTypicalPreview();
  }

  public final class PlaceholderChipKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void PlaceholderChip(optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.wear.compose.material.PlaceholderState placeholderState, optional boolean secondaryLabel, optional boolean icon, optional androidx.wear.compose.material.ChipColors colors, optional boolean enabled, optional String contentDescription);
  }

  public final class PlaceholderChipPreviewKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreview public static void PlaceholderChipPreview();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreview public static void PlaceholderChipPreviewWithSecondaryColors();
  }

  public enum PreviewAnimationState {
    method public float getTarget();
    property public final float target;
    enum_constant public static final com.google.android.horologist.composables.PreviewAnimationState End;
    enum_constant public static final com.google.android.horologist.composables.PreviewAnimationState Start;
  }

  public final class ProgressIndicatorSegment {
    ctor public ProgressIndicatorSegment(float weight, androidx.compose.ui.graphics.Brush indicatorBrush, optional androidx.compose.ui.graphics.Color? trackColor, optional androidx.compose.ui.graphics.Color? inProgressTrackColor);
    ctor public ProgressIndicatorSegment(float weight, long indicatorColor, optional androidx.compose.ui.graphics.Color? trackColor, optional androidx.compose.ui.graphics.Color? inProgressTrackColor);
    method public float component1();
    method public androidx.compose.ui.graphics.Brush component2();
    method public androidx.compose.ui.graphics.Color? component3-QN2ZGVo();
    method public androidx.compose.ui.graphics.Color? component4-QN2ZGVo();
    method public com.google.android.horologist.composables.ProgressIndicatorSegment copy-Ij2XjQ8(float weight, androidx.compose.ui.graphics.Brush indicatorBrush, androidx.compose.ui.graphics.Color? trackColor, androidx.compose.ui.graphics.Color? inProgressTrackColor);
    method public androidx.compose.ui.graphics.Color? getInProgressTrackColor();
    method public androidx.compose.ui.graphics.Brush getIndicatorBrush();
    method public androidx.compose.ui.graphics.Color? getTrackColor();
    method public float getWeight();
    property public final androidx.compose.ui.graphics.Color? inProgressTrackColor;
    property public final androidx.compose.ui.graphics.Brush indicatorBrush;
    property public final androidx.compose.ui.graphics.Color? trackColor;
    property public final float weight;
  }

  public final class RepeatableClickableButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void RepeatableClickableButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, kotlin.jvm.functions.Function0<kotlin.Unit> onLongRepeatableClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit> onLongRepeatableClickEnd, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors, optional androidx.compose.foundation.interaction.MutableInteractionSource interactionSource, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material.ButtonBorder border, optional androidx.compose.foundation.Indication indication, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> content);
  }

  @com.google.android.horologist.annotations.ExperimentalHorologistApi public final class Section<T> {
    ctor public Section(com.google.android.horologist.composables.Section.State<? extends T> state, optional kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? headerContent, optional com.google.android.horologist.composables.Section.VisibleStates headerVisibleStates, optional kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? loadingContent, optional int loadingContentCount, optional kotlin.jvm.functions.Function2<? super com.google.android.horologist.composables.SectionContentScope,? super T,kotlin.Unit>? loadedContent, optional kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? failedContent, optional kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? emptyContent, optional kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? footerContent, optional com.google.android.horologist.composables.Section.VisibleStates footerVisibleStates);
    method public com.google.android.horologist.composables.Section.State<T> component1();
    method public com.google.android.horologist.composables.Section.VisibleStates component10();
    method public kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? component2();
    method public com.google.android.horologist.composables.Section.VisibleStates component3();
    method public kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? component4();
    method public int component5();
    method public kotlin.jvm.functions.Function2<com.google.android.horologist.composables.SectionContentScope,T,kotlin.Unit>? component6();
    method public kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? component7();
    method public kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? component8();
    method public kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? component9();
    method public com.google.android.horologist.composables.Section<T> copy(com.google.android.horologist.composables.Section.State<? extends T> state, kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? headerContent, com.google.android.horologist.composables.Section.VisibleStates headerVisibleStates, kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? loadingContent, int loadingContentCount, kotlin.jvm.functions.Function2<? super com.google.android.horologist.composables.SectionContentScope,? super T,kotlin.Unit>? loadedContent, kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? failedContent, kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? emptyContent, kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? footerContent, com.google.android.horologist.composables.Section.VisibleStates footerVisibleStates);
    method public kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? getEmptyContent();
    method public kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? getFailedContent();
    method public kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? getFooterContent();
    method public com.google.android.horologist.composables.Section.VisibleStates getFooterVisibleStates();
    method public kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? getHeaderContent();
    method public com.google.android.horologist.composables.Section.VisibleStates getHeaderVisibleStates();
    method public kotlin.jvm.functions.Function2<com.google.android.horologist.composables.SectionContentScope,T,kotlin.Unit>? getLoadedContent();
    method public kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? getLoadingContent();
    method public int getLoadingContentCount();
    method public com.google.android.horologist.composables.Section.State<T> getState();
    property public final kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? emptyContent;
    property public final kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? failedContent;
    property public final kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? footerContent;
    property public final com.google.android.horologist.composables.Section.VisibleStates footerVisibleStates;
    property public final kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? headerContent;
    property public final com.google.android.horologist.composables.Section.VisibleStates headerVisibleStates;
    property public final kotlin.jvm.functions.Function2<com.google.android.horologist.composables.SectionContentScope,T,kotlin.Unit>? loadedContent;
    property public final kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? loadingContent;
    property public final int loadingContentCount;
    property public final com.google.android.horologist.composables.Section.State<T> state;
    field public static final com.google.android.horologist.composables.Section.Companion Companion;
  }

  @com.google.android.horologist.annotations.ExperimentalHorologistApi public static final class Section.Companion {
    method public com.google.android.horologist.composables.Section.VisibleStates getALL_STATES();
    method public com.google.android.horologist.composables.Section.VisibleStates getLOADED_STATE_ONLY();
    method public com.google.android.horologist.composables.Section.VisibleStates getNO_STATES();
    property public final com.google.android.horologist.composables.Section.VisibleStates ALL_STATES;
    property public final com.google.android.horologist.composables.Section.VisibleStates LOADED_STATE_ONLY;
    property public final com.google.android.horologist.composables.Section.VisibleStates NO_STATES;
  }

  public abstract static sealed class Section.State<T> {
  }

  public static final class Section.State.Empty extends com.google.android.horologist.composables.Section.State {
    field public static final com.google.android.horologist.composables.Section.State.Empty INSTANCE;
  }

  public static final class Section.State.Failed extends com.google.android.horologist.composables.Section.State {
    field public static final com.google.android.horologist.composables.Section.State.Failed INSTANCE;
  }

  public static final class Section.State.Loaded<T> extends com.google.android.horologist.composables.Section.State<T> {
    ctor public Section.State.Loaded(java.util.List<? extends T> list);
    method public java.util.List<T> component1();
    method public com.google.android.horologist.composables.Section.State.Loaded<T> copy(java.util.List<? extends T> list);
    method public java.util.List<T> getList();
    property public final java.util.List<T> list;
  }

  public static final class Section.State.Loading extends com.google.android.horologist.composables.Section.State {
    field public static final com.google.android.horologist.composables.Section.State.Loading INSTANCE;
  }

  @com.google.android.horologist.annotations.ExperimentalHorologistApi public static final class Section.VisibleStates {
    ctor public Section.VisibleStates(boolean loading, boolean loaded, boolean failed, boolean empty);
    method public boolean component1();
    method public boolean component2();
    method public boolean component3();
    method public boolean component4();
    method public com.google.android.horologist.composables.Section.VisibleStates copy(boolean loading, boolean loaded, boolean failed, boolean empty);
    method public boolean getEmpty();
    method public boolean getFailed();
    method public boolean getLoaded();
    method public boolean getLoading();
    property public final boolean empty;
    property public final boolean failed;
    property public final boolean loaded;
    property public final boolean loading;
  }

  @com.google.android.horologist.annotations.ExperimentalHorologistApi public final class SectionContentScope {
    field public static final com.google.android.horologist.composables.SectionContentScope INSTANCE;
  }

  @com.google.android.horologist.annotations.ExperimentalHorologistApi public final class SectionScope<T> {
    ctor public SectionScope();
    method public void empty(kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit> content);
    method public void failed(kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit> content);
    method public void footer(optional com.google.android.horologist.composables.Section.VisibleStates visibleStates, kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit> content);
    method public void header(optional com.google.android.horologist.composables.Section.VisibleStates visibleStates, kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit> content);
    method public void loaded(kotlin.jvm.functions.Function2<? super com.google.android.horologist.composables.SectionContentScope,? super T,kotlin.Unit> content);
    method public void loading(optional int count, kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit> content);
  }

  public final class SectionedListKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void SectionedList(optional androidx.compose.ui.Modifier modifier, com.google.android.horologist.compose.layout.ScalingLazyColumnState columnState, optional java.util.List<? extends com.google.android.horologist.composables.Section<? extends java.lang.Object?>> sections);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void SectionedList(optional androidx.compose.ui.Modifier modifier, com.google.android.horologist.compose.layout.ScalingLazyColumnState columnState, kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionedListScope,kotlin.Unit> content);
  }

  public final class SectionedListPreviewKt {
    method @androidx.compose.runtime.Composable public static void FavouritesFooter();
    method @androidx.compose.runtime.Composable @androidx.wear.compose.ui.tooling.preview.WearPreviewDevices public static void SectionedListPreviewEmptySection();
    method @androidx.compose.runtime.Composable @androidx.wear.compose.ui.tooling.preview.WearPreviewDevices public static void SectionedListPreviewFailedSection();
    method @androidx.compose.runtime.Composable @androidx.wear.compose.ui.tooling.preview.WearPreviewDevices public static void SectionedListPreviewLoadedSection();
    method @androidx.compose.runtime.Composable @androidx.wear.compose.ui.tooling.preview.WearPreviewDevices public static void SectionedListPreviewLoadingSection();
  }

  @com.google.android.horologist.annotations.ExperimentalHorologistApi public final class SectionedListScope {
    ctor public SectionedListScope();
    method public <T> void section(com.google.android.horologist.composables.Section.State<? extends T> state, kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionScope<T>,kotlin.Unit> content);
    method public <T> void section(java.util.List<? extends T> list, kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionScope<T>,kotlin.Unit> content);
    method public void section(kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionScope<kotlin.Unit>,kotlin.Unit> content);
  }

  public final class SegmentedProgressIndicatorKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void SegmentedProgressIndicator(java.util.List<com.google.android.horologist.composables.ProgressIndicatorSegment> trackSegments, float progress, optional androidx.compose.ui.Modifier modifier, optional float startAngle, optional float endAngle, optional float strokeWidth, optional float paddingAngle, optional long trackColor);
  }

  public final class SquareSegmentedProgressIndicatorKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void SquareSegmentedProgressIndicator(optional androidx.compose.ui.Modifier modifier, float progress, optional float strokeWidth, optional long trackColor, optional float cornerRadiusDp, java.util.List<com.google.android.horologist.composables.ProgressIndicatorSegment> trackSegments, optional float paddingDp);
  }

  public final class SquareSegmentedProgressIndicatorPreviewKt {
    method @androidx.compose.runtime.Composable @androidx.wear.compose.ui.tooling.preview.WearPreviewSquare public static void PreviewHighCornerRadius();
    method @androidx.compose.runtime.Composable @androidx.wear.compose.ui.tooling.preview.WearPreviewSquare public static void PreviewProgressAnimation();
    method @androidx.compose.runtime.Composable @androidx.wear.compose.ui.tooling.preview.WearPreviewSquare public static void PreviewSquare();
    method @androidx.compose.runtime.Composable @androidx.wear.compose.ui.tooling.preview.WearPreviewSquare public static void PreviewSquareWithBrushAndColorsCombined();
    method @androidx.compose.runtime.Composable @androidx.wear.compose.ui.tooling.preview.WearPreviewSquare public static void PreviewSquareWithBrushColors();
    method public static java.util.List<com.google.android.horologist.composables.ProgressIndicatorSegment> getPreviewProgressSections();
    method public static java.util.List<com.google.android.horologist.composables.ProgressIndicatorSegment> getPreviewProgressSectionsBrush();
    method public static java.util.List<com.google.android.horologist.composables.ProgressIndicatorSegment> getPreviewProgressSectionsBrushAndColorCombined();
    property public static final java.util.List<com.google.android.horologist.composables.ProgressIndicatorSegment> previewProgressSections;
    property public static final java.util.List<com.google.android.horologist.composables.ProgressIndicatorSegment> previewProgressSectionsBrush;
    property public static final java.util.List<com.google.android.horologist.composables.ProgressIndicatorSegment> previewProgressSectionsBrushAndColorCombined;
  }

  public final class TimePicker12hPreviewKt {
    method @androidx.compose.runtime.Composable @androidx.wear.compose.ui.tooling.preview.WearPreviewDevices @androidx.wear.compose.ui.tooling.preview.WearPreviewFontScales public static void TimePicker12hPreview();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(device=androidx.wear.tooling.preview.devices.WearDevices.LARGE_ROUND, showSystemUi=true, backgroundColor=4278190080L, showBackground=true, group="Fonts - Small", fontScale=0.94f) public static void TimePicker12hPreviewLargeDeviceSmallFont();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(device=androidx.wear.tooling.preview.devices.WearDevices.SMALL_ROUND, showSystemUi=true, backgroundColor=4278190080L, showBackground=true, group="Fonts - Largest", fontScale=1.24f) public static void TimePicker12hPreviewSmallDeviceWithLargeFontBold();
  }

  public final class TimePickerKt {
    method @androidx.compose.runtime.Composable public static void TimePicker(kotlin.jvm.functions.Function1<? super java.time.LocalTime,kotlin.Unit> onTimeConfirm, optional androidx.compose.ui.Modifier modifier, optional java.time.LocalTime time, optional boolean showSeconds);
    method @androidx.compose.runtime.Composable public static void TimePickerWith12HourClock(kotlin.jvm.functions.Function1<? super java.time.LocalTime,kotlin.Unit> onTimeConfirm, optional androidx.compose.ui.Modifier modifier, optional java.time.LocalTime time);
  }

  public final class TimePickerPreviewKt {
    method @androidx.compose.runtime.Composable @androidx.wear.compose.ui.tooling.preview.WearPreviewDevices @androidx.wear.compose.ui.tooling.preview.WearPreviewFontScales public static void TimePickerPreview();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(device=androidx.wear.tooling.preview.devices.WearDevices.LARGE_ROUND, showSystemUi=true, backgroundColor=4278190080L, showBackground=true, group="Fonts - Small", fontScale=0.94f) public static void TimePickerPreviewLargeDeviceSmallFont();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(device=androidx.wear.tooling.preview.devices.WearDevices.SMALL_ROUND, showSystemUi=true, backgroundColor=4278190080L, showBackground=true, group="Fonts - Largest", fontScale=1.24f) public static void TimePickerPreviewSmallDeviceWithLargeFontBold();
  }

  public final class UnboundedRippleButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void UnboundedRippleButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional float rippleRadius, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors, optional androidx.compose.foundation.interaction.MutableInteractionSource interactionSource, optional androidx.compose.ui.graphics.Shape shape, optional androidx.wear.compose.material.ButtonBorder border, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> content);
  }

}

