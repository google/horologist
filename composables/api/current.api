// Signature format: 4.0
package com.google.android.horologist.composables {

  public final class DatePickerKt {
    method @androidx.compose.runtime.Composable public static void DatePicker(kotlin.jvm.functions.Function1<? super java.time.LocalDate,kotlin.Unit> onDateConfirm, optional androidx.compose.ui.Modifier modifier, optional java.time.LocalDate date);
  }

  @kotlin.RequiresOptIn(message="Horologist Composables is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalHorologistComposablesApi {
  }

  public final class MarqueeTextKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.composables.ExperimentalHorologistComposablesApi public static void MarqueeText(String text, optional androidx.compose.ui.Modifier modifier, optional long color, optional androidx.compose.ui.text.TextStyle style, optional int textAlign, optional float followGap, optional float edgeGradientWidth, optional float marqueeDpPerSecond, optional long pauseTime);
  }

  public final class PlaceholderChipKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.composables.ExperimentalHorologistComposablesApi public static void PlaceholderChip(optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.wear.compose.material.ChipColors colors, optional boolean enabled, optional String contentDescription);
  }

  public final class ProgressIndicatorSegment {
    ctor public ProgressIndicatorSegment(float weight, long indicatorColor, optional androidx.compose.ui.graphics.Color? trackColor, optional androidx.compose.ui.graphics.Color? inProgressTrackColor);
    method public float component1();
    method public long component2-0d7_KjU();
    method public androidx.compose.ui.graphics.Color? component3-QN2ZGVo();
    method public androidx.compose.ui.graphics.Color? component4-QN2ZGVo();
    method public com.google.android.horologist.composables.ProgressIndicatorSegment copy-9Q8ndQA(float weight, long indicatorColor, androidx.compose.ui.graphics.Color? trackColor, androidx.compose.ui.graphics.Color? inProgressTrackColor);
    method public androidx.compose.ui.graphics.Color? getInProgressTrackColor();
    method public long getIndicatorColor();
    method public androidx.compose.ui.graphics.Color? getTrackColor();
    method public float getWeight();
    property public final androidx.compose.ui.graphics.Color? inProgressTrackColor;
    property public final long indicatorColor;
    property public final androidx.compose.ui.graphics.Color? trackColor;
    property public final float weight;
  }

  public final class RememberPickerStateKt {
  }

  @com.google.android.horologist.composables.ExperimentalHorologistComposablesApi public final class Section<T> {
    ctor public Section(com.google.android.horologist.composables.Section.State<T> state, optional kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? headerContent, optional kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? loadingContent, optional int loadingContentCount, kotlin.jvm.functions.Function2<? super com.google.android.horologist.composables.SectionContentScope,? super T,kotlin.Unit> loadedContent, optional kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? failedContent, optional kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? emptyContent, optional kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? footerContent, optional boolean displayFooterOnlyOnLoadedState);
    method public com.google.android.horologist.composables.Section.State<T> component1();
    method public kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? component2();
    method public kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? component3();
    method public int component4();
    method public kotlin.jvm.functions.Function2<com.google.android.horologist.composables.SectionContentScope,T,kotlin.Unit> component5();
    method public kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? component6();
    method public kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? component7();
    method public kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? component8();
    method public boolean component9();
    method public com.google.android.horologist.composables.Section<T> copy(com.google.android.horologist.composables.Section.State<T> state, kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? headerContent, kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? loadingContent, int loadingContentCount, kotlin.jvm.functions.Function2<? super com.google.android.horologist.composables.SectionContentScope,? super T,kotlin.Unit> loadedContent, kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? failedContent, kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? emptyContent, kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? footerContent, boolean displayFooterOnlyOnLoadedState);
    method public boolean getDisplayFooterOnlyOnLoadedState();
    method public kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? getEmptyContent();
    method public kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? getFailedContent();
    method public kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? getFooterContent();
    method public kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? getHeaderContent();
    method public kotlin.jvm.functions.Function2<com.google.android.horologist.composables.SectionContentScope,T,kotlin.Unit> getLoadedContent();
    method public kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? getLoadingContent();
    method public int getLoadingContentCount();
    method public com.google.android.horologist.composables.Section.State<T> getState();
    property public final boolean displayFooterOnlyOnLoadedState;
    property public final kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? emptyContent;
    property public final kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? failedContent;
    property public final kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? footerContent;
    property public final kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? headerContent;
    property public final kotlin.jvm.functions.Function2<com.google.android.horologist.composables.SectionContentScope,T,kotlin.Unit> loadedContent;
    property public final kotlin.jvm.functions.Function1<com.google.android.horologist.composables.SectionContentScope,kotlin.Unit>? loadingContent;
    property public final int loadingContentCount;
    property public final com.google.android.horologist.composables.Section.State<T> state;
    field public static final int DEFAULT_LOADING_CONTENT_COUNT = 1; // 0x1
  }

  public abstract static sealed class Section.State<T> {
  }

  public static final class Section.State.Empty<T> extends com.google.android.horologist.composables.Section.State<T> {
    ctor public Section.State.Empty();
  }

  public static final class Section.State.Failed<T> extends com.google.android.horologist.composables.Section.State<T> {
    ctor public Section.State.Failed();
  }

  public static final class Section.State.Loaded<T> extends com.google.android.horologist.composables.Section.State<T> {
    ctor public Section.State.Loaded(java.util.List<? extends T> list);
    method public java.util.List<T> component1();
    method public com.google.android.horologist.composables.Section.State.Loaded<T> copy(java.util.List<? extends T> list);
    method public java.util.List<T> getList();
    property public final java.util.List<T> list;
  }

  public static final class Section.State.Loading<T> extends com.google.android.horologist.composables.Section.State<T> {
    ctor public Section.State.Loading();
  }

  @com.google.android.horologist.composables.ExperimentalHorologistComposablesApi public final class SectionContentScope {
    field public static final com.google.android.horologist.composables.SectionContentScope INSTANCE;
  }

  @com.google.android.horologist.composables.ExperimentalHorologistComposablesApi public final class SectionScope<T> {
    ctor public SectionScope();
    method public void empty(kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit> content);
    method public void failed(kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit> content);
    method public void footer(kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit> content);
    method public void header(kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit> content);
    method public void loaded(kotlin.jvm.functions.Function2<? super com.google.android.horologist.composables.SectionContentScope,? super T,kotlin.Unit> content);
    method public void loading(optional int count, kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit> content);
  }

  public final class SectionedListKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.composables.ExperimentalHorologistComposablesApi public static void SectionedList(androidx.compose.ui.focus.FocusRequester focusRequester, androidx.wear.compose.material.ScalingLazyListState scalingLazyListState, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material.ScalingParams scalingParams, optional androidx.wear.compose.material.AutoCenteringParams? autoCentering, kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionedListScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.composables.ExperimentalHorologistComposablesApi public static void SectionedList(androidx.compose.ui.focus.FocusRequester focusRequester, androidx.wear.compose.material.ScalingLazyListState scalingLazyListState, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material.ScalingParams scalingParams, optional androidx.wear.compose.material.AutoCenteringParams? autoCentering, optional java.util.List<? extends com.google.android.horologist.composables.Section<?>> sections);
  }

  @com.google.android.horologist.composables.ExperimentalHorologistComposablesApi public final class SectionedListScope {
    ctor public SectionedListScope();
    method public <T> void section(com.google.android.horologist.composables.Section.State<T> state, optional boolean displayFooterOnlyOnLoadedState, kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionScope<T>,kotlin.Unit> content);
    method public <T> void section(java.util.List<? extends T> list, kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionScope<T>,kotlin.Unit> content);
    method public void section(kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionScope<kotlin.Unit>,kotlin.Unit> content);
  }

  public final class SegmentedProgressIndicatorKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.composables.ExperimentalHorologistComposablesApi public static void SegmentedProgressIndicator(java.util.List<com.google.android.horologist.composables.ProgressIndicatorSegment> trackSegments, float progress, optional androidx.compose.ui.Modifier modifier, optional float startAngle, optional float endAngle, optional float strokeWidth, optional float paddingAngle, optional long trackColor);
  }

  public final class TimePickerKt {
    method @androidx.compose.runtime.Composable public static void TimePicker(kotlin.jvm.functions.Function1<? super java.time.LocalTime,kotlin.Unit> onTimeConfirm, optional androidx.compose.ui.Modifier modifier, optional java.time.LocalTime time, optional boolean showSeconds);
    method @androidx.compose.runtime.Composable public static void TimePickerWith12HourClock(kotlin.jvm.functions.Function1<? super java.time.LocalTime,kotlin.Unit> onTimeConfirm, optional androidx.compose.ui.Modifier modifier, optional java.time.LocalTime time);
  }

}

