// Signature format: 4.0
package com.google.android.horologist.compose.focus {

  public final class FocusNodeKt {
    method @androidx.compose.runtime.Composable public static void FocusControl(kotlin.jvm.functions.Function0<java.lang.Boolean> requiresFocus, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void OnFocusChange(kotlin.jvm.functions.Function2<? super kotlinx.coroutines.CoroutineScope,? super java.lang.Boolean,kotlin.Unit> onFocusChanged);
    method @androidx.compose.runtime.Composable public static void RequestFocusWhenActive(androidx.compose.ui.focus.FocusRequester focusRequester);
    method @androidx.compose.runtime.Composable public static androidx.compose.ui.focus.FocusRequester rememberActiveFocusRequester();
  }

}

package com.google.android.horologist.compose.layout {

  public final class BelowTimeTextPreviewKt {
    method @androidx.compose.runtime.Composable public static com.google.android.horologist.compose.layout.ScalingLazyColumnState belowTimeTextPreview();
  }

  public final class FadeAwayKt {
    method @Deprecated public static androidx.compose.ui.Modifier fadeAway(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function0<androidx.compose.foundation.ScrollState> scrollStateFn);
    method @Deprecated public static androidx.compose.ui.Modifier fadeAwayLazyList(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function0<androidx.compose.foundation.lazy.LazyListState> scrollStateFn);
    method @Deprecated public static androidx.compose.ui.Modifier fadeAwayScalingLazyList(androidx.compose.ui.Modifier, optional int initialIndex, optional int initialOffset, kotlin.jvm.functions.Function0<androidx.wear.compose.material.ScalingLazyListState> scrollStateFn);
  }

  public final class FillMaxRectangleKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier fillMaxRectangle(androidx.compose.ui.Modifier);
  }

  public final class ScalingLazyColumnDefaults {
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public com.google.android.horologist.compose.layout.ScalingLazyColumnState.Factory belowTimeText(optional com.google.android.horologist.compose.layout.ScalingLazyColumnState.RotaryMode rotaryMode, optional boolean firstItemIsFullWidth);
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public com.google.android.horologist.compose.layout.ScalingLazyColumnState.Factory scalingLazyColumnDefaults(optional com.google.android.horologist.compose.layout.ScalingLazyColumnState.RotaryMode rotaryMode, optional int initialCenterIndex, optional int initialCenterOffset);
    field public static final com.google.android.horologist.compose.layout.ScalingLazyColumnDefaults INSTANCE;
  }

  @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public final class ScalingLazyColumnState {
    ctor public ScalingLazyColumnState(optional com.google.android.horologist.compose.layout.ScalingLazyColumnState.ScrollPosition initialScrollPosition, optional androidx.wear.compose.material.AutoCenteringParams? autoCentering, optional int anchorType, optional androidx.compose.foundation.layout.PaddingValues contentPadding, optional com.google.android.horologist.compose.layout.ScalingLazyColumnState.RotaryMode rotaryMode, optional boolean reverseLayout, optional androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement, optional androidx.compose.ui.Alignment.Horizontal horizontalAlignment, optional androidx.compose.foundation.gestures.FlingBehavior? flingBehavior, optional boolean userScrollEnabled, optional androidx.wear.compose.material.ScalingParams scalingParams);
    method public int getAnchorType();
    method public androidx.wear.compose.material.AutoCenteringParams? getAutoCentering();
    method public androidx.compose.foundation.layout.PaddingValues getContentPadding();
    method public androidx.compose.foundation.gestures.FlingBehavior? getFlingBehavior();
    method public androidx.compose.ui.Alignment.Horizontal getHorizontalAlignment();
    method public com.google.android.horologist.compose.layout.ScalingLazyColumnState.ScrollPosition getInitialScrollPosition();
    method public boolean getReverseLayout();
    method public com.google.android.horologist.compose.layout.ScalingLazyColumnState.RotaryMode getRotaryMode();
    method public androidx.wear.compose.material.ScalingParams getScalingParams();
    method public androidx.wear.compose.material.ScalingLazyListState getState();
    method public boolean getUserScrollEnabled();
    method public androidx.compose.foundation.layout.Arrangement.Vertical getVerticalArrangement();
    method public void setState(androidx.wear.compose.material.ScalingLazyListState value);
    property public final int anchorType;
    property public final androidx.wear.compose.material.AutoCenteringParams? autoCentering;
    property public final androidx.compose.foundation.layout.PaddingValues contentPadding;
    property public final androidx.compose.foundation.gestures.FlingBehavior? flingBehavior;
    property public final androidx.compose.ui.Alignment.Horizontal horizontalAlignment;
    property public final com.google.android.horologist.compose.layout.ScalingLazyColumnState.ScrollPosition initialScrollPosition;
    property public final boolean reverseLayout;
    property public final com.google.android.horologist.compose.layout.ScalingLazyColumnState.RotaryMode rotaryMode;
    property public final androidx.wear.compose.material.ScalingParams scalingParams;
    property public final androidx.wear.compose.material.ScalingLazyListState state;
    property public final boolean userScrollEnabled;
    property public final androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement;
  }

  public static fun interface ScalingLazyColumnState.Factory {
    method @androidx.compose.runtime.Composable public com.google.android.horologist.compose.layout.ScalingLazyColumnState create();
  }

  public static sealed interface ScalingLazyColumnState.RotaryMode {
  }

  public static final class ScalingLazyColumnState.RotaryMode.Fling implements com.google.android.horologist.compose.layout.ScalingLazyColumnState.RotaryMode {
    field public static final com.google.android.horologist.compose.layout.ScalingLazyColumnState.RotaryMode.Fling INSTANCE;
  }

  public static final class ScalingLazyColumnState.RotaryMode.Scroll implements com.google.android.horologist.compose.layout.ScalingLazyColumnState.RotaryMode {
    field public static final com.google.android.horologist.compose.layout.ScalingLazyColumnState.RotaryMode.Scroll INSTANCE;
  }

  public static final class ScalingLazyColumnState.RotaryMode.Snap implements com.google.android.horologist.compose.layout.ScalingLazyColumnState.RotaryMode {
    field public static final com.google.android.horologist.compose.layout.ScalingLazyColumnState.RotaryMode.Snap INSTANCE;
  }

  public static final class ScalingLazyColumnState.ScrollPosition {
    ctor public ScalingLazyColumnState.ScrollPosition(int index, int offsetPx);
    method public int component1();
    method public int component2();
    method public com.google.android.horologist.compose.layout.ScalingLazyColumnState.ScrollPosition copy(int index, int offsetPx);
    method public int getIndex();
    method public int getOffsetPx();
    property public final int index;
    property public final int offsetPx;
  }

  public final class ScalingLazyColumnStateKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public static void ScalingLazyColumn(com.google.android.horologist.compose.layout.ScalingLazyColumnState columnState, optional androidx.compose.ui.Modifier modifier, kotlin.jvm.functions.Function1<? super androidx.wear.compose.material.ScalingLazyListScope,kotlin.Unit> content);
  }

  public final class ScrollAwayKt {
    method @Deprecated public static androidx.compose.ui.Modifier scrollAway(androidx.compose.ui.Modifier, androidx.compose.foundation.ScrollState scrollState, optional float offset);
    method @Deprecated public static androidx.compose.ui.Modifier scrollAway(androidx.compose.ui.Modifier, androidx.compose.foundation.lazy.LazyListState scrollState, optional int itemIndex, optional float offset);
    method @Deprecated public static androidx.compose.ui.Modifier scrollAway(androidx.compose.ui.Modifier, androidx.wear.compose.material.ScalingLazyListState scrollState, optional int itemIndex, optional float offset);
    method public static androidx.compose.ui.Modifier scrollAway(androidx.compose.ui.Modifier, com.google.android.horologist.compose.layout.ScalingLazyColumnState scalingLazyColumnState);
  }

  public final class StateUtils {
    method @Deprecated @androidx.compose.runtime.Composable public <T> androidx.compose.runtime.State<T> rememberStateWithLifecycle(kotlinx.coroutines.flow.StateFlow<? extends T> flow, optional androidx.lifecycle.Lifecycle lifecycle, optional androidx.lifecycle.Lifecycle.State minActiveState);
    field public static final com.google.android.horologist.compose.layout.StateUtils INSTANCE;
  }

}

package com.google.android.horologist.compose.navscaffold {

  @kotlin.RequiresOptIn(message="Horologist Compose Layout is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalHorologistComposeLayoutApi {
  }

  public class NavScaffoldViewModel extends androidx.lifecycle.ViewModel {
    ctor public NavScaffoldViewModel(androidx.lifecycle.SavedStateHandle savedStateHandle);
    method public final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.PositionIndicatorMode getPositionIndicatorMode();
    method public final androidx.compose.foundation.gestures.ScrollableState? getScrollableState();
    method public final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.TimeTextMode getTimeTextMode();
    method public final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.VignetteMode getVignettePosition();
    method public final void setPositionIndicatorMode(com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.PositionIndicatorMode positionIndicatorMode);
    method public final void setTimeTextMode(com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.TimeTextMode timeTextMode);
    method public final void setVignettePosition(com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.VignetteMode vignettePosition);
    property public final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.PositionIndicatorMode positionIndicatorMode;
    property public final androidx.compose.foundation.gestures.ScrollableState? scrollableState;
    property public final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.TimeTextMode timeTextMode;
    property public final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.VignetteMode vignettePosition;
  }

  public enum NavScaffoldViewModel.PositionIndicatorMode {
    enum_constant public static final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.PositionIndicatorMode Off;
    enum_constant public static final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.PositionIndicatorMode On;
  }

  public enum NavScaffoldViewModel.TimeTextMode {
    enum_constant public static final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.TimeTextMode Off;
    enum_constant public static final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.TimeTextMode On;
    enum_constant public static final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.TimeTextMode ScrollAway;
  }

  public static sealed interface NavScaffoldViewModel.VignetteMode {
  }

  public static final class NavScaffoldViewModel.VignetteMode.Off implements com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.VignetteMode {
    field public static final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.VignetteMode.Off INSTANCE;
  }

  public static final class NavScaffoldViewModel.VignetteMode.On implements com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.VignetteMode {
    ctor public NavScaffoldViewModel.VignetteMode.On(int position);
    method public int component1-GuQh5Jg();
    method public com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.VignetteMode.On copy-4KZ1An8(int position);
    method public int getPosition();
    property public final int position;
  }

  public static final class NavScaffoldViewModel.VignetteMode.WhenScrollable implements com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.VignetteMode {
    field public static final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.VignetteMode.WhenScrollable INSTANCE;
  }

  public final class NonScrollableScaffoldContext {
    ctor public NonScrollableScaffoldContext(androidx.navigation.NavBackStackEntry backStackEntry, com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel viewModel);
    method public androidx.navigation.NavBackStackEntry component1();
    method public com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel component2();
    method public com.google.android.horologist.compose.navscaffold.NonScrollableScaffoldContext copy(androidx.navigation.NavBackStackEntry backStackEntry, com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel viewModel);
    method public android.os.Bundle? getArguments();
    method public androidx.navigation.NavBackStackEntry getBackStackEntry();
    method public com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.PositionIndicatorMode getPositionIndicatorMode();
    method public com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.TimeTextMode getTimeTextMode();
    method public com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel getViewModel();
    method public void setPositionIndicatorMode(com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.PositionIndicatorMode positionIndicatorMode);
    method public void setTimeTextMode(com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.TimeTextMode timeTextMode);
    property public final android.os.Bundle? arguments;
    property public final androidx.navigation.NavBackStackEntry backStackEntry;
    property public final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.PositionIndicatorMode positionIndicatorMode;
    property public final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.TimeTextMode timeTextMode;
    property public final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel viewModel;
  }

  public final class ScaffoldContext<T extends androidx.compose.foundation.gestures.ScrollableState> {
    ctor public ScaffoldContext(androidx.navigation.NavBackStackEntry backStackEntry, T scrollableState, com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel viewModel);
    method public androidx.navigation.NavBackStackEntry component1();
    method public T component2();
    method public com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel component3();
    method public com.google.android.horologist.compose.navscaffold.ScaffoldContext<T> copy(androidx.navigation.NavBackStackEntry backStackEntry, T scrollableState, com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel viewModel);
    method public android.os.Bundle? getArguments();
    method public androidx.navigation.NavBackStackEntry getBackStackEntry();
    method public com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.PositionIndicatorMode getPositionIndicatorMode();
    method public T getScrollableState();
    method public com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.TimeTextMode getTimeTextMode();
    method public com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel getViewModel();
    method public void setPositionIndicatorMode(com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.PositionIndicatorMode positionIndicatorMode);
    method public void setTimeTextMode(com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.TimeTextMode timeTextMode);
    property public final android.os.Bundle? arguments;
    property public final androidx.navigation.NavBackStackEntry backStackEntry;
    property public final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.PositionIndicatorMode positionIndicatorMode;
    property public final T scrollableState;
    property public final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.TimeTextMode timeTextMode;
    property public final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel viewModel;
  }

  public final class ScrollableColumnKt {
    method @Deprecated public static androidx.compose.ui.Modifier scrollableColumn(androidx.compose.ui.Modifier, androidx.compose.ui.focus.FocusRequester focusRequester, androidx.compose.foundation.gestures.ScrollableState scrollableState);
  }

  public final class ScrollableScaffoldContext {
    ctor public ScrollableScaffoldContext(androidx.navigation.NavBackStackEntry backStackEntry, com.google.android.horologist.compose.layout.ScalingLazyColumnState columnState, com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel viewModel);
    method public androidx.navigation.NavBackStackEntry component1();
    method public com.google.android.horologist.compose.layout.ScalingLazyColumnState component2();
    method public com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel component3();
    method public com.google.android.horologist.compose.navscaffold.ScrollableScaffoldContext copy(androidx.navigation.NavBackStackEntry backStackEntry, com.google.android.horologist.compose.layout.ScalingLazyColumnState columnState, com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel viewModel);
    method public android.os.Bundle? getArguments();
    method public androidx.navigation.NavBackStackEntry getBackStackEntry();
    method public com.google.android.horologist.compose.layout.ScalingLazyColumnState getColumnState();
    method public com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.PositionIndicatorMode getPositionIndicatorMode();
    method public androidx.wear.compose.material.ScalingLazyListState getScrollableState();
    method public com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.TimeTextMode getTimeTextMode();
    method public com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel getViewModel();
    method public void setPositionIndicatorMode(com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.PositionIndicatorMode positionIndicatorMode);
    method public void setTimeTextMode(com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.TimeTextMode timeTextMode);
    property public final android.os.Bundle? arguments;
    property public final androidx.navigation.NavBackStackEntry backStackEntry;
    property public final com.google.android.horologist.compose.layout.ScalingLazyColumnState columnState;
    property public final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.PositionIndicatorMode positionIndicatorMode;
    property public final androidx.wear.compose.material.ScalingLazyListState scrollableState;
    property public final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.TimeTextMode timeTextMode;
    property public final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel viewModel;
  }

  public final class WearNavScaffoldKt {
    method @androidx.compose.runtime.Composable public static void WearNavScaffold(String startDestination, androidx.navigation.NavHostController navController, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit> snackbar, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.Modifier,kotlin.Unit> timeText, optional androidx.wear.compose.navigation.SwipeDismissableNavHostState state, kotlin.jvm.functions.Function1<? super androidx.navigation.NavGraphBuilder,kotlin.Unit> builder);
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public static void composable(androidx.navigation.NavGraphBuilder, String route, optional java.util.List<androidx.navigation.NamedNavArgument> arguments, optional java.util.List<androidx.navigation.NavDeepLink> deepLinks, kotlin.jvm.functions.Function1<? super com.google.android.horologist.compose.navscaffold.NonScrollableScaffoldContext,kotlin.Unit> content);
    method public static void lazyListComposable(androidx.navigation.NavGraphBuilder, String route, optional java.util.List<androidx.navigation.NamedNavArgument> arguments, optional java.util.List<androidx.navigation.NavDeepLink> deepLinks, optional kotlin.jvm.functions.Function0<androidx.compose.foundation.lazy.LazyListState> lazyListStateBuilder, kotlin.jvm.functions.Function1<? super com.google.android.horologist.compose.navscaffold.ScaffoldContext<androidx.compose.foundation.lazy.LazyListState>,kotlin.Unit> content);
    method @Deprecated public static void scalingLazyColumnComposable(androidx.navigation.NavGraphBuilder, String route, optional java.util.List<androidx.navigation.NamedNavArgument> arguments, optional java.util.List<androidx.navigation.NavDeepLink> deepLinks, kotlin.jvm.functions.Function0<androidx.wear.compose.material.ScalingLazyListState> scrollStateBuilder, kotlin.jvm.functions.Function1<? super com.google.android.horologist.compose.navscaffold.ScaffoldContext<androidx.wear.compose.material.ScalingLazyListState>,kotlin.Unit> content);
    method public static void scrollStateComposable(androidx.navigation.NavGraphBuilder, String route, optional java.util.List<androidx.navigation.NamedNavArgument> arguments, optional java.util.List<androidx.navigation.NavDeepLink> deepLinks, optional kotlin.jvm.functions.Function0<androidx.compose.foundation.ScrollState> scrollStateBuilder, kotlin.jvm.functions.Function1<? super com.google.android.horologist.compose.navscaffold.ScaffoldContext<androidx.compose.foundation.ScrollState>,kotlin.Unit> content);
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public static void scrollable(androidx.navigation.NavGraphBuilder, String route, optional java.util.List<androidx.navigation.NamedNavArgument> arguments, optional java.util.List<androidx.navigation.NavDeepLink> deepLinks, optional com.google.android.horologist.compose.layout.ScalingLazyColumnState.Factory columnStateFactory, kotlin.jvm.functions.Function1<? super com.google.android.horologist.compose.navscaffold.ScrollableScaffoldContext,kotlin.Unit> content);
    method @Deprecated public static void wearNavComposable(androidx.navigation.NavGraphBuilder, String route, optional java.util.List<androidx.navigation.NamedNavArgument> arguments, optional java.util.List<androidx.navigation.NavDeepLink> deepLinks, kotlin.jvm.functions.Function2<? super androidx.navigation.NavBackStackEntry,? super com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel,kotlin.Unit> content);
  }

}

package com.google.android.horologist.compose.pager {

  public final class PageScreenIndicatorState implements androidx.wear.compose.material.PageIndicatorState {
    ctor public PageScreenIndicatorState(com.google.accompanist.pager.PagerState state);
    method public int getPageCount();
    method public float getPageOffset();
    method public int getSelectedPage();
    property public int pageCount;
    property public float pageOffset;
    property public int selectedPage;
  }

  public final class PagerScreenKt {
    method @Deprecated @androidx.compose.runtime.Composable @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public static void FocusOnResume(androidx.compose.ui.focus.FocusRequester focusRequester);
    method @androidx.compose.runtime.Composable public static void PagerScreen(int count, optional androidx.compose.ui.Modifier modifier, optional com.google.accompanist.pager.PagerState state, kotlin.jvm.functions.Function2<? super com.google.accompanist.pager.PagerScope,? super java.lang.Integer,kotlin.Unit> content);
  }

}

package com.google.android.horologist.compose.paging {

  public final class ItemsKt {
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public static <T> void items(androidx.wear.compose.material.ScalingLazyListScope, androidx.paging.compose.LazyPagingItems<T> items, optional kotlin.jvm.functions.Function1<? super T,?>? key, kotlin.jvm.functions.Function2<? super androidx.wear.compose.material.ScalingLazyListItemScope,? super T,kotlin.Unit> itemContent);
  }

}

package com.google.android.horologist.compose.rotaryinput {

  public final class AccumulatedRotaryInputModifierKt {
    method public static androidx.compose.ui.Modifier onRotaryInputAccumulated(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function1<? super java.lang.Float,kotlin.Unit> onValueChange);
  }

  @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public final class AnimationScrollBehavior implements com.google.android.horologist.compose.rotaryinput.RotaryScrollBehavior {
    ctor public AnimationScrollBehavior(androidx.compose.foundation.gestures.ScrollableState scrollableState);
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public suspend Object? handleEvent(float targetValue, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
  }

  @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public final class DefaultRotaryFlingBehavior implements com.google.android.horologist.compose.rotaryinput.RotaryFlingBehavior {
    ctor public DefaultRotaryFlingBehavior(androidx.compose.foundation.gestures.ScrollableState scrollableState, androidx.compose.foundation.gestures.FlingBehavior flingBehavior, android.view.ViewConfiguration viewConfiguration, long flingTimeframe);
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public void observeEvent(long timestamp, float delta);
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public void startFlingTracking(long timestamp);
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public suspend Object? trackFling(kotlin.jvm.functions.Function0<kotlin.Unit> beforeFling, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
  }

  @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public final class DefaultRotaryHapticFeedback implements com.google.android.horologist.compose.rotaryinput.RotaryHapticFeedback {
    ctor public DefaultRotaryHapticFeedback(android.view.View view);
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public void performHapticFeedback(int type);
    field public static final com.google.android.horologist.compose.rotaryinput.DefaultRotaryHapticFeedback.Companion Companion;
    field public static final int ROTARY_SCROLL_ITEM_FOCUS = 19; // 0x13
    field public static final int ROTARY_SCROLL_LIMIT = 20; // 0x14
    field public static final int ROTARY_SCROLL_TICK = 18; // 0x12
  }

  public static final class DefaultRotaryHapticFeedback.Companion {
  }

  @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public final class DefaultSnapBehavior implements com.google.android.horologist.compose.rotaryinput.RotarySnapBehavior {
    ctor public DefaultSnapBehavior(com.google.android.horologist.compose.rotaryinput.RotaryScrollAdapter rotaryScrollAdapter, com.google.android.horologist.compose.rotaryinput.SnapParameters snapParameters);
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public void prepareSnapForItems(int moveForElements, boolean sequentialSnap);
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public float snapThreshold(boolean duringSnap);
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public suspend Object? startSnappingSession(boolean toClosestItem, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
  }

  public final class GenericMotionRotaryInputAccumulator {
    ctor public GenericMotionRotaryInputAccumulator(android.content.Context context, kotlin.jvm.functions.Function1<? super java.lang.Float,kotlin.Unit> onValueChange);
    method public boolean onGenericMotionEvent(android.view.MotionEvent event);
  }

  public final class HapticsKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public static com.google.android.horologist.compose.rotaryinput.RotaryHapticFeedback rememberDefaultRotaryHapticFeedback();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public static com.google.android.horologist.compose.rotaryinput.RotaryHapticFeedback rememberDisabledHaptic();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public static com.google.android.horologist.compose.rotaryinput.RotaryHapticFeedback rememberRotaryHapticFeedback(optional long throttleThresholdMs, optional kotlinx.coroutines.channels.Channel<com.google.android.horologist.compose.rotaryinput.RotaryHapticsType> hapticsChannel, optional com.google.android.horologist.compose.rotaryinput.RotaryHapticFeedback rotaryHaptics);
  }

  @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public final class RotaryDefaults {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public com.google.android.horologist.compose.rotaryinput.RotaryScrollHandler rememberFlingHandler(androidx.compose.foundation.gestures.ScrollableState scrollableState, optional androidx.compose.foundation.gestures.FlingBehavior? flingBehavior, optional boolean isLowRes);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public com.google.android.horologist.compose.rotaryinput.RotaryScrollHandler rememberSnapHandler(com.google.android.horologist.compose.rotaryinput.RotaryScrollAdapter rotaryScrollAdapter, optional com.google.android.horologist.compose.rotaryinput.SnapParameters snapParameters);
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public com.google.android.horologist.compose.rotaryinput.SnapParameters snapParametersDefault();
    field public static final com.google.android.horologist.compose.rotaryinput.RotaryDefaults INSTANCE;
  }

  @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public interface RotaryFlingBehavior {
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public void observeEvent(long timestamp, float delta);
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public void startFlingTracking(long timestamp);
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public suspend Object? trackFling(kotlin.jvm.functions.Function0<kotlin.Unit> beforeFling, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
  }

  @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public interface RotaryHapticFeedback {
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public void performHapticFeedback(int type);
  }

  @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi @kotlin.jvm.JvmInline public final value class RotaryHapticsType {
    ctor public RotaryHapticsType(int type);
    field public static final com.google.android.horologist.compose.rotaryinput.RotaryHapticsType.Companion Companion;
  }

  public static final class RotaryHapticsType.Companion {
    method public int getScrollItemFocus();
    method public int getScrollLimit();
    method public int getScrollTick();
    property public final int ScrollItemFocus;
    property public final int ScrollLimit;
    property public final int ScrollTick;
  }

  public final class RotaryKt {
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public static kotlinx.coroutines.flow.Flow<com.google.android.horologist.compose.rotaryinput.TimestampedDelta> batchRequestsWithinTimeframe(kotlinx.coroutines.flow.Flow<com.google.android.horologist.compose.rotaryinput.TimestampedDelta>, long timeframe);
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public static androidx.compose.ui.Modifier rotaryHandler(androidx.compose.ui.Modifier, com.google.android.horologist.compose.rotaryinput.RotaryScrollHandler rotaryScrollHandler, optional long batchTimeframe, com.google.android.horologist.compose.rotaryinput.RotaryHapticFeedback rotaryHaptics);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public static androidx.compose.ui.Modifier rotaryWithFling(androidx.compose.ui.Modifier, androidx.compose.ui.focus.FocusRequester focusRequester, androidx.compose.foundation.gestures.ScrollableState scrollableState, optional androidx.compose.foundation.gestures.FlingBehavior flingBehavior, optional com.google.android.horologist.compose.rotaryinput.RotaryHapticFeedback rotaryHaptics);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public static androidx.compose.ui.Modifier rotaryWithScroll(androidx.compose.ui.Modifier, androidx.compose.ui.focus.FocusRequester focusRequester, androidx.compose.foundation.gestures.ScrollableState scrollableState, optional com.google.android.horologist.compose.rotaryinput.RotaryHapticFeedback rotaryHaptics);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public static androidx.compose.ui.Modifier rotaryWithSnap(androidx.compose.ui.Modifier, androidx.compose.ui.focus.FocusRequester focusRequester, com.google.android.horologist.compose.rotaryinput.RotaryScrollAdapter rotaryScrollAdapter, optional com.google.android.horologist.compose.rotaryinput.RotaryHapticFeedback rotaryHaptics);
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public static com.google.android.horologist.compose.rotaryinput.RotaryScrollAdapter toRotaryScrollAdapter(androidx.wear.compose.material.ScalingLazyListState);
  }

  @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public interface RotaryScrollAdapter {
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public float averageItemSize();
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public int currentItemIndex();
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public float currentItemOffset();
    method public androidx.compose.foundation.gestures.ScrollableState getScrollableState();
    property public abstract androidx.compose.foundation.gestures.ScrollableState scrollableState;
  }

  @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public interface RotaryScrollBehavior {
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public suspend Object? handleEvent(float targetValue, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
  }

  @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public interface RotaryScrollHandler {
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public suspend Object? handleScrollEvent(kotlinx.coroutines.CoroutineScope coroutineScope, com.google.android.horologist.compose.rotaryinput.TimestampedDelta event, com.google.android.horologist.compose.rotaryinput.RotaryHapticFeedback rotaryHaptics, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
  }

  @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public interface RotarySnapBehavior {
    method public void prepareSnapForItems(int moveForElements, boolean sequentialSnap);
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public float snapThreshold(boolean duringSnap);
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public suspend Object? startSnappingSession(boolean toClosestItem, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
  }

  public final class RotaryVelocityTracker {
    ctor public RotaryVelocityTracker();
    method public void end();
    method public float getVelocity();
    method public void move(long currentTime, float delta);
    method public void start(long currentTime);
    property public final float velocity;
  }

  @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public final class ScalingLazyColumnRotaryScrollAdapter implements com.google.android.horologist.compose.rotaryinput.RotaryScrollAdapter {
    ctor public ScalingLazyColumnRotaryScrollAdapter(androidx.wear.compose.material.ScalingLazyListState scrollableState);
    method public float averageItemSize();
    method public int currentItemIndex();
    method public float currentItemOffset();
    method public androidx.wear.compose.material.ScalingLazyListState getScrollableState();
    property public androidx.wear.compose.material.ScalingLazyListState scrollableState;
  }

  public final class SnapParameters {
    ctor public SnapParameters(int snapOffset);
    method public int getSnapOffset();
    method @androidx.compose.runtime.Composable public float snapOffsetDp();
    property public final int snapOffset;
  }

  @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public final class TimestampedDelta {
    ctor public TimestampedDelta(long timestamp, float delta);
    method public long component1();
    method public float component2();
    method public com.google.android.horologist.compose.rotaryinput.TimestampedDelta copy(long timestamp, float delta);
    method public float getDelta();
    method public long getTimestamp();
    property public final float delta;
    property public final long timestamp;
  }

}

package com.google.android.horologist.compose.snackbar {

  public final class DialogSnackbarHostKt {
    method @androidx.compose.runtime.Composable public static void DialogSnackbarHost(com.google.android.horologist.compose.snackbar.SnackbarHostState hostState, optional androidx.compose.ui.Modifier modifier);
  }

  public interface SnackbarData {
    method public void dismiss();
    method public String? getActionLabel();
    method public com.google.android.horologist.compose.snackbar.SnackbarDuration getDuration();
    method public String getMessage();
    method public void performAction();
    property public abstract String? actionLabel;
    property public abstract com.google.android.horologist.compose.snackbar.SnackbarDuration duration;
    property public abstract String message;
  }

  public enum SnackbarDuration {
    enum_constant public static final com.google.android.horologist.compose.snackbar.SnackbarDuration Indefinite;
    enum_constant public static final com.google.android.horologist.compose.snackbar.SnackbarDuration Long;
    enum_constant public static final com.google.android.horologist.compose.snackbar.SnackbarDuration Short;
  }

  @androidx.compose.runtime.Stable public final class SnackbarHostState {
    ctor public SnackbarHostState();
    method public com.google.android.horologist.compose.snackbar.SnackbarData? getCurrentSnackbarData();
    method public suspend Object? showSnackbar(String message, optional String? actionLabel, optional com.google.android.horologist.compose.snackbar.SnackbarDuration duration, optional kotlin.coroutines.Continuation<? super com.google.android.horologist.compose.snackbar.SnackbarResult> p);
    property public final com.google.android.horologist.compose.snackbar.SnackbarData? currentSnackbarData;
  }

  public final class SnackbarHostStateKt {
    method @androidx.compose.runtime.Composable public static void SnackbarHost(com.google.android.horologist.compose.snackbar.SnackbarHostState hostState, optional androidx.compose.ui.Modifier modifier, kotlin.jvm.functions.Function1<? super com.google.android.horologist.compose.snackbar.SnackbarData,kotlin.Unit> snackbar);
  }

  public enum SnackbarResult {
    enum_constant public static final com.google.android.horologist.compose.snackbar.SnackbarResult ActionPerformed;
    enum_constant public static final com.google.android.horologist.compose.snackbar.SnackbarResult Dismissed;
  }

}

