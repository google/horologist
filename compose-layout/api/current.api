// Signature format: 4.0
package com.google.android.horologist.compose.layout {

  public final class FadeAwayKt {
    method public static androidx.compose.ui.Modifier fadeAway(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function0<androidx.compose.foundation.ScrollState> scrollStateFn);
    method public static androidx.compose.ui.Modifier fadeAwayLazyList(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function0<androidx.compose.foundation.lazy.LazyListState> scrollStateFn);
    method public static androidx.compose.ui.Modifier fadeAwayScalingLazyList(androidx.compose.ui.Modifier, optional int initialIndex, optional int initialOffset, kotlin.jvm.functions.Function0<androidx.wear.compose.material.ScalingLazyListState> scrollStateFn);
  }

  public final class FillMaxRectangleKt {
    method @androidx.compose.runtime.Stable public static androidx.compose.ui.Modifier fillMaxRectangle(androidx.compose.ui.Modifier);
  }

  public final class StateUtils {
    method @androidx.compose.runtime.Composable public <T> androidx.compose.runtime.State<T> rememberStateWithLifecycle(kotlinx.coroutines.flow.StateFlow<? extends T> flow, optional androidx.lifecycle.Lifecycle lifecycle, optional androidx.lifecycle.Lifecycle.State minActiveState);
    field public static final com.google.android.horologist.compose.layout.StateUtils INSTANCE;
  }

}

package com.google.android.horologist.compose.navscaffold {

  @kotlin.RequiresOptIn(message="Horologist Compose Layout is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public @interface ExperimentalHorologistComposeLayoutApi {
  }

  public class NavScaffoldViewModel extends androidx.lifecycle.ViewModel {
    ctor public NavScaffoldViewModel(androidx.lifecycle.SavedStateHandle savedStateHandle);
    method public final androidx.compose.ui.focus.FocusRequester getFocusRequester();
    method public final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.PositionIndicatorMode getPositionIndicatorMode();
    method public final androidx.compose.foundation.gestures.ScrollableState? getScrollableState();
    method public final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.TimeTextMode getTimeTextMode();
    method public final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.VignetteMode getVignettePosition();
    method public final void resumed();
    method public final void setPositionIndicatorMode(com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.PositionIndicatorMode positionIndicatorMode);
    method public final void setTimeTextMode(com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.TimeTextMode timeTextMode);
    method public final void setVignettePosition(com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.VignetteMode vignettePosition);
    property public final androidx.compose.ui.focus.FocusRequester focusRequester;
    property public final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.PositionIndicatorMode positionIndicatorMode;
    property public final androidx.compose.foundation.gestures.ScrollableState? scrollableState;
    property public final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.TimeTextMode timeTextMode;
    property public final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.VignetteMode vignettePosition;
  }

  public enum NavScaffoldViewModel.PositionIndicatorMode {
    enum_constant public static final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.PositionIndicatorMode Off;
    enum_constant public static final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.PositionIndicatorMode On;
  }

  public enum NavScaffoldViewModel.TimeTextMode {
    enum_constant public static final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.TimeTextMode FadeAway;
    enum_constant public static final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.TimeTextMode Off;
    enum_constant public static final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.TimeTextMode On;
  }

  public static sealed interface NavScaffoldViewModel.VignetteMode {
  }

  public static final class NavScaffoldViewModel.VignetteMode.Off implements com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.VignetteMode {
    field public static final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.VignetteMode.Off INSTANCE;
  }

  public static final class NavScaffoldViewModel.VignetteMode.On implements com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.VignetteMode {
    ctor public NavScaffoldViewModel.VignetteMode.On(int position);
    method public int component1-GuQh5Jg();
    method public com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.VignetteMode.On copy-4KZ1An8(int position);
    method public int getPosition();
    property public final int position;
  }

  public static final class NavScaffoldViewModel.VignetteMode.WhenScrollable implements com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.VignetteMode {
    field public static final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel.VignetteMode.WhenScrollable INSTANCE;
  }

  public final class ScaffoldContext<T extends androidx.compose.foundation.gestures.ScrollableState> {
    ctor public ScaffoldContext(androidx.navigation.NavBackStackEntry backStackEntry, T scrollableState, com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel viewModel);
    method public androidx.navigation.NavBackStackEntry component1();
    method public T component2();
    method public com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel component3();
    method public com.google.android.horologist.compose.navscaffold.ScaffoldContext<T> copy(androidx.navigation.NavBackStackEntry backStackEntry, T scrollableState, com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel viewModel);
    method public androidx.navigation.NavBackStackEntry getBackStackEntry();
    method public T getScrollableState();
    method public com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel getViewModel();
    property public final androidx.navigation.NavBackStackEntry backStackEntry;
    property public final T scrollableState;
    property public final com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel viewModel;
  }

  public final class ScrollableColumnKt {
    method public static androidx.compose.ui.Modifier scrollableColumn(androidx.compose.ui.Modifier, androidx.compose.ui.focus.FocusRequester focusRequester, androidx.compose.foundation.gestures.ScrollableState scrollableState);
  }

  public final class WearNavScaffoldKt {
    method @androidx.compose.runtime.Composable public static void WearNavScaffold(String startDestination, optional androidx.compose.ui.Modifier modifier, androidx.navigation.NavHostController navController, optional kotlin.jvm.functions.Function0<kotlin.Unit> snackbar, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.Modifier,kotlin.Unit> timeText, optional androidx.wear.compose.navigation.SwipeDismissableNavHostState state, kotlin.jvm.functions.Function1<? super androidx.navigation.NavGraphBuilder,kotlin.Unit> builder);
    method public static void lazyListComposable(androidx.navigation.NavGraphBuilder, String route, optional java.util.List<androidx.navigation.NamedNavArgument> arguments, optional java.util.List<androidx.navigation.NavDeepLink> deepLinks, kotlin.jvm.functions.Function0<androidx.compose.foundation.lazy.LazyListState> lazyListStateBuilder, kotlin.jvm.functions.Function1<? super com.google.android.horologist.compose.navscaffold.ScaffoldContext<androidx.compose.foundation.lazy.LazyListState>,kotlin.Unit> content);
    method public static void scalingLazyColumnComposable(androidx.navigation.NavGraphBuilder, String route, optional java.util.List<androidx.navigation.NamedNavArgument> arguments, optional java.util.List<androidx.navigation.NavDeepLink> deepLinks, kotlin.jvm.functions.Function0<androidx.wear.compose.material.ScalingLazyListState> scrollStateBuilder, kotlin.jvm.functions.Function1<? super com.google.android.horologist.compose.navscaffold.ScaffoldContext<androidx.wear.compose.material.ScalingLazyListState>,kotlin.Unit> content);
    method public static void scrollStateComposable(androidx.navigation.NavGraphBuilder, String route, optional java.util.List<androidx.navigation.NamedNavArgument> arguments, optional java.util.List<androidx.navigation.NavDeepLink> deepLinks, kotlin.jvm.functions.Function0<androidx.compose.foundation.ScrollState> scrollStateBuilder, kotlin.jvm.functions.Function1<? super com.google.android.horologist.compose.navscaffold.ScaffoldContext<androidx.compose.foundation.ScrollState>,kotlin.Unit> content);
    method public static void wearNavComposable(androidx.navigation.NavGraphBuilder, String route, optional java.util.List<androidx.navigation.NamedNavArgument> arguments, optional java.util.List<androidx.navigation.NavDeepLink> deepLinks, kotlin.jvm.functions.Function2<? super androidx.navigation.NavBackStackEntry,? super com.google.android.horologist.compose.navscaffold.NavScaffoldViewModel,kotlin.Unit> content);
  }

}

package com.google.android.horologist.compose.navscaffold.util {

  public final class SavedStateHandleUtilKt {
  }

}

package com.google.android.horologist.compose.pager {

  public final class PageScreenIndicatorState implements androidx.wear.compose.material.PageIndicatorState {
    ctor public PageScreenIndicatorState(com.google.accompanist.pager.PagerState state);
    method public int getPageCount();
    method public float getPageOffset();
    method public int getSelectedPage();
    property public int pageCount;
    property public float pageOffset;
    property public int selectedPage;
  }

  public final class PagerScreenKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public static void FocusOnResume(androidx.compose.ui.focus.FocusRequester focusRequester);
    method @androidx.compose.runtime.Composable public static void PagerScreen(int count, optional androidx.compose.ui.Modifier modifier, optional com.google.accompanist.pager.PagerState state, kotlin.jvm.functions.Function2<? super com.google.accompanist.pager.PagerScope,? super java.lang.Integer,kotlin.Unit> content);
  }

}

package com.google.android.horologist.compose.snackbar {

  public final class DialogSnackbarHostKt {
    method @androidx.compose.runtime.Composable public static void DialogSnackbarHost(com.google.android.horologist.compose.snackbar.SnackbarHostState hostState, optional androidx.compose.ui.Modifier modifier);
  }

  public interface SnackbarData {
    method public void dismiss();
    method public String? getActionLabel();
    method public com.google.android.horologist.compose.snackbar.SnackbarDuration getDuration();
    method public String getMessage();
    method public void performAction();
    property public abstract String? actionLabel;
    property public abstract com.google.android.horologist.compose.snackbar.SnackbarDuration duration;
    property public abstract String message;
  }

  public enum SnackbarDuration {
    enum_constant public static final com.google.android.horologist.compose.snackbar.SnackbarDuration Indefinite;
    enum_constant public static final com.google.android.horologist.compose.snackbar.SnackbarDuration Long;
    enum_constant public static final com.google.android.horologist.compose.snackbar.SnackbarDuration Short;
  }

  @androidx.compose.runtime.Stable public final class SnackbarHostState {
    ctor public SnackbarHostState();
    method public com.google.android.horologist.compose.snackbar.SnackbarData? getCurrentSnackbarData();
    method public suspend Object? showSnackbar(String message, optional String? actionLabel, optional com.google.android.horologist.compose.snackbar.SnackbarDuration duration, optional kotlin.coroutines.Continuation<? super com.google.android.horologist.compose.snackbar.SnackbarResult> p);
    property public final com.google.android.horologist.compose.snackbar.SnackbarData? currentSnackbarData;
  }

  public final class SnackbarHostStateKt {
    method @androidx.compose.runtime.Composable public static void SnackbarHost(com.google.android.horologist.compose.snackbar.SnackbarHostState hostState, optional androidx.compose.ui.Modifier modifier, kotlin.jvm.functions.Function1<? super com.google.android.horologist.compose.snackbar.SnackbarData,kotlin.Unit> snackbar);
  }

  public enum SnackbarResult {
    enum_constant public static final com.google.android.horologist.compose.snackbar.SnackbarResult ActionPerformed;
    enum_constant public static final com.google.android.horologist.compose.snackbar.SnackbarResult Dismissed;
  }

}

