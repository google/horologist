// Signature format: 4.0
package com.google.android.horologist.compose.material {

  public final class ChipIconWithProgressKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void ChipIconWithProgress(optional androidx.compose.ui.Modifier modifier, optional Object? icon, optional boolean largeIcon, optional androidx.compose.ui.graphics.painter.Painter? placeholder, optional long progressIndicatorColor, optional long progressTrackColor);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void ChipIconWithProgress(float progress, optional androidx.compose.ui.Modifier modifier, optional Object? icon, optional boolean largeIcon, optional androidx.compose.ui.graphics.painter.Painter? placeholder, optional long progressIndicatorColor, optional long progressTrackColor);
  }

  public final class IconKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void Icon(androidx.compose.ui.graphics.vector.ImageVector imageVector, String? contentDescription, optional androidx.compose.ui.Modifier modifier, optional long tint, optional com.google.android.horologist.compose.material.IconRtlMode rtlMode);
  }

  @com.google.android.horologist.annotations.ExperimentalHorologistApi public enum IconRtlMode {
    method public static com.google.android.horologist.compose.material.IconRtlMode valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static com.google.android.horologist.compose.material.IconRtlMode[] values();
    enum_constant public static final com.google.android.horologist.compose.material.IconRtlMode Default;
    enum_constant public static final com.google.android.horologist.compose.material.IconRtlMode Mirrored;
  }

  public final class SplitToggleChipKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void SplitToggleChip(boolean checked, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onCheckedChanged, String label, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, com.google.android.horologist.compose.material.ToggleChipToggleControl toggleControl, optional androidx.compose.ui.Modifier modifier, optional String? secondaryLabel, optional androidx.wear.compose.material.SplitToggleChipColors colors, optional boolean enabled, optional androidx.compose.foundation.interaction.MutableInteractionSource checkedInteractionSource, optional androidx.compose.foundation.interaction.MutableInteractionSource clickInteractionSource);
  }

  public final class TitleKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void Title(@StringRes int textId, optional androidx.compose.ui.Modifier modifier);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void Title(String text, optional androidx.compose.ui.Modifier modifier);
  }

  public final class ToggleChipKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static void ToggleChip(boolean checked, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onCheckedChanged, String label, com.google.android.horologist.compose.material.ToggleChipToggleControl toggleControl, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.graphics.vector.ImageVector? icon, optional com.google.android.horologist.compose.material.IconRtlMode iconRtlMode, optional String? secondaryLabel, optional androidx.wear.compose.material.ToggleChipColors colors, optional boolean enabled, optional androidx.compose.foundation.interaction.MutableInteractionSource interactionSource);
  }

  @com.google.android.horologist.annotations.ExperimentalHorologistApi public enum ToggleChipToggleControl {
    method public static com.google.android.horologist.compose.material.ToggleChipToggleControl valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static com.google.android.horologist.compose.material.ToggleChipToggleControl[] values();
    enum_constant public static final com.google.android.horologist.compose.material.ToggleChipToggleControl Checkbox;
    enum_constant public static final com.google.android.horologist.compose.material.ToggleChipToggleControl Radio;
    enum_constant public static final com.google.android.horologist.compose.material.ToggleChipToggleControl Switch;
  }

}

package com.google.android.horologist.compose.material.util {

  public final class A11yKt {
    method public static String? getDECORATIVE_ELEMENT_CONTENT_DESCRIPTION();
    property public static final String? DECORATIVE_ELEMENT_CONTENT_DESCRIPTION;
  }

  public final class AdjustChipHeightToFontScaleKt {
    method @com.google.android.horologist.annotations.ExperimentalHorologistApi public static androidx.compose.ui.Modifier adjustChipHeightToFontScale(androidx.compose.ui.Modifier, float fontScale, optional float padding);
  }

}

