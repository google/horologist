// Signature format: 4.0
package com.google.android.horologist.compose.tools {

  @kotlin.RequiresOptIn(message="Horologist Compose Tools is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalHorologistComposeToolsApi {
  }

  public final class InteractivePreviewAwareKt {
    method @androidx.compose.runtime.Composable public static void InteractivePreviewAware(kotlin.jvm.functions.Function0<kotlin.Unit> block);
    method public static androidx.compose.runtime.ProvidableCompositionLocal<java.lang.Boolean> getLocalInteractivePreview();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<java.lang.Boolean> getLocalStaticPreview();
    property public static final androidx.compose.runtime.ProvidableCompositionLocal<java.lang.Boolean> LocalInteractivePreview;
    property public static final androidx.compose.runtime.ProvidableCompositionLocal<java.lang.Boolean> LocalStaticPreview;
  }

  public final class RoundPreviewKt {
    method @androidx.compose.runtime.Composable public static void RoundPreview(optional boolean round, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  public final class ThemeValues {
    ctor public ThemeValues(String name, int index, androidx.wear.compose.material.Colors colors);
    method public String component1();
    method public int component2();
    method public androidx.wear.compose.material.Colors component3();
    method public com.google.android.horologist.compose.tools.ThemeValues copy(String name, int index, androidx.wear.compose.material.Colors colors);
    method public androidx.wear.compose.material.Colors getColors();
    method public int getIndex();
    method public String getName();
    method public String getSafeName();
    property public final androidx.wear.compose.material.Colors colors;
    property public final int index;
    property public final String name;
    property public final String safeName;
  }

  public final class ThemeValuesKt {
    method public static java.util.List<com.google.android.horologist.compose.tools.ThemeValues> getThemeValues();
    property public static final java.util.List<com.google.android.horologist.compose.tools.ThemeValues> themeValues;
  }

  public final class TilePreviewKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.ExperimentalHorologistComposeToolsApi public static void LayoutElementPreview(androidx.wear.tiles.LayoutElementBuilders.LayoutElement element, optional @ColorInt int windowBackgroundColor, optional kotlin.jvm.functions.Function1<? super androidx.wear.tiles.ResourceBuilders.Resources.Builder,kotlin.Unit> tileResourcesFn);
    method @androidx.compose.runtime.Composable public static void LayoutRootPreview(androidx.wear.tiles.LayoutElementBuilders.LayoutElement root, optional kotlin.jvm.functions.Function1<? super androidx.wear.tiles.ResourceBuilders.Resources.Builder,kotlin.Unit> tileResourcesFn);
    method @androidx.compose.runtime.Composable public static <T, R> void TileLayoutPreview(T? state, R? resourceState, com.google.android.horologist.tiles.render.TileLayoutRenderer<T,R> renderer);
    method @androidx.compose.runtime.Composable public static void TilePreview(androidx.wear.tiles.TileBuilders.Tile tile, androidx.wear.tiles.ResourceBuilders.Resources tileResources);
    method public static androidx.wear.tiles.DeviceParametersBuilders.DeviceParameters buildDeviceParameters(android.content.res.Resources resources);
  }

  @androidx.compose.ui.tooling.preview.Preview(device=androidx.compose.ui.tooling.preview.Devices.WEAR_OS_LARGE_ROUND, showSystemUi=true, backgroundColor=4278190080L, showBackground=true, group="Devices - Large Round") public @interface WearLargeRoundDevicePreview {
  }

  @androidx.compose.ui.tooling.preview.Preview(backgroundColor=4278190080L, showBackground=true) public @interface WearPreview {
  }

  @androidx.compose.ui.tooling.preview.Preview(device=androidx.compose.ui.tooling.preview.Devices.WEAR_OS_LARGE_ROUND, showSystemUi=true, backgroundColor=4278190080L, showBackground=true, group="Devices - Large Round") @androidx.compose.ui.tooling.preview.Preview(device=androidx.compose.ui.tooling.preview.Devices.WEAR_OS_SMALL_ROUND, showSystemUi=true, backgroundColor=4278190080L, showBackground=true, group="Devices - Small Round") @androidx.compose.ui.tooling.preview.Preview(device=androidx.compose.ui.tooling.preview.Devices.WEAR_OS_SQUARE, showSystemUi=true, backgroundColor=4278190080L, showBackground=true, group="Devices - Square") public @interface WearPreviewDevices {
  }

  @androidx.compose.ui.tooling.preview.Preview(device=androidx.compose.ui.tooling.preview.Devices.WEAR_OS_SMALL_ROUND, showSystemUi=true, backgroundColor=4278190080L, showBackground=true, group="Fonts - Small", fontScale=0.94f) @androidx.compose.ui.tooling.preview.Preview(device=androidx.compose.ui.tooling.preview.Devices.WEAR_OS_SMALL_ROUND, showSystemUi=true, backgroundColor=4278190080L, showBackground=true, group="Fonts - Normal", fontScale=1.0f) @androidx.compose.ui.tooling.preview.Preview(device=androidx.compose.ui.tooling.preview.Devices.WEAR_OS_SMALL_ROUND, showSystemUi=true, backgroundColor=4278190080L, showBackground=true, group="Fonts - Medium", fontScale=1.06f) @androidx.compose.ui.tooling.preview.Preview(device=androidx.compose.ui.tooling.preview.Devices.WEAR_OS_SMALL_ROUND, showSystemUi=true, backgroundColor=4278190080L, showBackground=true, group="Fonts - Large", fontScale=1.12f) @androidx.compose.ui.tooling.preview.Preview(device=androidx.compose.ui.tooling.preview.Devices.WEAR_OS_SMALL_ROUND, showSystemUi=true, backgroundColor=4278190080L, showBackground=true, group="Fonts - Larger", fontScale=1.18f) @androidx.compose.ui.tooling.preview.Preview(device=androidx.compose.ui.tooling.preview.Devices.WEAR_OS_SMALL_ROUND, showSystemUi=true, backgroundColor=4278190080L, showBackground=true, group="Fonts - Largest", fontScale=1.24f) public @interface WearPreviewFontSizes {
  }

  public final class WearPreviewThemes implements androidx.compose.ui.tooling.preview.PreviewParameterProvider<com.google.android.horologist.compose.tools.ThemeValues> {
    ctor public WearPreviewThemes();
    method public kotlin.sequences.Sequence<com.google.android.horologist.compose.tools.ThemeValues> getValues();
    property public kotlin.sequences.Sequence<com.google.android.horologist.compose.tools.ThemeValues> values;
  }

  @androidx.compose.ui.tooling.preview.Preview(device=androidx.compose.ui.tooling.preview.Devices.WEAR_OS_SMALL_ROUND, showSystemUi=true, backgroundColor=4278190080L, showBackground=true, group="Devices - Small Round") public @interface WearSmallRoundDevicePreview {
  }

  @androidx.compose.ui.tooling.preview.Preview(device=androidx.compose.ui.tooling.preview.Devices.WEAR_OS_SQUARE, showSystemUi=true, backgroundColor=4278190080L, showBackground=true, group="Devices - Square") public @interface WearSquareDevicePreview {
  }

  public final class WidthConstrainedBoxKt {
    method @androidx.compose.runtime.Composable public static void WidthConstrainedBox(optional java.util.List<androidx.compose.ui.unit.Dp> widths, optional float comfortableHeight, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

}

package com.google.android.horologist.compose.tools.a11y {

  @com.google.android.horologist.compose.tools.ExperimentalHorologistComposeToolsApi public final class ComposeA11yExtension implements app.cash.paparazzi.RenderExtension {
    ctor public ComposeA11yExtension();
    method public com.google.android.horologist.paparazzi.a11y.AccessibilityState getAccessibilityState();
    method public android.view.View renderView(android.view.View contentView);
    method public void setAccessibilityState(com.google.android.horologist.paparazzi.a11y.AccessibilityState accessibilityState);
    property public final com.google.android.horologist.paparazzi.a11y.AccessibilityState accessibilityState;
    field public com.google.android.horologist.paparazzi.a11y.AccessibilityState accessibilityState;
  }

  public final class ForceStateKt {
    method public static void forceState(androidx.wear.compose.material.ScalingLazyListState, int topIndex, int topScrollOffset);
  }

  public final class TallPreviewKt {
    method @androidx.compose.runtime.Composable public static void TallPreview(int width, int height, kotlin.jvm.functions.Function1<? super androidx.wear.compose.material.ScalingParams,kotlin.Unit> function);
  }

}

package com.google.android.horologist.compose.tools.coil {

  public final class FakeImageLoader implements coil.ImageLoader {
    ctor public FakeImageLoader(kotlin.jvm.functions.Function2<? super coil.request.ImageRequest,? super kotlin.coroutines.Continuation<? super coil.request.ImageResult>,?> imageFn);
    method public coil.request.Disposable enqueue(coil.request.ImageRequest request);
    method public suspend Object? execute(coil.request.ImageRequest request, kotlin.coroutines.Continuation<? super coil.request.ImageResult> p);
    method public coil.ComponentRegistry getComponents();
    method public coil.request.DefaultRequestOptions getDefaults();
    method public coil.disk.DiskCache? getDiskCache();
    method public coil.memory.MemoryCache? getMemoryCache();
    method public coil.ImageLoader.Builder newBuilder();
    method public inline void override(kotlin.jvm.functions.Function0<kotlin.Unit> function);
    method public void shutdown();
    property public coil.ComponentRegistry components;
    property public coil.request.DefaultRequestOptions defaults;
    property public coil.disk.DiskCache? diskCache;
    property public coil.memory.MemoryCache? memoryCache;
    field public static final com.google.android.horologist.compose.tools.coil.FakeImageLoader.Companion Companion;
    field public static final String TestUriPrefix = "android.resource://com.google.android.horologist.compose.tools/";
  }

  public static final class FakeImageLoader.Companion {
    method public com.google.android.horologist.compose.tools.coil.FakeImageLoader Fixed(@DrawableRes int resId);
    method public Integer? dataAsResourceId(Object? data);
    method public com.google.android.horologist.compose.tools.coil.FakeImageLoader getNever();
    method public com.google.android.horologist.compose.tools.coil.FakeImageLoader getNotFound();
    method public com.google.android.horologist.compose.tools.coil.FakeImageLoader getResources();
    method public int getTestIconResource();
    method public String getTestIconResourceUri();
    method public coil.request.ImageResult loadErrorBitmap(coil.request.ImageRequest request);
    method public coil.request.ImageResult loadSuccessBitmap(android.content.Context context, coil.request.ImageRequest request, @DrawableRes int id);
    property public final com.google.android.horologist.compose.tools.coil.FakeImageLoader Never;
    property public final com.google.android.horologist.compose.tools.coil.FakeImageLoader NotFound;
    property public final com.google.android.horologist.compose.tools.coil.FakeImageLoader Resources;
    property public final int TestIconResource;
    property public final String TestIconResourceUri;
  }

}

