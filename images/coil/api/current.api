// Signature format: 4.0
package com.google.android.horologist.images.coil {

  public final class ArtworkColorKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.annotations.ExperimentalHorologistApi public static androidx.compose.runtime.State<androidx.compose.ui.graphics.Color> rememberArtworkColor(Object? model, optional long defaultColor);
  }

  @androidx.compose.runtime.Stable public final class CoilPaintable implements com.google.android.horologist.images.base.paintable.Paintable {
    ctor public CoilPaintable(Object? model, optional androidx.compose.ui.graphics.painter.Painter? placeholder);
    method public Object? component1();
    method public com.google.android.horologist.images.coil.CoilPaintable copy(Object? model, androidx.compose.ui.graphics.painter.Painter? placeholder);
    method public Object? getModel();
    method @androidx.compose.runtime.Composable public androidx.compose.ui.graphics.painter.Painter rememberPainter();
    property public final Object? model;
  }

  public final class FakeImageLoader implements coil.ImageLoader {
    ctor public FakeImageLoader(kotlin.jvm.functions.Function2<? super coil.request.ImageRequest,? super kotlin.coroutines.Continuation<? super coil.request.ImageResult>,?> imageFn);
    method @androidx.compose.runtime.Composable public void apply(kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public coil.request.Disposable enqueue(coil.request.ImageRequest request);
    method public suspend Object? execute(coil.request.ImageRequest request, kotlin.coroutines.Continuation<? super coil.request.ImageResult>);
    method public coil.ComponentRegistry getComponents();
    method public coil.request.DefaultRequestOptions getDefaults();
    method public coil.disk.DiskCache? getDiskCache();
    method public coil.memory.MemoryCache? getMemoryCache();
    method public coil.ImageLoader.Builder newBuilder();
    method public inline void override(kotlin.jvm.functions.Function0<kotlin.Unit> function);
    method public void shutdown();
    property public coil.ComponentRegistry components;
    property public coil.request.DefaultRequestOptions defaults;
    property public coil.disk.DiskCache? diskCache;
    property public coil.memory.MemoryCache? memoryCache;
    field public static final com.google.android.horologist.images.coil.FakeImageLoader.Companion Companion;
    field public static final String TestUriPrefix = "android.resource://com.google.android.horologist.compose.tools/";
  }

  public static final class FakeImageLoader.Companion {
    method public com.google.android.horologist.images.coil.FakeImageLoader Fixed(@DrawableRes int resId);
    method public Integer? dataAsResourceId(Object? data);
    method public com.google.android.horologist.images.coil.FakeImageLoader getNever();
    method public com.google.android.horologist.images.coil.FakeImageLoader getNotFound();
    method public com.google.android.horologist.images.coil.FakeImageLoader getResources();
    method public int getTestIconResource();
    method public String getTestIconResourceUri();
    method public coil.request.ImageResult loadErrorBitmap(coil.request.ImageRequest request);
    method public coil.request.ImageResult loadSuccessBitmap(android.content.Context context, coil.request.ImageRequest request, @DrawableRes int id);
    property public final com.google.android.horologist.images.coil.FakeImageLoader Never;
    property public final com.google.android.horologist.images.coil.FakeImageLoader NotFound;
    property public final com.google.android.horologist.images.coil.FakeImageLoader Resources;
    property public final int TestIconResource;
    property public final String TestIconResourceUri;
  }

}

