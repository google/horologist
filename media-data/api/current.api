// Signature format: 4.0
package com.google.android.horologist.media.data {

  @kotlin.RequiresOptIn(message="Horologist Media is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalHorologistMediaDataApi {
  }

}

package com.google.android.horologist.media.data.database {

  @androidx.room.Database(entities={MediaDownloadEntity::class, MediaEntity::class, PlaylistEntity::class, PlaylistMediaEntity::class}, version=1, exportSchema=false) @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public abstract class MediaDatabase extends androidx.room.RoomDatabase {
    ctor public MediaDatabase();
    method public abstract com.google.android.horologist.media.data.database.dao.MediaDao mediaDao();
    method public abstract com.google.android.horologist.media.data.database.dao.MediaDownloadDao mediaDownloadDao();
    method public abstract com.google.android.horologist.media.data.database.dao.PlaylistDao playlistDao();
    method public abstract com.google.android.horologist.media.data.database.dao.PlaylistMediaDao playlistMediaDao();
  }

}

package com.google.android.horologist.media.data.database.dao {

  @androidx.room.Dao @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public interface MediaDao {
    method @androidx.room.Query("\n        DELETE FROM MediaEntity\n        WHERE mediaId in (:mediaIds)\n    ") public suspend Object? delete(java.util.List<java.lang.String> mediaIds, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
    method @androidx.room.Insert(onConflict=androidx.room.OnConflictStrategy.REPLACE) public suspend Object? upsert(java.util.List<com.google.android.horologist.media.data.database.model.MediaEntity> mediaList, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
  }

  @androidx.room.Dao @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public interface MediaDownloadDao {
    method @androidx.room.Query("\n        DELETE FROM MediaDownloadEntity\n        WHERE mediaId = :mediaId\n    ") public suspend Object? delete(String mediaId, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
    method @androidx.room.Query("\n        DELETE FROM MediaDownloadEntity\n        WHERE mediaId in (:mediaIds)\n    ") public suspend Object? delete(java.util.List<java.lang.String> mediaIds, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
    method @androidx.room.Query("\n        SELECT * FROM MediaDownloadEntity\n        WHERE status = :status\n    ") public suspend Object? getAllByStatus(com.google.android.horologist.media.data.database.model.MediaDownloadEntityStatus status, kotlin.coroutines.Continuation<? super java.util.List<? extends com.google.android.horologist.media.data.database.model.MediaDownloadEntity>> p);
    method @androidx.room.Query("\n        SELECT * FROM MediaDownloadEntity\n        WHERE mediaId in (:mediaIds)\n    ") public kotlinx.coroutines.flow.Flow<java.util.List<com.google.android.horologist.media.data.database.model.MediaDownloadEntity>> getList(java.util.List<java.lang.String> mediaIds);
    method @androidx.room.Insert(onConflict=androidx.room.OnConflictStrategy.IGNORE) public suspend Object? insert(com.google.android.horologist.media.data.database.model.MediaDownloadEntity mediaDownloadEntity, kotlin.coroutines.Continuation<? super java.lang.Long> p);
    method @androidx.room.Query("\n        UPDATE MediaDownloadEntity\n        SET progress = :progress,\n        size = :size\n        WHERE mediaId = :mediaId\n    ") public suspend Object? updateProgress(String mediaId, float progress, long size, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
    method @androidx.room.Query("\n        UPDATE MediaDownloadEntity\n        SET status = :status\n        WHERE mediaId = :mediaId\n    ") public suspend Object? updateStatus(String mediaId, com.google.android.horologist.media.data.database.model.MediaDownloadEntityStatus status, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
    method @androidx.room.Update(entity=MediaDownloadEntity::class) public suspend Object? updateStatusAndProgress(com.google.android.horologist.media.data.database.dao.MediaDownloadDao.StatusAndProgress statusAndProgress, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
    field public static final com.google.android.horologist.media.data.database.dao.MediaDownloadDao.Companion Companion;
    field public static final float DOWNLOAD_PROGRESS_END = 100.0f;
    field public static final float DOWNLOAD_PROGRESS_START = 0.0f;
    field public static final long SIZE_UNKNOWN = -1L; // 0xffffffffffffffffL
  }

  public static final class MediaDownloadDao.Companion {
    field public static final float DOWNLOAD_PROGRESS_END = 100.0f;
    field public static final float DOWNLOAD_PROGRESS_START = 0.0f;
    field public static final long SIZE_UNKNOWN = -1L; // 0xffffffffffffffffL
  }

  public static final class MediaDownloadDao.StatusAndProgress {
    ctor public MediaDownloadDao.StatusAndProgress(String mediaId, com.google.android.horologist.media.data.database.model.MediaDownloadEntityStatus status, float progress);
    method public String component1();
    method public com.google.android.horologist.media.data.database.model.MediaDownloadEntityStatus component2();
    method public float component3();
    method public com.google.android.horologist.media.data.database.dao.MediaDownloadDao.StatusAndProgress copy(String mediaId, com.google.android.horologist.media.data.database.model.MediaDownloadEntityStatus status, float progress);
    method public String getMediaId();
    method public float getProgress();
    method public com.google.android.horologist.media.data.database.model.MediaDownloadEntityStatus getStatus();
    property public final String mediaId;
    property public final float progress;
    property public final com.google.android.horologist.media.data.database.model.MediaDownloadEntityStatus status;
  }

  @androidx.room.Dao @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public interface PlaylistDao {
    method @androidx.room.Query("\n        DELETE FROM PlaylistEntity\n        WHERE playlistId in (:playlistIds)\n    ") public void delete(java.util.List<java.lang.String> playlistIds);
    method @androidx.room.Query("\n        SELECT * FROM PlaylistEntity\n        WHERE EXISTS (\n            SELECT 1 FROM PlaylistMediaEntity\n            WHERE PlaylistMediaEntity.playlistId = PlaylistEntity.playlistId\n            AND EXISTS (\n                SELECT 1 FROM MediaDownloadEntity\n                WHERE MediaDownloadEntity.mediaId = PlaylistMediaEntity.mediaId\n            )\n        )\n    ") @androidx.room.Transaction public kotlinx.coroutines.flow.Flow<java.util.List<com.google.android.horologist.media.data.database.model.PopulatedPlaylist>> getAllDownloaded();
    method @androidx.room.Query("\n        SELECT * FROM PlaylistEntity\n    ") @androidx.room.Transaction public kotlinx.coroutines.flow.Flow<java.util.List<com.google.android.horologist.media.data.database.model.PopulatedPlaylist>> getAllPopulated();
    method @androidx.room.Query("\n        SELECT * FROM PlaylistEntity\n        WHERE playlistId = :playlistId\n    ") @androidx.room.Transaction public suspend Object? getPopulated(String playlistId, kotlin.coroutines.Continuation<? super com.google.android.horologist.media.data.database.model.PopulatedPlaylist> p);
    method @androidx.room.Query("\n        SELECT * FROM playlistentity\n        WHERE playlistId = :playlistId\n    ") @androidx.room.Transaction public kotlinx.coroutines.flow.Flow<com.google.android.horologist.media.data.database.model.PopulatedPlaylist> getPopulatedStream(String playlistId);
    method @androidx.room.Insert(onConflict=androidx.room.OnConflictStrategy.REPLACE) public suspend Object? upsert(com.google.android.horologist.media.data.database.model.PlaylistEntity playlistEntity, java.util.List<com.google.android.horologist.media.data.database.model.MediaEntity> mediaEntityList, java.util.List<com.google.android.horologist.media.data.database.model.PlaylistMediaEntity> playlistMediaEntityList, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
  }

  @androidx.room.Dao @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public interface PlaylistMediaDao {
    method @androidx.room.Query("\n        DELETE FROM PlaylistMediaEntity\n        WHERE mediaId in (:mediaIds)\n    ") public void deleteByMediaId(java.util.List<java.lang.String> mediaIds);
    method @androidx.room.Query("\n        DELETE FROM PlaylistMediaEntity\n        WHERE playlistId in (:playlistIds)\n    ") public void deleteByPlaylistId(java.util.List<java.lang.String> playlistIds);
  }

}

package com.google.android.horologist.media.data.database.mapper {

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class MediaDownloadEntityStatusMapper {
    method public com.google.android.horologist.media.data.database.model.MediaDownloadEntityStatus map(@androidx.media3.exoplayer.offline.Download.State int state);
    field public static final com.google.android.horologist.media.data.database.mapper.MediaDownloadEntityStatusMapper INSTANCE;
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class MediaEntityMapper {
    method public com.google.android.horologist.media.data.database.model.MediaEntity map(com.google.android.horologist.media.model.Media media);
    field public static final com.google.android.horologist.media.data.database.mapper.MediaEntityMapper INSTANCE;
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class PlaylistEntityMapper {
    method public com.google.android.horologist.media.data.database.model.PlaylistEntity map(com.google.android.horologist.media.model.Playlist playlist);
    field public static final com.google.android.horologist.media.data.database.mapper.PlaylistEntityMapper INSTANCE;
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class PlaylistMediaEntityMapper {
    method public com.google.android.horologist.media.data.database.model.PlaylistMediaEntity map(com.google.android.horologist.media.model.Playlist playlist, com.google.android.horologist.media.model.Media media);
    field public static final com.google.android.horologist.media.data.database.mapper.PlaylistMediaEntityMapper INSTANCE;
  }

}

package com.google.android.horologist.media.data.database.model {

  @androidx.room.Entity @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class MediaDownloadEntity {
    ctor public MediaDownloadEntity(@androidx.room.PrimaryKey String mediaId, com.google.android.horologist.media.data.database.model.MediaDownloadEntityStatus status, float progress, long size);
    method public String component1();
    method public com.google.android.horologist.media.data.database.model.MediaDownloadEntityStatus component2();
    method public float component3();
    method public long component4();
    method public com.google.android.horologist.media.data.database.model.MediaDownloadEntity copy(String mediaId, com.google.android.horologist.media.data.database.model.MediaDownloadEntityStatus status, float progress, long size);
    method public String getMediaId();
    method public float getProgress();
    method public long getSize();
    method public com.google.android.horologist.media.data.database.model.MediaDownloadEntityStatus getStatus();
    property public final String mediaId;
    property public final float progress;
    property public final long size;
    property public final com.google.android.horologist.media.data.database.model.MediaDownloadEntityStatus status;
  }

  public enum MediaDownloadEntityStatus {
    enum_constant public static final com.google.android.horologist.media.data.database.model.MediaDownloadEntityStatus Downloaded;
    enum_constant public static final com.google.android.horologist.media.data.database.model.MediaDownloadEntityStatus Downloading;
    enum_constant public static final com.google.android.horologist.media.data.database.model.MediaDownloadEntityStatus Failed;
    enum_constant public static final com.google.android.horologist.media.data.database.model.MediaDownloadEntityStatus NotDownloaded;
  }

  @androidx.room.Entity @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class MediaEntity {
    ctor public MediaEntity(@androidx.room.PrimaryKey String mediaId, @androidx.room.ColumnInfo String mediaUrl, @androidx.room.ColumnInfo String artworkUrl, @androidx.room.ColumnInfo String? title, @androidx.room.ColumnInfo String? artist);
    method public String component1();
    method public String component2();
    method public String component3();
    method public String? component4();
    method public String? component5();
    method public com.google.android.horologist.media.data.database.model.MediaEntity copy(String mediaId, String mediaUrl, String artworkUrl, String? title, String? artist);
    method public String? getArtist();
    method public String getArtworkUrl();
    method public String getMediaId();
    method public String getMediaUrl();
    method public String? getTitle();
    property public final String? artist;
    property public final String artworkUrl;
    property public final String mediaId;
    property public final String mediaUrl;
    property public final String? title;
  }

  @androidx.room.Entity @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class PlaylistEntity {
    ctor public PlaylistEntity(@androidx.room.PrimaryKey String playlistId, String name, String? artworkUri);
    method public String component1();
    method public String component2();
    method public String? component3();
    method public com.google.android.horologist.media.data.database.model.PlaylistEntity copy(String playlistId, String name, String? artworkUri);
    method public String? getArtworkUri();
    method public String getName();
    method public String getPlaylistId();
    property public final String? artworkUri;
    property public final String name;
    property public final String playlistId;
  }

  @androidx.room.Entity(primaryKeys={"playlistId", "mediaId"}, indices={}) @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class PlaylistMediaEntity {
    ctor public PlaylistMediaEntity(String playlistId, String mediaId);
    method public String component1();
    method public String component2();
    method public com.google.android.horologist.media.data.database.model.PlaylistMediaEntity copy(String playlistId, String mediaId);
    method public String getMediaId();
    method public String getPlaylistId();
    property public final String mediaId;
    property public final String playlistId;
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class PopulatedPlaylist {
    ctor public PopulatedPlaylist(@androidx.room.Embedded com.google.android.horologist.media.data.database.model.PlaylistEntity playlist, @androidx.room.Relation(parentColumn="playlistId", entityColumn="mediaId", associateBy=) java.util.List<com.google.android.horologist.media.data.database.model.MediaEntity> mediaList);
    method public com.google.android.horologist.media.data.database.model.PlaylistEntity component1();
    method public java.util.List<com.google.android.horologist.media.data.database.model.MediaEntity> component2();
    method public com.google.android.horologist.media.data.database.model.PopulatedPlaylist copy(com.google.android.horologist.media.data.database.model.PlaylistEntity playlist, java.util.List<com.google.android.horologist.media.data.database.model.MediaEntity> mediaList);
    method public java.util.List<com.google.android.horologist.media.data.database.model.MediaEntity> getMediaList();
    method public com.google.android.horologist.media.data.database.model.PlaylistEntity getPlaylist();
    property public final java.util.List<com.google.android.horologist.media.data.database.model.MediaEntity> mediaList;
    property public final com.google.android.horologist.media.data.database.model.PlaylistEntity playlist;
  }

}

package com.google.android.horologist.media.data.datasource {

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class Media3DownloadDataSource {
    ctor public Media3DownloadDataSource(android.content.Context context, Class<? extends androidx.media3.exoplayer.offline.DownloadService> downloadService);
    method public void download(String id, android.net.Uri uri);
    method public void removeDownload(String id);
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class MediaDownloadLocalDataSource {
    ctor public MediaDownloadLocalDataSource(com.google.android.horologist.media.data.database.dao.MediaDownloadDao mediaDownloadDao);
    method public suspend Object? add(String mediaId, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
    method public suspend Object? delete(String mediaId, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
    method public kotlinx.coroutines.flow.Flow<java.util.List<com.google.android.horologist.media.data.database.model.MediaDownloadEntity>> get(java.util.List<java.lang.String> mediaIds);
    method public suspend Object? getAllDownloading(kotlin.coroutines.Continuation<? super java.util.List<? extends com.google.android.horologist.media.data.database.model.MediaDownloadEntity>> p);
    method public suspend Object? setDownloaded(String mediaId, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
    method public suspend Object? updateProgress(String mediaId, float progress, long size, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
    method public suspend Object? updateStatus(String mediaId, com.google.android.horologist.media.data.database.model.MediaDownloadEntityStatus status, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class MediaLocalDataSource {
    ctor public MediaLocalDataSource(androidx.room.RoomDatabase roomDatabase, com.google.android.horologist.media.data.database.dao.MediaDao mediaDao, com.google.android.horologist.media.data.database.dao.PlaylistMediaDao playlistMediaDao, com.google.android.horologist.media.data.database.dao.MediaDownloadDao mediaDownloadDao);
    method public suspend Object? delete(java.util.List<java.lang.String> mediaIds, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
    method public suspend Object? upsert(java.util.List<com.google.android.horologist.media.model.Media> mediaList, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class PlaylistLocalDataSource {
    ctor public PlaylistLocalDataSource(androidx.room.RoomDatabase roomDatabase, com.google.android.horologist.media.data.database.dao.PlaylistDao playlistDao, com.google.android.horologist.media.data.database.dao.PlaylistMediaDao playlistMediaDao);
    method public suspend Object? delete(java.util.List<java.lang.String> playlistIds, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
    method public kotlinx.coroutines.flow.Flow<java.util.List<com.google.android.horologist.media.data.database.model.PopulatedPlaylist>> getAllDownloaded();
    method public kotlinx.coroutines.flow.Flow<java.util.List<com.google.android.horologist.media.data.database.model.PopulatedPlaylist>> getAllPopulated();
    method public suspend Object? getPopulated(String playlistId, kotlin.coroutines.Continuation<? super com.google.android.horologist.media.data.database.model.PopulatedPlaylist> p);
    method public kotlinx.coroutines.flow.Flow<com.google.android.horologist.media.data.database.model.PopulatedPlaylist> getPopulatedStream(String playlistId);
    method public suspend Object? upsert(java.util.List<com.google.android.horologist.media.model.Playlist> playlists, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
  }

}

package com.google.android.horologist.media.data.mapper {

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class CommandMapper {
    method public com.google.android.horologist.media.model.Command map(@androidx.media3.common.Player.Command int command);
    field public static final com.google.android.horologist.media.data.mapper.CommandMapper INSTANCE;
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class MediaDownloadMapper {
    method public com.google.android.horologist.media.model.MediaDownload map(com.google.android.horologist.media.model.Media media, com.google.android.horologist.media.data.database.model.MediaDownloadEntity mediaDownloadEntity);
    method public java.util.List<com.google.android.horologist.media.model.MediaDownload> map(com.google.android.horologist.media.model.Playlist playlist, java.util.List<com.google.android.horologist.media.data.database.model.MediaDownloadEntity> mediaDownloadEntityList);
    field public static final com.google.android.horologist.media.data.mapper.MediaDownloadMapper INSTANCE;
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class MediaDownloadStatusMapper {
    method public com.google.android.horologist.media.model.MediaDownload.Status map(com.google.android.horologist.media.data.database.model.MediaDownloadEntity mediaDownloadEntity);
    field public static final com.google.android.horologist.media.data.mapper.MediaDownloadStatusMapper INSTANCE;
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public interface MediaExtrasMapper {
    method public java.util.Map<java.lang.String,java.lang.Object> map(androidx.media3.common.MediaItem mediaItem, androidx.media3.common.MediaMetadata? mediaMetadata);
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class MediaExtrasMapperNoopImpl implements com.google.android.horologist.media.data.mapper.MediaExtrasMapper {
    method public java.util.Map<java.lang.String,java.lang.Object> map(androidx.media3.common.MediaItem mediaItem, androidx.media3.common.MediaMetadata? mediaMetadata);
    field public static final com.google.android.horologist.media.data.mapper.MediaExtrasMapperNoopImpl INSTANCE;
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public interface MediaItemExtrasMapper {
    method public void map(com.google.android.horologist.media.model.Media media, androidx.media3.common.MediaItem.Builder mediaItemBuilder, androidx.media3.common.MediaMetadata.Builder mediaMetadataBuilder, androidx.media3.common.MediaItem.RequestMetadata.Builder requestMetadataBuilder);
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class MediaItemExtrasMapperNoopImpl implements com.google.android.horologist.media.data.mapper.MediaItemExtrasMapper {
    method public void map(com.google.android.horologist.media.model.Media media, androidx.media3.common.MediaItem.Builder mediaItemBuilder, androidx.media3.common.MediaMetadata.Builder mediaMetadataBuilder, androidx.media3.common.MediaItem.RequestMetadata.Builder requestMetadataBuilder);
    field public static final com.google.android.horologist.media.data.mapper.MediaItemExtrasMapperNoopImpl INSTANCE;
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class MediaItemMapper {
    ctor public MediaItemMapper(com.google.android.horologist.media.data.mapper.MediaItemExtrasMapper mediaItemExtrasMapper);
    method public androidx.media3.common.MediaItem map(com.google.android.horologist.media.model.Media mediaItem);
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class MediaMapper {
    ctor public MediaMapper(com.google.android.horologist.media.data.mapper.MediaExtrasMapper mediaExtrasMapper);
    method public com.google.android.horologist.media.model.Media map(androidx.media3.common.MediaItem mediaItem, androidx.media3.common.MediaMetadata? mediaMetadata, optional String defaultArtist);
    method public com.google.android.horologist.media.model.Media map(com.google.android.horologist.media.data.database.model.MediaEntity media);
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class PlaybackStateMapper {
    ctor public PlaybackStateMapper(optional kotlin.jvm.functions.Function0<java.lang.Long> timestampProvider);
    method public com.google.android.horologist.media.model.PlaybackStateEvent createEvent(androidx.media3.common.Player? player, com.google.android.horologist.media.model.PlaybackStateEvent.Cause cause);
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class PlayerStateMapper {
    method public com.google.android.horologist.media.model.PlayerState map(androidx.media3.common.Player player);
    field public static final com.google.android.horologist.media.data.mapper.PlayerStateMapper INSTANCE;
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class PlaylistDownloadMapper {
    ctor public PlaylistDownloadMapper(com.google.android.horologist.media.data.mapper.PlaylistMapper playlistMapper);
    method public com.google.android.horologist.media.model.PlaylistDownload map(com.google.android.horologist.media.data.database.model.PopulatedPlaylist populatedPlaylist, java.util.List<com.google.android.horologist.media.data.database.model.MediaDownloadEntity> mediaDownloadEntity);
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class PlaylistMapper {
    ctor public PlaylistMapper(com.google.android.horologist.media.data.mapper.MediaMapper mediaMapper);
    method public com.google.android.horologist.media.model.Playlist map(com.google.android.horologist.media.data.database.model.PopulatedPlaylist populatedPlaylist);
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class SetCommandMapper {
    method public java.util.Set<com.google.android.horologist.media.model.Command> map(androidx.media3.common.Player.Commands commands);
    field public static final com.google.android.horologist.media.data.mapper.SetCommandMapper INSTANCE;
  }

}

package com.google.android.horologist.media.data.repository {

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class MediaDownloadRepositoryImpl implements com.google.android.horologist.media.repository.MediaDownloadRepository {
    ctor public MediaDownloadRepositoryImpl(com.google.android.horologist.media.data.datasource.Media3DownloadDataSource media3DownloadDataSource);
    method public void remove(String mediaId);
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class PlayerRepositoryImpl implements java.io.Closeable com.google.android.horologist.media.repository.PlayerRepository {
    ctor public PlayerRepositoryImpl(optional com.google.android.horologist.media.data.mapper.MediaMapper mediaMapper, optional com.google.android.horologist.media.data.mapper.MediaItemMapper mediaItemMapper, optional com.google.android.horologist.media.data.mapper.PlaybackStateMapper playbackStateMapper);
    method public void addMedia(com.google.android.horologist.media.model.Media media);
    method public void addMedia(int index, com.google.android.horologist.media.model.Media media);
    method public void clearMediaList();
    method public void close();
    method public void connect(androidx.media3.common.Player player, kotlin.jvm.functions.Function0<kotlin.Unit> onClose);
    method public kotlinx.coroutines.flow.StateFlow<java.util.Set<com.google.android.horologist.media.model.Command>> getAvailableCommands();
    method public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> getConnected();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.Media> getCurrentMedia();
    method public int getCurrentMediaIndex();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.PlaybackStateEvent> getLatestPlaybackState();
    method public com.google.android.horologist.media.model.Media? getMediaAt(int index);
    method public int getMediaCount();
    method public kotlinx.coroutines.flow.StateFlow<androidx.media3.common.Player> getPlayer();
    method public kotlinx.coroutines.flow.StateFlow<kotlin.time.Duration> getSeekBackIncrement();
    method public kotlinx.coroutines.flow.StateFlow<kotlin.time.Duration> getSeekForwardIncrement();
    method public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> getShuffleModeEnabled();
    method public boolean hasNextMedia();
    method public boolean hasPreviousMedia();
    method public void pause();
    method public void play();
    method public void prepare();
    method public void release();
    method public void removeMedia(int index);
    method public void seekBack();
    method public void seekForward();
    method public void seekToDefaultPosition(int mediaIndex);
    method public void setMedia(com.google.android.horologist.media.model.Media media);
    method public void setMediaList(java.util.List<com.google.android.horologist.media.model.Media> mediaList);
    method public void setMediaList(java.util.List<com.google.android.horologist.media.model.Media> mediaList, int index, kotlin.time.Duration? position);
    method public void setPlaybackSpeed(float speed);
    method public void setShuffleModeEnabled(boolean shuffleModeEnabled);
    method public void skipToNextMedia();
    method public void skipToPreviousMedia();
    property public kotlinx.coroutines.flow.StateFlow<java.util.Set<com.google.android.horologist.media.model.Command>> availableCommands;
    property public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> connected;
    property public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.Media> currentMedia;
    property public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.PlaybackStateEvent> latestPlaybackState;
    property public final kotlinx.coroutines.flow.StateFlow<androidx.media3.common.Player> player;
    property public kotlinx.coroutines.flow.StateFlow<kotlin.time.Duration> seekBackIncrement;
    property public kotlinx.coroutines.flow.StateFlow<kotlin.time.Duration> seekForwardIncrement;
    property public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> shuffleModeEnabled;
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class PlaylistDownloadRepositoryImpl implements com.google.android.horologist.media.repository.PlaylistDownloadRepository {
    ctor public PlaylistDownloadRepositoryImpl(kotlinx.coroutines.CoroutineScope coroutineScope, com.google.android.horologist.media.data.datasource.PlaylistLocalDataSource playlistLocalDataSource, com.google.android.horologist.media.data.datasource.MediaDownloadLocalDataSource mediaDownloadLocalDataSource, com.google.android.horologist.media.data.datasource.Media3DownloadDataSource media3DownloadDataSource, com.google.android.horologist.media.data.mapper.PlaylistDownloadMapper playlistDownloadMapper);
    method public void download(com.google.android.horologist.media.model.Playlist playlist);
    method public kotlinx.coroutines.flow.Flow<com.google.android.horologist.media.model.PlaylistDownload> get(String playlistId);
    method public void remove(com.google.android.horologist.media.model.Playlist playlist);
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class PlaylistRepositoryImpl implements com.google.android.horologist.media.repository.PlaylistRepository {
    ctor public PlaylistRepositoryImpl(com.google.android.horologist.media.data.datasource.PlaylistLocalDataSource playlistLocalDataSource, com.google.android.horologist.media.data.mapper.PlaylistMapper playlistMapper);
    method public suspend Object? get(String playlistId, kotlin.coroutines.Continuation<? super com.google.android.horologist.media.model.Playlist> p);
    method public kotlinx.coroutines.flow.Flow<java.util.List<com.google.android.horologist.media.model.Playlist>> getAll();
    method public kotlinx.coroutines.flow.Flow<java.util.List<com.google.android.horologist.media.model.Playlist>> getAllDownloaded();
  }

}

package com.google.android.horologist.media.data.service.download {

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class DownloadManagerListener implements androidx.media3.exoplayer.offline.DownloadManager.Listener {
    ctor public DownloadManagerListener(kotlinx.coroutines.CoroutineScope coroutineScope, com.google.android.horologist.media.data.datasource.MediaDownloadLocalDataSource mediaDownloadLocalDataSource, com.google.android.horologist.media.data.service.download.DownloadProgressMonitor downloadProgressMonitor);
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class DownloadProgressMonitor {
    ctor public DownloadProgressMonitor(kotlinx.coroutines.CoroutineScope coroutineScope, com.google.android.horologist.media.data.datasource.MediaDownloadLocalDataSource mediaDownloadLocalDataSource);
    field public static final long UPDATE_INTERVAL_MILLIS = 1000L; // 0x3e8L
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public abstract class MediaDownloadService extends androidx.media3.exoplayer.offline.DownloadService implements androidx.lifecycle.LifecycleOwner {
    ctor public MediaDownloadService(int foregroundNotificationId, long foregroundNotificationUpdateInterval, String? channelId, @StringRes int channelNameResourceId, @StringRes int channelDescriptionResourceId, @DrawableRes int notificationIcon);
    method protected abstract android.app.PendingIntent getDownloadIntent();
    method protected abstract com.google.android.horologist.media.data.service.download.DownloadManagerListener getDownloadManagerListener();
    method protected abstract androidx.media3.exoplayer.offline.DownloadNotificationHelper getDownloadNotificationHelper();
    method protected android.app.Notification getForegroundNotification(java.util.List<androidx.media3.exoplayer.offline.Download> downloads, int notMetRequirements);
    method public androidx.lifecycle.Lifecycle getLifecycle();
    method protected androidx.media3.exoplayer.scheduler.Scheduler getScheduler();
    method protected abstract androidx.media3.exoplayer.workmanager.WorkManagerScheduler getWorkManagerScheduler();
    property protected abstract android.app.PendingIntent downloadIntent;
    property protected abstract com.google.android.horologist.media.data.service.download.DownloadManagerListener downloadManagerListener;
    property protected abstract androidx.media3.exoplayer.offline.DownloadNotificationHelper downloadNotificationHelper;
    property protected abstract androidx.media3.exoplayer.workmanager.WorkManagerScheduler workManagerScheduler;
  }

}

