// Signature format: 4.0
package com.google.android.horologist.media.data {

  @kotlin.RequiresOptIn(message="Horologist Media is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public @interface ExperimentalHorologistMediaDataApi {
  }

}

package com.google.android.horologist.media.data.mapper {

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class CommandMapper {
    method public com.google.android.horologist.media.model.Command map(@androidx.media3.common.Player.Command int command);
    field public static final com.google.android.horologist.media.data.mapper.CommandMapper INSTANCE;
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public interface MediaExtrasMapper {
    method public java.util.Map<java.lang.String,java.lang.Object> map(androidx.media3.common.MediaItem mediaItem);
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class MediaExtrasMapperNoopImpl implements com.google.android.horologist.media.data.mapper.MediaExtrasMapper {
    method public java.util.Map<java.lang.String,java.lang.Object> map(androidx.media3.common.MediaItem mediaItem);
    field public static final com.google.android.horologist.media.data.mapper.MediaExtrasMapperNoopImpl INSTANCE;
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public interface MediaItemExtrasMapper {
    method public void map(com.google.android.horologist.media.model.Media media, androidx.media3.common.MediaItem.Builder mediaItemBuilder, androidx.media3.common.MediaMetadata.Builder mediaMetadataBuilder, androidx.media3.common.MediaItem.RequestMetadata.Builder requestMetadataBuilder);
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class MediaItemExtrasMapperNoopImpl implements com.google.android.horologist.media.data.mapper.MediaItemExtrasMapper {
    method public void map(com.google.android.horologist.media.model.Media media, androidx.media3.common.MediaItem.Builder mediaItemBuilder, androidx.media3.common.MediaMetadata.Builder mediaMetadataBuilder, androidx.media3.common.MediaItem.RequestMetadata.Builder requestMetadataBuilder);
    field public static final com.google.android.horologist.media.data.mapper.MediaItemExtrasMapperNoopImpl INSTANCE;
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class MediaItemMapper {
    ctor public MediaItemMapper(com.google.android.horologist.media.data.mapper.MediaItemExtrasMapper mediaItemExtrasMapper);
    method public androidx.media3.common.MediaItem map(com.google.android.horologist.media.model.Media mediaItem);
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class MediaMapper {
    ctor public MediaMapper(com.google.android.horologist.media.data.mapper.MediaExtrasMapper mediaExtrasMapper);
    method public com.google.android.horologist.media.model.Media map(androidx.media3.common.MediaItem mediaItem, optional String defaultArtist);
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class MediaPositionMapper {
    method public com.google.android.horologist.media.model.MediaPosition? map(androidx.media3.common.Player? player);
    field public static final com.google.android.horologist.media.data.mapper.MediaPositionMapper INSTANCE;
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class PlayerStateMapper {
    method public boolean affectsState(androidx.media3.common.Player.Events events);
    method public com.google.android.horologist.media.model.PlayerState map(androidx.media3.common.Player player);
    field public static final com.google.android.horologist.media.data.mapper.PlayerStateMapper INSTANCE;
  }

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class SetCommandMapper {
    method public java.util.Set<com.google.android.horologist.media.model.Command> map(androidx.media3.common.Player.Commands commands);
    field public static final com.google.android.horologist.media.data.mapper.SetCommandMapper INSTANCE;
  }

}

package com.google.android.horologist.media.data.repository {

  @com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi public final class PlayerRepositoryImpl implements java.io.Closeable com.google.android.horologist.media.repository.PlayerRepository {
    ctor public PlayerRepositoryImpl(com.google.android.horologist.media.data.mapper.MediaMapper mediaMapper, com.google.android.horologist.media.data.mapper.MediaItemMapper mediaItemMapper);
    method public void addMedia(com.google.android.horologist.media.model.Media media);
    method public void addMedia(int index, com.google.android.horologist.media.model.Media media);
    method public void clearMediaList();
    method public void close();
    method public void connect(androidx.media3.common.Player player, kotlin.jvm.functions.Function0<kotlin.Unit> onClose);
    method public kotlinx.coroutines.flow.StateFlow<java.util.Set<com.google.android.horologist.media.model.Command>> getAvailableCommands();
    method public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> getConnected();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.Media> getCurrentMedia();
    method public int getCurrentMediaIndex();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.PlayerState> getCurrentState();
    method public com.google.android.horologist.media.model.Media? getMediaAt(int index);
    method public int getMediaCount();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.MediaPosition> getMediaPosition();
    method public kotlinx.coroutines.flow.StateFlow<java.lang.Float> getPlaybackSpeed();
    method public kotlinx.coroutines.flow.StateFlow<androidx.media3.common.Player> getPlayer();
    method public long getSeekBackIncrement();
    method public long getSeekForwardIncrement();
    method public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> getShuffleModeEnabled();
    method public boolean hasNextMedia();
    method public boolean hasPreviousMedia();
    method public void pause();
    method public void play();
    method public void play(int mediaIndex);
    method public void prepare();
    method public void release();
    method public void removeMedia(int index);
    method public void seekBack();
    method public void seekForward();
    method public void setMedia(com.google.android.horologist.media.model.Media media);
    method public void setMediaList(java.util.List<com.google.android.horologist.media.model.Media> mediaList);
    method public void setPlaybackSpeed(float speed);
    method public void setShuffleModeEnabled(boolean shuffleModeEnabled);
    method public void skipToNextMedia();
    method public void skipToPreviousMedia();
    method public void updatePosition();
    property public kotlinx.coroutines.flow.StateFlow<java.util.Set<com.google.android.horologist.media.model.Command>> availableCommands;
    property public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> connected;
    property public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.Media> currentMedia;
    property public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.PlayerState> currentState;
    property public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.MediaPosition> mediaPosition;
    property public final kotlinx.coroutines.flow.StateFlow<java.lang.Float> playbackSpeed;
    property public final kotlinx.coroutines.flow.StateFlow<androidx.media3.common.Player> player;
    property public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> shuffleModeEnabled;
  }

}

