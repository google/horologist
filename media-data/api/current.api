// Signature format: 4.0
package com.google.android.horologist.media.data {

  public final class CommandMapper {
    method public com.google.android.horologist.media.model.Command map(@androidx.media3.common.Player.Command int command);
    field public static final com.google.android.horologist.media.data.CommandMapper INSTANCE;
  }

  @kotlin.RequiresOptIn(message="Horologist Media is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public @interface ExperimentalHorologistMediaDataApi {
  }

  public final class Media3MediaItemMapper {
    method public androidx.media3.common.MediaItem map(com.google.android.horologist.media.model.MediaItem mediaItem);
    method public java.util.List<androidx.media3.common.MediaItem> map(java.util.List<com.google.android.horologist.media.model.MediaItem> mediaItems);
    field public static final com.google.android.horologist.media.data.Media3MediaItemMapper INSTANCE;
  }

  public final class MediaItemMapper {
    method public com.google.android.horologist.media.model.MediaItem map(androidx.media3.common.MediaItem media3MediaItem, optional String defaultArtist);
    field public static final com.google.android.horologist.media.data.MediaItemMapper INSTANCE;
  }

  public final class MediaItemPositionMapper {
    method public com.google.android.horologist.media.model.MediaItemPosition? map(androidx.media3.common.Player? player);
    field public static final com.google.android.horologist.media.data.MediaItemPositionMapper INSTANCE;
  }

  public final class PlayerRepositoryImpl implements java.io.Closeable com.google.android.horologist.media.repository.PlayerRepository {
    ctor public PlayerRepositoryImpl();
    method public void addMediaItem(com.google.android.horologist.media.model.MediaItem mediaItem);
    method public void addMediaItem(int index, com.google.android.horologist.media.model.MediaItem mediaItem);
    method public void clearMediaItems();
    method public void close();
    method public void connect(androidx.media3.common.Player player, kotlin.jvm.functions.Function0<kotlin.Unit> onClose);
    method public kotlinx.coroutines.flow.StateFlow<java.util.Set<com.google.android.horologist.media.model.Command>> getAvailableCommands();
    method public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> getConnected();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.MediaItem> getCurrentMediaItem();
    method public int getCurrentMediaItemIndex();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.PlayerState> getCurrentState();
    method public com.google.android.horologist.media.model.MediaItem? getMediaItemAt(int index);
    method public int getMediaItemCount();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.MediaItemPosition> getMediaItemPosition();
    method public kotlinx.coroutines.flow.StateFlow<java.lang.Float> getPlaybackSpeed();
    method public kotlinx.coroutines.flow.StateFlow<androidx.media3.common.Player> getPlayer();
    method public long getSeekBackIncrement();
    method public long getSeekForwardIncrement();
    method public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> getShuffleModeEnabled();
    method public boolean hasNextMediaItem();
    method public boolean hasPreviousMediaItem();
    method public void pause();
    method public void play();
    method public void play(int mediaItemIndex);
    method public void prepare();
    method public void release();
    method public void removeMediaItem(int index);
    method public void seekBack();
    method public void seekForward();
    method public void setMediaItem(com.google.android.horologist.media.model.MediaItem mediaItem);
    method public void setMediaItems(java.util.List<com.google.android.horologist.media.model.MediaItem> mediaItems);
    method public void setPlaybackSpeed(float speed);
    method public void setShuffleModeEnabled(boolean shuffleModeEnabled);
    method public void skipToNextMediaItem();
    method public void skipToPreviousMediaItem();
    method public void updatePosition();
    property public kotlinx.coroutines.flow.StateFlow<java.util.Set<com.google.android.horologist.media.model.Command>> availableCommands;
    property public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> connected;
    property public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.MediaItem> currentMediaItem;
    property public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.PlayerState> currentState;
    property public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.MediaItemPosition> mediaItemPosition;
    property public final kotlinx.coroutines.flow.StateFlow<java.lang.Float> playbackSpeed;
    property public final kotlinx.coroutines.flow.StateFlow<androidx.media3.common.Player> player;
    property public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> shuffleModeEnabled;
  }

  public final class PlayerStateMapper {
    method public boolean affectsState(androidx.media3.common.Player.Events events);
    method public com.google.android.horologist.media.model.PlayerState map(androidx.media3.common.Player player);
    field public static final com.google.android.horologist.media.data.PlayerStateMapper INSTANCE;
  }

  public final class SetCommandMapper {
    method public java.util.Set<com.google.android.horologist.media.model.Command> map(androidx.media3.common.Player.Commands commands);
    field public static final com.google.android.horologist.media.data.SetCommandMapper INSTANCE;
  }

}

