/*
 * Copyright 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id "org.jetbrains.kotlin.kapt"
    id 'dagger.hilt.android.plugin'
    id 'com.google.devtools.ksp'
}

Properties localProperties = new Properties()
def localFile = project.rootProject.file('local.properties')
if (localFile.exists()) {
    localProperties.load(localFile.newDataInputStream())
}

android {
    compileSdkVersion 32

    defaultConfig {
        applicationId "com.google.android.horologist.mediasample"
        // Min because of Tiles
        minSdk 26
        targetSdk 30

        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.google.android.horologist.mediasample.runner.MediaAppRunner"
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            manifestPlaceholders.schemeSuffix = "-debug"
        }
        release {
            manifestPlaceholders.schemeSuffix = ""

            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            signingConfig = signingConfigs.getByName("debug")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        compose true
    }

    kotlinOptions {
        jvmTarget = "1.8"
        // Allow for widescale experimental APIs in Alpha libraries we build upon
        freeCompilerArgs += "-opt-in=androidx.compose.ui.ExperimentalComposeUiApi"
        freeCompilerArgs += "-opt-in=androidx.wear.compose.material.ExperimentalWearMaterialApi"
        freeCompilerArgs += "-opt-in=com.google.accompanist.pager.ExperimentalPagerApi"
        freeCompilerArgs += "-opt-in=com.google.android.horologist.audio.ExperimentalHorologistAudioApi"
        freeCompilerArgs += "-opt-in=com.google.android.horologist.audio.ui.ExperimentalHorologistAudioUiApi"
        freeCompilerArgs += "-opt-in=com.google.android.horologist.composables.ExperimentalHorologistComposablesApi"
        freeCompilerArgs += "-opt-in=com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi"
        freeCompilerArgs += "-opt-in=com.google.android.horologist.compose.tools.ExperimentalHorologistComposeToolsApi"
        freeCompilerArgs += "-opt-in=com.google.android.horologist.media.ExperimentalHorologistMediaApi"
        freeCompilerArgs += "-opt-in=com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi"
        freeCompilerArgs += "-opt-in=com.google.android.horologist.media.data.ExperimentalHorologistMediaDataApi"
        freeCompilerArgs += "-opt-in=com.google.android.horologist.media3.ExperimentalHorologistMedia3BackendApi"
        freeCompilerArgs += "-opt-in=com.google.android.horologist.networks.ExperimentalHorologistNetworksApi"
        freeCompilerArgs += "-opt-in=com.google.android.horologist.tiles.ExperimentalHorologistTilesApi"
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
        freeCompilerArgs += "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
    }

    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.compose.compiler.get()
    }
}

kapt {
    correctErrorTypes true
}

dependencies {
    implementation projects.composeLayout
    implementation projects.audio
    implementation projects.audioUi
    implementation projects.composables
    implementation projects.media
    implementation projects.mediaUi
    implementation projects.mediaData
    implementation projects.networkAwareness
    implementation projects.composeTools
    implementation projects.media3Backend
    implementation projects.composeLayout
    implementation projects.tiles

    implementation projectOrDependency(":media-lib-datasource-okhttp", libs.androidx.media3.datasourceokhttp)

    implementation libs.compose.ui.tooling
    implementation libs.compose.ui.util

    implementation libs.compose.foundation.foundation
    implementation libs.compose.material.iconsext

    implementation libs.wearcompose.material
    implementation libs.wearcompose.foundation
    implementation libs.wearcompose.navigation

    implementation libs.androidx.core
    implementation libs.androidx.lifecycle.runtime
    implementation libs.androidx.lifecycle.viewmodel.compose
    implementation libs.androidx.activity.compose
    implementation libs.androidx.wear.tiles
    implementation libs.androidx.wear.tiles.material

    implementation libs.androidx.complications.datasource.ktx

    implementation libs.coil
    implementation libs.coil.svg
    implementation libs.retrofit2.convertermoshi
    implementation libs.retrofit2.retrofit
    implementation libs.com.squareup.okhttp3.okhttp
    implementation libs.com.squareup.okhttp3.logging.interceptor

    implementation libs.moshi.adapters
    implementation libs.moshi.kotlin
    ksp libs.moshi.kotlin.codegen

    implementation libs.androidx.palette.ktx

    implementation libs.lottie.compose

    implementation libs.kotlin.stdlib
    implementation libs.kotlinx.coroutines.guava

    debugImplementation projects.composeTools

    implementation libs.androidx.datastore.preferences
    implementation libs.androidx.complications.rendering

    implementation libs.dagger.hiltandroid
    kapt libs.dagger.hiltandroidcompiler
    implementation libs.hilt.navigationcompose

    implementation libs.androidx.media3.exoplayerworkmanager

    implementation libs.room.common
    implementation libs.room.ktx
    ksp libs.room.compiler

    testImplementation libs.junit
    testImplementation libs.truth
    testImplementation libs.androidx.test.ext.ktx
    testImplementation libs.kotlinx.coroutines.test

    androidTestImplementation libs.compose.ui.test.junit4
    androidTestImplementation libs.espresso.core
    androidTestImplementation libs.junit
    androidTestImplementation libs.androidx.test.ext
    androidTestImplementation libs.androidx.test.ext.ktx
    androidTestImplementation libs.androidx.test.rules
    androidTestImplementation libs.truth
    androidTestImplementation libs.androidx.test.uiautomator
    androidTestImplementation libs.androidx.complications.rendering
    androidTestImplementation libs.dagger.hiltandroidtesting
    kaptAndroidTest libs.dagger.hiltandroidcompiler
}

def device = localProperties.getProperty("DEVICE")
if (device != null) {
    task appLaunch(type: Exec) {
        group = "Media"
        description = "Run on device " + device
        dependsOn(":media-sample:installRelease")
        description = "Launch App"
        commandLine = "adb -s $device shell am start -n com.google.android.horologist.mediasample/com.google.android.horologist.mediasample.components.MediaActivity".split(" ")
    }

    task offloadStatus(type: Exec) {
        group = "Media"
        description = "Offload Status for " + device
        description = "Offload Status"
        commandLine = "adb -s $device shell dumpsys media.audio_flinger".split(" ")
    }
}
