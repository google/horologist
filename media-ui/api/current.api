// Signature format: 4.0
package com.google.android.horologist.media.ui {

  @kotlin.RequiresOptIn(message="Horologist Media is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public @interface ExperimentalMediaUiApi {
  }

}

package com.google.android.horologist.media.ui.components {

  public final class MediaControlButtonsKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public static void MediaControlButtons(kotlin.jvm.functions.Function0<kotlin.Unit> onPlayClick, kotlin.jvm.functions.Function0<kotlin.Unit> onPauseClick, boolean playPauseEnabled, boolean playing, float percent, kotlin.jvm.functions.Function0<kotlin.Unit> onSeekToPreviousButtonClick, boolean seekToPreviousButtonEnabled, kotlin.jvm.functions.Function0<kotlin.Unit> onSeekToNextButtonClick, boolean seekToNextButtonEnabled, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material.ButtonColors colors, optional long progressColour);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public static void MediaControlButtons(kotlin.jvm.functions.Function0<kotlin.Unit> onPlayClick, kotlin.jvm.functions.Function0<kotlin.Unit> onPauseClick, boolean playPauseEnabled, boolean playing, kotlin.jvm.functions.Function0<kotlin.Unit> onSeekToPreviousButtonClick, boolean seekToPreviousButtonEnabled, kotlin.jvm.functions.Function0<kotlin.Unit> onSeekToNextButtonClick, boolean seekToNextButtonEnabled, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material.ButtonColors colors);
  }

  public final class PlayPauseButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public static void PlayPauseButton(kotlin.jvm.functions.Function0<kotlin.Unit> onPlayClick, kotlin.jvm.functions.Function0<kotlin.Unit> onPauseClick, boolean playing, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors, optional kotlin.jvm.functions.Function0<kotlin.Unit> progress);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public static void PlayPauseProgressButton(kotlin.jvm.functions.Function0<kotlin.Unit> onPlayClick, kotlin.jvm.functions.Function0<kotlin.Unit> onPauseClick, boolean playing, float percent, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors, optional long progressColour);
  }

  public final class TextMediaDisplayKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public static void TextMediaDisplay(optional androidx.compose.ui.Modifier modifier, optional String? title, optional String? artist);
  }

}

package com.google.android.horologist.media.ui.components.controls {

  public final class MediaButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public static void MediaButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, androidx.compose.ui.graphics.vector.ImageVector icon, String contentDescription, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors);
  }

  public final class PauseButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public static void PauseButton(com.google.android.horologist.media.ui.state.PlayerViewModel playerViewModel, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material.ButtonColors colors);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public static void PauseButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors);
  }

  public final class PlayButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public static void PlayButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors);
  }

  public final class SeekBackButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public static void SeekBackButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekButtonIncrement, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors);
  }

  @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public abstract sealed class SeekButtonIncrement {
    method public int getSeconds();
    property public int seconds;
  }

  public static final class SeekButtonIncrement.Five extends com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement {
    field public static final com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement.Five INSTANCE;
  }

  public static final class SeekButtonIncrement.Other extends com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement {
    ctor public SeekButtonIncrement.Other(int seconds);
    method public int component1();
    method public com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement.Other copy(int seconds);
    property public int seconds;
  }

  public static final class SeekButtonIncrement.Ten extends com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement {
    field public static final com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement.Ten INSTANCE;
  }

  public static final class SeekButtonIncrement.Thirty extends com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement {
    field public static final com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement.Thirty INSTANCE;
  }

  public static final class SeekButtonIncrement.Unknown extends com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement {
    field public static final com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement.Unknown INSTANCE;
  }

  public final class SeekForwardButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public static void SeekForwardButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekButtonIncrement, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors);
  }

  public final class SeekToNextButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public static void SeekToNextButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors);
  }

  public final class SeekToPreviousButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public static void SeekToPreviousButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors);
  }

  public final class ShuffleButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public static void ShuffleButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, boolean shuffleOn, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors);
  }

}

package com.google.android.horologist.media.ui.components.semantics {

  @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public final class CustomSemanticsProperties {
    method public androidx.compose.ui.graphics.vector.ImageVector getIconImageVector(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.graphics.vector.ImageVector> getIconImageVectorKey();
    method public void setIconImageVector(androidx.compose.ui.semantics.SemanticsPropertyReceiver, androidx.compose.ui.graphics.vector.ImageVector iconImageVector);
    property public final androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.graphics.vector.ImageVector> IconImageVectorKey;
    property public final androidx.compose.ui.graphics.vector.ImageVector iconImageVector;
    field public static final com.google.android.horologist.media.ui.components.semantics.CustomSemanticsProperties INSTANCE;
  }

}

package com.google.android.horologist.media.ui.screens {

  public final class PlayScreenKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public static void PlayScreen(kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> mediaDisplay, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> controlButtons, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> buttons, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> background);
  }

}

package com.google.android.horologist.media.ui.state {

  @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public final class PlayerUiState {
    ctor public PlayerUiState(boolean playEnabled, boolean pauseEnabled, boolean seekBackEnabled, boolean seekForwardEnabled, boolean seekToPreviousEnabled, boolean seekToNextEnabled, boolean shuffleEnabled, boolean shuffleOn, boolean playPauseEnabled, boolean playing, com.google.android.horologist.media.ui.state.model.MediaItemUiModel? mediaItem, com.google.android.horologist.media.ui.state.model.TrackPositionUiModel? trackPosition);
    method public boolean component1();
    method public boolean component10();
    method public com.google.android.horologist.media.ui.state.model.MediaItemUiModel? component11();
    method public com.google.android.horologist.media.ui.state.model.TrackPositionUiModel? component12();
    method public boolean component2();
    method public boolean component3();
    method public boolean component4();
    method public boolean component5();
    method public boolean component6();
    method public boolean component7();
    method public boolean component8();
    method public boolean component9();
    method public com.google.android.horologist.media.ui.state.PlayerUiState copy(boolean playEnabled, boolean pauseEnabled, boolean seekBackEnabled, boolean seekForwardEnabled, boolean seekToPreviousEnabled, boolean seekToNextEnabled, boolean shuffleEnabled, boolean shuffleOn, boolean playPauseEnabled, boolean playing, com.google.android.horologist.media.ui.state.model.MediaItemUiModel? mediaItem, com.google.android.horologist.media.ui.state.model.TrackPositionUiModel? trackPosition);
    method public com.google.android.horologist.media.ui.state.model.MediaItemUiModel? getMediaItem();
    method public boolean getPauseEnabled();
    method public boolean getPlayEnabled();
    method public boolean getPlayPauseEnabled();
    method public boolean getPlaying();
    method public boolean getSeekBackEnabled();
    method public boolean getSeekForwardEnabled();
    method public boolean getSeekToNextEnabled();
    method public boolean getSeekToPreviousEnabled();
    method public boolean getShuffleEnabled();
    method public boolean getShuffleOn();
    method public com.google.android.horologist.media.ui.state.model.TrackPositionUiModel? getTrackPosition();
    property public final com.google.android.horologist.media.ui.state.model.MediaItemUiModel? mediaItem;
    property public final boolean pauseEnabled;
    property public final boolean playEnabled;
    property public final boolean playPauseEnabled;
    property public final boolean playing;
    property public final boolean seekBackEnabled;
    property public final boolean seekForwardEnabled;
    property public final boolean seekToNextEnabled;
    property public final boolean seekToPreviousEnabled;
    property public final boolean shuffleEnabled;
    property public final boolean shuffleOn;
    property public final com.google.android.horologist.media.ui.state.model.TrackPositionUiModel? trackPosition;
  }

  @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public class PlayerViewModel extends androidx.lifecycle.ViewModel {
    ctor public PlayerViewModel(com.google.android.horologist.media.data.repository.PlayerRepository playerRepository);
    method public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.ui.state.PlayerUiState> getPlayerUiState();
    method public final void pause();
    method public final void prepareAndPlay();
    method public final void seekBack();
    method public final void seekForward();
    method public final void seekToNextMediaItem();
    method public final void seekToPreviousMediaItem();
    method public final void toggleShuffle();
    property public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.ui.state.PlayerUiState> playerUiState;
    field public static final com.google.android.horologist.media.ui.state.PlayerViewModel.Companion Companion;
  }

  public static final class PlayerViewModel.Companion {
  }

}

package com.google.android.horologist.media.ui.state.mapper {

  @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public final class MediaItemUiModelMapper {
    method public com.google.android.horologist.media.ui.state.model.MediaItemUiModel map(androidx.media3.common.MediaItem mediaItem);
    field public static final com.google.android.horologist.media.ui.state.mapper.MediaItemUiModelMapper INSTANCE;
  }

  @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public final class PlayerUiStateMapper {
    method public com.google.android.horologist.media.ui.state.PlayerUiState map(androidx.media3.common.Player.Commands playerCommands, boolean shuffleModeEnabled, boolean isPlaying, androidx.media3.common.MediaItem? mediaItem, com.google.android.horologist.media.data.model.TrackPosition? trackPosition);
    field public static final com.google.android.horologist.media.ui.state.mapper.PlayerUiStateMapper INSTANCE;
  }

  @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public final class TrackPositionUiModelMapper {
    method public com.google.android.horologist.media.ui.state.model.TrackPositionUiModel map(com.google.android.horologist.media.data.model.TrackPosition trackPosition);
    field public static final com.google.android.horologist.media.ui.state.mapper.TrackPositionUiModelMapper INSTANCE;
  }

}

package com.google.android.horologist.media.ui.state.model {

  @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public final class MediaItemUiModel {
    ctor public MediaItemUiModel(optional String? title, optional String? artist);
    method public String? component1();
    method public String? component2();
    method public com.google.android.horologist.media.ui.state.model.MediaItemUiModel copy(String? title, String? artist);
    method public String? getArtist();
    method public String? getTitle();
    property public final String? artist;
    property public final String? title;
  }

  @com.google.android.horologist.media.ui.ExperimentalMediaUiApi public final class TrackPositionUiModel {
    ctor public TrackPositionUiModel(long current, long duration, float percent);
    method public long component1();
    method public long component2();
    method public float component3();
    method public com.google.android.horologist.media.ui.state.model.TrackPositionUiModel copy(long current, long duration, float percent);
    method public long getCurrent();
    method public long getDuration();
    method public float getPercent();
    property public final long current;
    property public final long duration;
    property public final float percent;
  }

}

package com.google.android.horologist.media.ui.utils {

  public final class StateWithLifecycleKt {
  }

}

