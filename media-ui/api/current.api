// Signature format: 4.0
package com.google.android.horologist.media.ui {

  @kotlin.RequiresOptIn(message="Horologist Media UI is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalHorologistMediaUiApi {
  }

  public final class FigmaPlayerScreenTest {
    ctor public FigmaPlayerScreenTest(error.NonExistentClass deviceConfig);
    method public static error.NonExistentClass! devices();
    method public error.NonExistentClass! getPaparazzi();
    method public void mediaPlayerScreen();
    property public final error.NonExistentClass! paparazzi;
    field public static final com.google.android.horologist.media.ui.FigmaPlayerScreenTest.Companion Companion;
  }

  public static final class FigmaPlayerScreenTest.Companion {
    method public error.NonExistentClass! devices();
  }

  public final class FigmaPlayerScreenTestKt {
    method @androidx.compose.runtime.Composable public static void UampSettingsButtons(com.google.android.horologist.audio.VolumeState volumeState, kotlin.jvm.functions.Function0<kotlin.Unit> onVolumeClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled);
  }

  public final class FigmaVolumeScreenTest {
    ctor public FigmaVolumeScreenTest();
    method public error.NonExistentClass! getPaparazzi();
    method public void volumePlayerScreen();
    property public final error.NonExistentClass! paparazzi;
  }

  public final class FigmaVolumeScreenTestKt {
    method @androidx.compose.runtime.Composable public static void UampRoundPreview(kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  public final class MediaPlayerA11yScreenshotTest {
    ctor public MediaPlayerA11yScreenshotTest(error.NonExistentClass device);
    method public static error.NonExistentClass! devices();
    method public com.google.android.horologist.compose.tools.a11y.ComposeA11yExtension getComposeA11yExtension();
    method public error.NonExistentClass! getPaparazzi();
    method public void mediaPlayer();
    property public final com.google.android.horologist.compose.tools.a11y.ComposeA11yExtension composeA11yExtension;
    property public final error.NonExistentClass! paparazzi;
    field public static final com.google.android.horologist.media.ui.MediaPlayerA11yScreenshotTest.Companion Companion;
  }

  public static final class MediaPlayerA11yScreenshotTest.Companion {
    method public error.NonExistentClass! devices();
  }

  public final class MediaPlayerDeviceScreenTest {
    ctor public MediaPlayerDeviceScreenTest(error.NonExistentClass device);
    method public static error.NonExistentClass! devices();
    method public error.NonExistentClass! getPaparazzi();
    method public void mediaPlayerScreen();
    property public final error.NonExistentClass! paparazzi;
    field public static final com.google.android.horologist.media.ui.MediaPlayerDeviceScreenTest.Companion Companion;
  }

  public static final class MediaPlayerDeviceScreenTest.Companion {
    method public error.NonExistentClass! devices();
  }

  public final class MediaPlayerScreenTest {
    ctor public MediaPlayerScreenTest(com.google.android.horologist.compose.tools.ThemeValues themeValue);
    method public static java.util.List<com.google.android.horologist.compose.tools.ThemeValues> colours();
    method public error.NonExistentClass! getPaparazzi();
    method public void mediaPlayerScreen();
    property public final error.NonExistentClass! paparazzi;
    field public static final com.google.android.horologist.media.ui.MediaPlayerScreenTest.Companion Companion;
  }

  public static final class MediaPlayerScreenTest.Companion {
    method public java.util.List<com.google.android.horologist.compose.tools.ThemeValues> colours();
  }

  public final class MediaPlayerStatesScreenTest {
    ctor public MediaPlayerStatesScreenTest(com.google.android.horologist.media.ui.MediaPlayerStatesScreenTest.State state);
    method public error.NonExistentClass! getPaparazzi();
    method public void mediaPlayerScreen();
    method public static java.util.List<com.google.android.horologist.media.ui.MediaPlayerStatesScreenTest.State> states();
    property public final error.NonExistentClass! paparazzi;
    field public static final com.google.android.horologist.media.ui.MediaPlayerStatesScreenTest.Companion Companion;
  }

  public static final class MediaPlayerStatesScreenTest.Companion {
    method public java.util.List<com.google.android.horologist.media.ui.MediaPlayerStatesScreenTest.State> states();
  }

  public static final class MediaPlayerStatesScreenTest.State {
    ctor public MediaPlayerStatesScreenTest.State(boolean connected, boolean media, String name);
    method public boolean component1();
    method public boolean component2();
    method public String component3();
    method public com.google.android.horologist.media.ui.MediaPlayerStatesScreenTest.State copy(boolean connected, boolean media, String name);
    method public boolean getConnected();
    method public boolean getMedia();
    method public String getName();
    property public final boolean connected;
    property public final boolean media;
    property public final String name;
  }

  public final class MediaPlayerTestCaseKt {
    method @androidx.compose.runtime.Composable public static void MediaPlayerTestCase(com.google.android.horologist.media.ui.state.PlayerUiState playerUiState, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> mediaDisplay, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> controlButtons, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> buttons, optional androidx.wear.compose.material.Colors colors, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> background, optional String time, optional boolean round);
  }

  public final class PlayerLibraryPreviewKt {
    method @androidx.compose.runtime.Composable public static void PlayerLibraryPreview(optional androidx.wear.compose.foundation.lazy.ScalingLazyListState? state, optional boolean round, kotlin.jvm.functions.Function0<kotlin.Unit> function);
  }

  public final class PodcastPlayerScreenTest {
    ctor public PodcastPlayerScreenTest(com.google.android.horologist.media.ui.PodcastPlayerScreenTest.PodcastOptions options);
    method public error.NonExistentClass! getPaparazzi();
    method public void mediaPlayerScreen();
    method public static java.util.List<com.google.android.horologist.media.ui.PodcastPlayerScreenTest.PodcastOptions> options();
    property public final error.NonExistentClass! paparazzi;
    field public static final com.google.android.horologist.media.ui.PodcastPlayerScreenTest.Companion Companion;
  }

  public static final class PodcastPlayerScreenTest.Companion {
    method public java.util.List<com.google.android.horologist.media.ui.PodcastPlayerScreenTest.PodcastOptions> options();
  }

  public static final class PodcastPlayerScreenTest.PodcastOptions {
    ctor public PodcastPlayerScreenTest.PodcastOptions(com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekBackButtonIncrement, com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekForwardButtonIncrement);
    method public com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement component1();
    method public com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement component2();
    method public com.google.android.horologist.media.ui.PodcastPlayerScreenTest.PodcastOptions copy(com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekBackButtonIncrement, com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekForwardButtonIncrement);
    method public com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement getSeekBackButtonIncrement();
    method public com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement getSeekForwardButtonIncrement();
    property public final com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekBackButtonIncrement;
    property public final com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekForwardButtonIncrement;
  }

  public final class ProgressStateHolderTest {
    ctor public ProgressStateHolderTest();
    method public error.NonExistentClass! getComposeTestRule();
    method public error.NonExistentClass! givenPredictiveProgress_predictsProgress();
    method public error.NonExistentClass! givenPredictiveProgress_usesTimestampForInitialValue();
    property public final error.NonExistentClass! composeTestRule;
  }

}

package com.google.android.horologist.media.ui.complication {

  public final class MediaStatusTemplate extends com.google.android.horologist.tiles.complication.TypedComplicationTemplate<com.google.android.horologist.media.ui.complication.MediaStatusTemplate.Data> {
    ctor public MediaStatusTemplate(android.content.Context context);
    method public com.google.android.horologist.media.ui.complication.MediaStatusTemplate.Data previewData();
    method public androidx.wear.watchface.complications.data.LongTextComplicationData renderLongText(com.google.android.horologist.media.ui.complication.MediaStatusTemplate.Data data);
    method public androidx.wear.watchface.complications.data.ShortTextComplicationData renderShortText(com.google.android.horologist.media.ui.complication.MediaStatusTemplate.Data data);
    method public androidx.wear.watchface.complications.data.SmallImageComplicationData? renderSmallImage(com.google.android.horologist.media.ui.complication.MediaStatusTemplate.Data data);
  }

  public static final class MediaStatusTemplate.Data {
    ctor public MediaStatusTemplate.Data(optional @DrawableRes Integer? appIconRes, optional android.graphics.drawable.Icon? icon, androidx.wear.watchface.complications.data.SmallImageType type, String title, String text, android.app.PendingIntent? launchIntent);
    method public Integer? component1();
    method public android.graphics.drawable.Icon? component2();
    method public androidx.wear.watchface.complications.data.SmallImageType component3();
    method public String component4();
    method public String component5();
    method public android.app.PendingIntent? component6();
    method public com.google.android.horologist.media.ui.complication.MediaStatusTemplate.Data copy(@DrawableRes Integer? appIconRes, android.graphics.drawable.Icon? icon, androidx.wear.watchface.complications.data.SmallImageType type, String title, String text, android.app.PendingIntent? launchIntent);
    method public Integer? getAppIconRes();
    method public android.graphics.drawable.Icon? getIcon();
    method public android.app.PendingIntent? getLaunchIntent();
    method public String getText();
    method public String getTitle();
    method public androidx.wear.watchface.complications.data.SmallImageType getType();
    property public final Integer? appIconRes;
    property public final android.graphics.drawable.Icon? icon;
    property public final android.app.PendingIntent? launchIntent;
    property public final String text;
    property public final String title;
    property public final androidx.wear.watchface.complications.data.SmallImageType type;
  }

}

package com.google.android.horologist.media.ui.components {

  public final class ControlButtonLayoutKt {
    method @androidx.compose.runtime.Composable public static void ControlButtonLayout(kotlin.jvm.functions.Function0<kotlin.Unit> leftButton, kotlin.jvm.functions.Function0<kotlin.Unit> middleButton, kotlin.jvm.functions.Function0<kotlin.Unit> rightButton, optional androidx.compose.ui.Modifier modifier);
  }

  public final class DefaultMediaDisplayKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void DefaultMediaDisplay(com.google.android.horologist.media.ui.state.model.MediaUiModel? media, optional androidx.compose.ui.Modifier modifier);
  }

  public final class DefaultMediaDisplayPreviewKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreview public static void DefaultMediaDisplayPreview();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="With long text", backgroundColor=4278190080L, showBackground=true) public static void DefaultMediaDisplayPreviewLongText();
  }

  public final class EntityButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void EntityButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, androidx.compose.ui.graphics.vector.ImageVector icon, String contentDescription, optional androidx.compose.ui.Modifier modifier, optional boolean enabled);
  }

  public final class EntityButtonPreviewKt {
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Disabled", backgroundColor=4278190080L, showBackground=true) public static void EntityButtonPreviewDisabled();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Enabled", backgroundColor=4278190080L, showBackground=true) public static void EntityButtonPreviewEnabled();
  }

  public final class InfoMediaDisplayKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void InfoMediaDisplay(optional androidx.compose.ui.Modifier modifier, optional String? message);
  }

  public final class LoadingMediaDisplayKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void LoadingMediaDisplay(optional androidx.compose.ui.Modifier modifier);
  }

  public final class MediaArtworkA11yTest {
    ctor public MediaArtworkA11yTest();
    method public void a11y();
    method public error.NonExistentClass! getPaparazzi();
    property public final error.NonExistentClass! paparazzi;
  }

  public final class MediaArtworkKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void MediaArtwork(com.google.android.horologist.media.ui.state.model.MediaUiModel media, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.graphics.painter.Painter? placeholder);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void MediaArtwork(Object? artworkUri, String? contentDescription, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.graphics.painter.Painter? placeholder);
  }

  public final class MediaArtworkPreviewKt {
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(backgroundColor=0L, showBackground=true) public static void MediaArtworkPreview();
  }

  public final class MediaChipA11yTest {
    ctor public MediaChipA11yTest();
    method public void a11y();
    method public error.NonExistentClass! getPaparazzi();
    property public final error.NonExistentClass! paparazzi;
  }

  public final class MediaChipKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void MediaChip(com.google.android.horologist.media.ui.state.model.MediaUiModel media, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional String defaultTitle, optional androidx.compose.ui.graphics.painter.Painter? placeholder);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void MediaChip(String title, Object? artworkUri, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.graphics.painter.Painter? placeholder);
  }

  public final class MediaChipPreviewKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreview public static void MediaChipPreview();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="No artwork", backgroundColor=4278190080L, showBackground=true) public static void MediaChipPreviewNoArtwork();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="No title", backgroundColor=4278190080L, showBackground=true) public static void MediaChipPreviewNoTitle();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Very long title", backgroundColor=4278190080L, showBackground=true) public static void MediaChipPreviewVeryLongTitle();
  }

  public final class MediaChipTest {
    ctor public MediaChipTest();
    method public error.NonExistentClass! getPaparazzi();
    method public void givenMediaWithArtwork_thenDisplaysArtwork();
    method public void givenMediaWithNOArtwork_thenDoesNOTDisplayArtwork();
    method public void givenModifier_thenAppliesModifierCorrectly();
    method public void givenNOTitle_thenDisplaysDefaultTitle();
    method public void givenVeryLongTitle_thenEllipsizeAt2ndLine();
    property public final error.NonExistentClass! paparazzi;
  }

  public final class MediaControlButtonsKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void MediaControlButtons(kotlin.jvm.functions.Function0<kotlin.Unit> onPlayButtonClick, kotlin.jvm.functions.Function0<kotlin.Unit> onPauseButtonClick, boolean playPauseButtonEnabled, boolean playing, kotlin.jvm.functions.Function0<kotlin.Unit> onSeekToPreviousButtonClick, boolean seekToPreviousButtonEnabled, kotlin.jvm.functions.Function0<kotlin.Unit> onSeekToNextButtonClick, boolean seekToNextButtonEnabled, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material.ButtonColors colors);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void MediaControlButtons(kotlin.jvm.functions.Function0<kotlin.Unit> onPlayButtonClick, kotlin.jvm.functions.Function0<kotlin.Unit> onPauseButtonClick, boolean playPauseButtonEnabled, boolean playing, kotlin.jvm.functions.Function0<kotlin.Unit> onSeekToPreviousButtonClick, boolean seekToPreviousButtonEnabled, kotlin.jvm.functions.Function0<kotlin.Unit> onSeekToNextButtonClick, boolean seekToNextButtonEnabled, optional androidx.compose.ui.Modifier modifier, com.google.android.horologist.media.ui.state.model.TrackPositionUiModel trackPositionUiModel, optional androidx.wear.compose.material.ButtonColors colors);
  }

  public final class MediaControlButtonsPreviewKt {
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Enabled - Playing - With progress", backgroundColor=4278190080L, showBackground=true) public static void MediaControlButtonsPreview();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Disabled - Not playing - Without progress", backgroundColor=4278190080L, showBackground=true) public static void MediaControlButtonsPreviewNoProgress();
  }

  public final class MediaControlButtonsTest {
    ctor public MediaControlButtonsTest();
    method public error.NonExistentClass! getComposeTestRule();
    method public void givenIsNOTPlayingAndPlayPauseEnabledIsTrue_thenPlayButtonIsEnabled();
    method public void givenIsNOTPlaying_thenPlayButtonIsDisplayed();
    method public void givenIsNOTPlaying_whenPlayIsClicked_thenCorrectEventIsTriggered();
    method public void givenIsPlayingAndPlayPauseEnabledIsTrue_thenPauseButtonIsEnabled();
    method public void givenIsPlaying_thenPauseButtonIsDisplayed();
    method public void givenIsPlaying_whenPauseIsClicked_thenCorrectEventIsTriggered();
    method public void givenNOPercentParam_thenNOProgressBarIsDisplayed();
    method public void givenSeekToNextButtonEnabledIsTrue_thenSeekToNextButtonIsEnabled();
    method public void givenSeekToPreviousButtonEnabledIsTrue_thenSeekToPreviousButtonIsEnabled();
    method public void whenSeekToNextIsClicked_thenCorrectEventIsTriggered();
    method public void whenSeekToPreviousIsClicked_thenCorrectEventIsTriggered();
    property public final error.NonExistentClass! composeTestRule;
  }

  public final class MediaControlButtonsWithProgressTest {
    ctor public MediaControlButtonsWithProgressTest();
    method public error.NonExistentClass! getComposeTestRule();
    method public void givenIsNOTPlayingAndPlayPauseEnabledIsTrue_thenPlayButtonIsEnabled();
    method public void givenIsNOTPlaying_thenPlayButtonIsDisplayed();
    method public void givenIsNOTPlaying_whenPlayIsClicked_thenCorrectEventIsTriggered();
    method public void givenIsPlayingAndPlayPauseEnabledIsTrue_thenPauseButtonIsEnabled();
    method public void givenIsPlaying_thenPauseButtonIsDisplayed();
    method public void givenIsPlaying_whenPauseIsClicked_thenCorrectEventIsTriggered();
    method public void givenPercentParam_thenProgressBarIsDisplayed();
    method public void givenSeekToNextButtonEnabledIsTrue_thenSeekToNextButtonIsEnabled();
    method public void givenSeekToPreviousButtonEnabledIsTrue_thenSeekToPreviousButtonIsEnabled();
    method public void whenSeekToNextIsClicked_thenCorrectEventIsTriggered();
    method public void whenSeekToPreviousIsClicked_thenCorrectEventIsTriggered();
    property public final error.NonExistentClass! composeTestRule;
  }

  public final class PlayPauseButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void PlayPauseButton(kotlin.jvm.functions.Function0<kotlin.Unit> onPlayClick, kotlin.jvm.functions.Function0<kotlin.Unit> onPauseClick, boolean playing, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors, optional float iconSize, optional long tapTargetSize, optional kotlin.jvm.functions.Function0<kotlin.Unit> progress);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void PlayPauseProgressButton(kotlin.jvm.functions.Function0<kotlin.Unit> onPlayClick, kotlin.jvm.functions.Function0<kotlin.Unit> onPauseClick, boolean playing, com.google.android.horologist.media.ui.state.model.TrackPositionUiModel trackPositionUiModel, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors, optional float iconSize, optional long tapTargetSize, optional long progressColour, optional long trackColor, optional long backgroundColor);
  }

  public final class PlayPauseButtonPreviewKt {
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Disabled - Not playing", backgroundColor=4278190080L, showBackground=true) public static void PlayPauseButtonPreviewDisabledNotPlaying();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Disabled - Playing", backgroundColor=4278190080L, showBackground=true) public static void PlayPauseButtonPreviewDisabledPlaying();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Enabled - Not playing", backgroundColor=4278190080L, showBackground=true) public static void PlayPauseButtonPreviewNotPlaying();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Enabled - Playing", backgroundColor=4278190080L, showBackground=true) public static void PlayPauseButtonPreviewPlaying();
  }

  public final class PlayPauseButtonTest {
    ctor public PlayPauseButtonTest();
    method public error.NonExistentClass! getComposeTestRule();
    method public void givenIsNOTPlaying_thenPlayButtonIsDisplayed();
    method public void givenIsPlaying_thenPauseButtonIsDisplayed();
    property public final error.NonExistentClass! composeTestRule;
  }

  public final class PlayPauseProgressButtonPreviewKt {
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Enabled - Playing - Progress 0%", backgroundColor=4278190080L, showBackground=true) public static void PlayPauseProgressButtonPreview0();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Enabled - Not playing - Progress 100%", backgroundColor=4278190080L, showBackground=true) public static void PlayPauseProgressButtonPreview100();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Disabled - Not playing - Progress 25%", backgroundColor=4278190080L, showBackground=true) public static void PlayPauseProgressButtonPreview25();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Disabled - Playing - Progress 75%", backgroundColor=4278190080L, showBackground=true) public static void PlayPauseProgressButtonPreview75();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="On Background - Progress 50%", backgroundColor=4278190080L, showBackground=true) public static void PlayPauseProgressButtonPreviewOnWhite();
  }

  public final class PlayPauseProgressButtonTest {
    ctor public PlayPauseProgressButtonTest();
    method public error.NonExistentClass! getComposeTestRule();
    method public void givenIsNOTPlaying_thenPlayButtonIsDisplayed();
    method public void givenIsPlaying_thenPauseButtonIsDisplayed();
    method public void givenMediaProgress_thenProgressIsCorrect();
    method public void givenPredictiveMediaProgress_thenProgressIsChanging();
    property public final error.NonExistentClass! composeTestRule;
  }

  public final class PodcastControlButtonsKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void PodcastControlButtons(com.google.android.horologist.media.ui.state.PlayerUiController playerController, com.google.android.horologist.media.ui.state.PlayerUiState playerUiState, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material.ButtonColors colors);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void PodcastControlButtons(kotlin.jvm.functions.Function0<kotlin.Unit> onPlayButtonClick, kotlin.jvm.functions.Function0<kotlin.Unit> onPauseButtonClick, boolean playPauseButtonEnabled, boolean playing, kotlin.jvm.functions.Function0<kotlin.Unit> onSeekBackButtonClick, boolean seekBackButtonEnabled, kotlin.jvm.functions.Function0<kotlin.Unit> onSeekForwardButtonClick, boolean seekForwardButtonEnabled, optional androidx.compose.ui.Modifier modifier, optional com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekBackButtonIncrement, optional com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekForwardButtonIncrement, optional androidx.wear.compose.material.ButtonColors colors);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void PodcastControlButtons(kotlin.jvm.functions.Function0<kotlin.Unit> onPlayButtonClick, kotlin.jvm.functions.Function0<kotlin.Unit> onPauseButtonClick, boolean playPauseButtonEnabled, boolean playing, kotlin.jvm.functions.Function0<kotlin.Unit> onSeekBackButtonClick, boolean seekBackButtonEnabled, kotlin.jvm.functions.Function0<kotlin.Unit> onSeekForwardButtonClick, boolean seekForwardButtonEnabled, com.google.android.horologist.media.ui.state.model.TrackPositionUiModel trackPositionUiModel, optional androidx.compose.ui.Modifier modifier, optional com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekBackButtonIncrement, optional com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekForwardButtonIncrement, optional androidx.wear.compose.material.ButtonColors colors);
  }

  public final class PodcastControlButtonsPreviewKt {
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Enabled - Playing - With progress", backgroundColor=4278190080L, showBackground=true) public static void PodcastControlButtonsPreview();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Disabled - Not playing - Without progress", backgroundColor=4278190080L, showBackground=true) public static void PodcastControlButtonsPreviewNoProgress();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Enabled - Playing - With progress", backgroundColor=4278190080L, showBackground=true) public static void PodcastControlButtonsPreviewUnknown();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(backgroundColor=4287137792L, showBackground=true) public static void PodcastControlDisabledLightBackground();
  }

  public final class PodcastControlButtonsTest {
    ctor public PodcastControlButtonsTest();
    method public error.NonExistentClass! getComposeTestRule();
    method public void givenIsNOTPlayingAndPlayPauseEnabledIsTrue_thenPlayButtonIsEnabled();
    method public void givenIsNOTPlaying_thenPlayButtonIsDisplayed();
    method public void givenIsNOTPlaying_whenPlayIsClicked_thenCorrectEventIsTriggered();
    method public void givenIsPlayingAndPlayPauseEnabledIsTrue_thenPauseButtonIsEnabled();
    method public void givenIsPlaying_thenPauseButtonIsDisplayed();
    method public void givenIsPlaying_whenPauseIsClicked_thenCorrectEventIsTriggered();
    method public void givenNoPercentParam_thenNOProgressBarIsDisplayed();
    method public void givenSeekBackButtonEnabledIsTrue_thenSeekBackButtonIsEnabled();
    method public void givenSeekBackIncrementIsFive_thenSeekBackDescriptionIsFive();
    method public void givenSeekForwardButtonEnabledIsTrue_thenSeekForwardButtonIsEnabled();
    method public void givenSeekForwardIncrementIsFive_thenSeekForwardDescriptionIsFive();
    method public void whenSeekBackIsClicked_thenCorrectEventIsTriggered();
    method public void whenSeekForwardIsClicked_thenCorrectEventIsTriggered();
    property public final error.NonExistentClass! composeTestRule;
  }

  public final class PodcastControlButtonsWithProgressTest {
    ctor public PodcastControlButtonsWithProgressTest();
    method public error.NonExistentClass! getComposeTestRule();
    method public void givenIsNOTPlayingAndPlayPauseEnabledIsTrue_thenPlayButtonIsEnabled();
    method public void givenIsNOTPlaying_thenPlayButtonIsDisplayed();
    method public void givenIsNOTPlaying_whenPlayIsClicked_thenCorrectEventIsTriggered();
    method public void givenIsPlayingAndPlayPauseEnabledIsTrue_thenPauseButtonIsEnabled();
    method public void givenIsPlaying_thenPauseButtonIsDisplayed();
    method public void givenIsPlaying_whenPauseIsClicked_thenCorrectEventIsTriggered();
    method public void givenPercentParam_thenProgressBarIsDisplayed();
    method public void givenSeekBackButtonEnabledIsTrue_thenSeekBackButtonIsEnabled();
    method public void givenSeekBackIncrementIsFive_thenSeekBackDescriptionIsFive();
    method public void givenSeekForwardButtonEnabledIsTrue_thenSeekForwardButtonIsEnabled();
    method public void givenSeekForwardIncrementIsFive_thenSeekForwardDescriptionIsFive();
    method public void whenSeekBackIsClicked_thenCorrectEventIsTriggered();
    method public void whenSeekForwardIsClicked_thenCorrectEventIsTriggered();
    property public final error.NonExistentClass! composeTestRule;
  }

  public final class PositionedStateKt {
    method @androidx.compose.runtime.Composable public static com.google.android.horologist.compose.layout.ScalingLazyColumnState positionedState(int topIndex, int topScrollOffset);
  }

  public final class TextMediaDisplayKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void TextMediaDisplay(optional androidx.compose.ui.Modifier modifier, optional String? title, optional String? subtitle);
  }

  public final class TextMediaDisplayPreviewKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreview public static void TextMediaDisplayPreview();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="With long text", backgroundColor=4278190080L, showBackground=true) public static void TextMediaDisplayPreviewLongText();
  }

}

package com.google.android.horologist.media.ui.components.actions {

  public final class ShowPlaylistChipA11yTest {
    ctor public ShowPlaylistChipA11yTest();
    method public void a11y();
    method public error.NonExistentClass! getPaparazzi();
    property public final error.NonExistentClass! paparazzi;
  }

  public final class ShowPlaylistChipKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void ShowPlaylistChip(Object? artworkUri, String? name, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.graphics.painter.Painter? placeholder);
  }

  public final class ShowPlaylistChipPreviewKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreview public static void ShowPlaylistChipPreview();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="No artwork", backgroundColor=4278190080L, showBackground=true) public static void ShowPlaylistChipPreviewNoArtwork();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="No name", backgroundColor=4278190080L, showBackground=true) public static void ShowPlaylistChipPreviewNoName();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Very long name", backgroundColor=4278190080L, showBackground=true) public static void ShowPlaylistChipPreviewVeryLongName();
  }

  public final class ShowPlaylistChipTest {
    ctor public ShowPlaylistChipTest();
    method public error.NonExistentClass! getPaparazzi();
    method public void givenArtwork_thenDisplaysArtwork();
    method public void givenNOArtwork_thenDoesNOTDisplayArtwork();
    method public void givenNOName_thenDoesDisplayArtwork();
    method public void givenVeryLongTitle_thenEllipsizeAt2ndLine();
    property public final error.NonExistentClass! paparazzi;
  }

}

package com.google.android.horologist.media.ui.components.animated {

  public final class AnimatedMediaButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void AnimatedMediaButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, com.airbnb.lottie.LottieComposition? composition, com.airbnb.lottie.compose.LottieAnimatable lottieAnimatable, String contentDescription, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors, optional com.airbnb.lottie.compose.LottieDynamicProperties? dynamicProperties, optional float iconSize, optional long tapTargetSize, optional androidx.compose.ui.Alignment.Horizontal iconAlign);
  }

  public final class AnimatedMediaControlButtonsKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void AnimatedMediaControlButtons(kotlin.jvm.functions.Function0<kotlin.Unit> onPlayButtonClick, kotlin.jvm.functions.Function0<kotlin.Unit> onPauseButtonClick, boolean playPauseButtonEnabled, boolean playing, kotlin.jvm.functions.Function0<kotlin.Unit> onSeekToPreviousButtonClick, boolean seekToPreviousButtonEnabled, kotlin.jvm.functions.Function0<kotlin.Unit> onSeekToNextButtonClick, boolean seekToNextButtonEnabled, optional androidx.compose.ui.Modifier modifier, com.google.android.horologist.media.ui.state.model.TrackPositionUiModel trackPositionUiModel, optional androidx.wear.compose.material.ButtonColors colors);
  }

  public final class AnimatedPlayPauseButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void AnimatedPlayPauseButton(kotlin.jvm.functions.Function0<kotlin.Unit> onPlayClick, kotlin.jvm.functions.Function0<kotlin.Unit> onPauseClick, boolean playing, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors, optional float iconSize, optional long tapTargetSize, optional kotlin.jvm.functions.Function0<kotlin.Unit> progress);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void AnimatedPlayPauseProgressButton(kotlin.jvm.functions.Function0<kotlin.Unit> onPlayClick, kotlin.jvm.functions.Function0<kotlin.Unit> onPauseClick, boolean playing, float percent, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors, optional float iconSize, optional long tapTargetSize, optional long progressColour, optional long trackColor, optional long backgroundColor);
  }

  public final class AnimatedPlayerScreenMediaDisplayKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void AnimatedPlayerScreenMediaDisplay(com.google.android.horologist.media.ui.state.PlayerUiState playerUiState, optional androidx.compose.ui.Modifier modifier);
  }

  public final class AnimatedSeekToNextButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void AnimatedSeekToNextButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors, optional float iconSize, optional long tapTargetSize);
  }

  public final class AnimatedSeekToNextButtonPreviewKt {
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Disabled", backgroundColor=4278190080L, showBackground=true) public static void AnimatedSeekToNextButtonPreviewDisabled();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Enabled", backgroundColor=4278190080L, showBackground=true) public static void AnimatedSeekToNextButtonPreviewEnabled();
  }

  public final class AnimatedSeekToPreviousButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void AnimatedSeekToPreviousButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors, optional float iconSize, optional long tapTargetSize);
  }

  public final class MarqueeTextMediaDisplayKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void MarqueeTextMediaDisplay(optional androidx.compose.ui.Modifier modifier, optional String? title, optional String? artist);
  }

}

package com.google.android.horologist.media.ui.components.background {

  public final class ArtworkColorBackgroundKt {
    method @androidx.compose.runtime.Composable public static void ArtworkColorBackground(Object? artworkUri, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.graphics.Color? defaultColor);
    method @androidx.compose.runtime.Composable public static void ColorBackground(androidx.compose.ui.graphics.Color? color, optional androidx.compose.ui.Modifier modifier);
  }

  public final class RadialBackgroundKt {
    method @androidx.compose.runtime.Composable public static void RadialBackground(androidx.compose.ui.graphics.Color? color);
  }

}

package com.google.android.horologist.media.ui.components.controls {

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public final class MediaButtonDefaults {
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material.ButtonColors getMediaButtonDefaultColors();
    method public androidx.compose.ui.graphics.vector.ImageVector seekBackIcon(com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekButtonIncrement);
    method public androidx.compose.ui.graphics.vector.ImageVector seekForwardIcon(com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekButtonIncrement);
    property @androidx.compose.runtime.Composable public final androidx.wear.compose.material.ButtonColors mediaButtonDefaultColors;
    field public static final com.google.android.horologist.media.ui.components.controls.MediaButtonDefaults INSTANCE;
  }

  public final class MediaButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void MediaButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, androidx.compose.ui.graphics.vector.ImageVector icon, String contentDescription, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors, optional float iconSize, optional long tapTargetSize, optional androidx.compose.ui.Alignment.Horizontal iconAlign);
  }

  public final class MediaButtonPreviewKt {
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Pause - Disabled", backgroundColor=4278190080L, showBackground=true) public static void MediaButtonPreviewPauseDisabled();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Play - Enabled", backgroundColor=4278190080L, showBackground=true) public static void MediaButtonPreviewPlayEnabled();
  }

  public final class PauseButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void PauseButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors, optional float iconSize, optional long tapTargetSize);
  }

  public final class PauseButtonPreviewKt {
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Disabled", backgroundColor=4278190080L, showBackground=true) public static void PauseButtonPreviewDisabled();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Enabled", backgroundColor=4278190080L, showBackground=true) public static void PauseButtonPreviewEnabled();
  }

  public final class PlayButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void PlayButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors, optional float iconSize, optional long tapTargetSize);
  }

  public final class PlayButtonPreviewKt {
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Disabled", backgroundColor=4278190080L, showBackground=true) public static void PlayButtonPreviewDisabled();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Enabled", backgroundColor=4278190080L, showBackground=true) public static void PlayButtonPreviewEnabled();
  }

  public final class SeekBackButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void SeekBackButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekButtonIncrement, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.graphics.vector.ImageVector icon, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors, optional float iconSize, optional long tapTargetSize);
  }

  public final class SeekBackButtonPreviewKt {
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="10 seconds increment - Disabled", backgroundColor=4278190080L, showBackground=true) public static void SeekBackButtonPreview10();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="30 seconds increment - Enabled", backgroundColor=4278190080L, showBackground=true) public static void SeekBackButtonPreview30();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="5 seconds increment - Enabled", backgroundColor=4278190080L, showBackground=true) public static void SeekBackButtonPreview5();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Other amount of seconds increment - Disabled", backgroundColor=4278190080L, showBackground=true) public static void SeekBackButtonPreviewOther();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Unknown amount of seconds increment - Enabled", backgroundColor=4278190080L, showBackground=true) public static void SeekBackButtonPreviewUnknown();
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public abstract sealed class SeekButtonIncrement {
    field public static final com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement.Companion Companion;
  }

  public static final class SeekButtonIncrement.Companion {
    method public com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement getFive();
    method public com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement getTen();
    method public com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement getThirty();
    method public com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement ofDuration(long duration);
    property public final com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement Five;
    property public final com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement Ten;
    property public final com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement Thirty;
  }

  public static final class SeekButtonIncrement.Known extends com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement {
    ctor public SeekButtonIncrement.Known(int seconds);
    method public int component1();
    method public com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement.Known copy(int seconds);
    method public int getSeconds();
    property public final int seconds;
  }

  public static final class SeekButtonIncrement.Unknown extends com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement {
    field public static final com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement.Unknown INSTANCE;
  }

  public final class SeekForwardButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void SeekForwardButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekButtonIncrement, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.graphics.vector.ImageVector icon, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors, optional float iconSize, optional long tapTargetSize);
  }

  public final class SeekForwardButtonPreviewKt {
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="10 seconds increment - Disabled", backgroundColor=4278190080L, showBackground=true) public static void SeekForwardButtonPreview10();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="30 seconds increment - Enabled", backgroundColor=4278190080L, showBackground=true) public static void SeekForwardButtonPreview30();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="5 seconds increment - Enabled", backgroundColor=4278190080L, showBackground=true) public static void SeekForwardButtonPreview5();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Other amount of seconds increment - Disabled", backgroundColor=4278190080L, showBackground=true) public static void SeekForwardButtonPreviewOther();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Unknown amount of seconds increment - Enabled", backgroundColor=4278190080L, showBackground=true) public static void SeekForwardButtonPreviewUnknown();
  }

  public final class SeekToNextButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void SeekToNextButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors, optional float iconSize, optional long tapTargetSize);
  }

  public final class SeekToNextButtonPreviewKt {
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Disabled", backgroundColor=4278190080L, showBackground=true) public static void SeekToNextButtonPreviewDisabled();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Enabled", backgroundColor=4278190080L, showBackground=true) public static void SeekToNextButtonPreviewEnabled();
  }

  public final class SeekToPreviousButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void SeekToPreviousButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors, optional float iconSize, optional long tapTargetSize);
  }

  public final class SeekToPreviousButtonPreviewKt {
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Disabled", backgroundColor=4278190080L, showBackground=true) public static void SeekToPreviousButtonPreviewDisabled();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Enabled", backgroundColor=4278190080L, showBackground=true) public static void SeekToPreviousButtonPreviewEnabled();
  }

  public final class ShuffleToggleButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void ShuffleToggleButton(boolean shuffleOn, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onToggle, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ToggleButtonColors colors);
  }

  public final class ShuffleToggleButtonPreviewKt {
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Disabled - Off", backgroundColor=4278190080L, showBackground=true) public static void ShuffleButtonPreviewDisabledOff();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Disabled - On", backgroundColor=4278190080L, showBackground=true) public static void ShuffleButtonPreviewDisabledOn();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Enabled - Off", backgroundColor=4278190080L, showBackground=true) public static void ShuffleButtonPreviewEnabledOff();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="Enabled - On", backgroundColor=4278190080L, showBackground=true) public static void ShuffleButtonPreviewEnabledOn();
  }

}

package com.google.android.horologist.media.ui.controls {

  public final class SeekBackButtonA11yTest {
    ctor public SeekBackButtonA11yTest();
    method public error.NonExistentClass! getPaparazzi();
    method public void incrementIsFive();
    method public void incrementIsOther();
    method public void incrementIsTen();
    method public void incrementIsThirty();
    method public void incrementIsUnknown();
    property public final error.NonExistentClass! paparazzi;
  }

  public final class SeekBackButtonTest {
    ctor public SeekBackButtonTest();
    method public error.NonExistentClass! getPaparazzi();
    method public void givenIncrementIsFive_thenIconIsFive();
    method public void givenIncrementIsOtherValue_thenIconIsDefault();
    method public void givenIncrementIsTen_thenIconIsTen();
    method public void givenIncrementIsThirty_thenIconIsThirty();
    method public void givenIncrementIsUnknown_thenIconIsDefault();
    property public final error.NonExistentClass! paparazzi;
  }

  public final class SeekForwardButtonA11yTest {
    ctor public SeekForwardButtonA11yTest();
    method public error.NonExistentClass! getPaparazzi();
    method public void incrementIsFive();
    method public void incrementIsOther();
    method public void incrementIsTen();
    method public void incrementIsThirty();
    method public void incrementIsUnknown();
    property public final error.NonExistentClass! paparazzi;
  }

  public final class SeekForwardButtonTest {
    ctor public SeekForwardButtonTest();
    method public error.NonExistentClass! getPaparazzi();
    method public void givenIncrementIsFive_thenIconIsFive();
    method public void givenIncrementIsOtherValue_thenIconIsDefault();
    method public void givenIncrementIsTen_thenIconIsTen();
    method public void givenIncrementIsThirty_thenIconIsThirty();
    method public void givenIncrementIsUnknown_thenIconIsDefault();
    property public final error.NonExistentClass! paparazzi;
  }

  public final class ShuffleToggleButtonTest {
    ctor public ShuffleToggleButtonTest();
    method public error.NonExistentClass! getPaparazzi();
    method public void givenShuffleIsOff_thenIconIsShuffle();
    method public void givenShuffleIsOn_thenIconIsShuffleOn();
    property public final error.NonExistentClass! paparazzi;
  }

}

package com.google.android.horologist.media.ui.navigation {

  public final class MediaNavController {
    method public void navigateToCollection(androidx.navigation.NavController, String collectionId, String collectionName);
    method public void navigateToCollections(androidx.navigation.NavController);
    method public void navigateToLibrary(androidx.navigation.NavController);
    method public void navigateToMediaItem(androidx.navigation.NavController, String mediaItemId, String? collectionId);
    method public void navigateToPlayer(androidx.navigation.NavController);
    method public void navigateToSettings(androidx.navigation.NavController);
    method public void navigateToVolume(androidx.navigation.NavController);
    field public static final com.google.android.horologist.media.ui.navigation.MediaNavController INSTANCE;
  }

  public final class MediaPlayerScaffoldKt {
    method @androidx.compose.runtime.Composable public static void MediaPlayerScaffold(com.google.android.horologist.media.ui.snackbar.SnackbarViewModel snackbarViewModel, com.google.android.horologist.audio.ui.VolumeViewModel volumeViewModel, kotlin.jvm.functions.Function0<kotlin.Unit> playerScreen, kotlin.jvm.functions.Function1<? super com.google.android.horologist.compose.layout.ScalingLazyColumnState,kotlin.Unit> libraryScreen, kotlin.jvm.functions.Function3<? super java.lang.String,? super java.lang.String,? super com.google.android.horologist.compose.layout.ScalingLazyColumnState,kotlin.Unit> categoryEntityScreen, kotlin.jvm.functions.Function1<? super com.google.android.horologist.compose.layout.ScalingLazyColumnState,kotlin.Unit> mediaEntityScreen, kotlin.jvm.functions.Function1<? super com.google.android.horologist.compose.layout.ScalingLazyColumnState,kotlin.Unit> playlistsScreen, kotlin.jvm.functions.Function1<? super com.google.android.horologist.compose.layout.ScalingLazyColumnState,kotlin.Unit> settingsScreen, String deepLinkPrefix, androidx.navigation.NavHostController navController, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit> volumeScreen, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.Modifier,kotlin.Unit> timeText, optional androidx.compose.foundation.pager.PagerState pagerState, optional androidx.wear.compose.navigation.SwipeDismissableNavHostState navHostState, optional kotlin.jvm.functions.Function1<? super androidx.navigation.NavGraphBuilder,kotlin.Unit> additionalNavRoutes);
  }

  public class NavigationScreens {
    ctor public NavigationScreens(String navRoute);
    method public java.util.List<androidx.navigation.NavDeepLink> deepLinks(String deepLinkPrefix);
    method public java.util.List<androidx.navigation.NamedNavArgument> getArguments();
    method public final String getNavRoute();
    property public java.util.List<androidx.navigation.NamedNavArgument> arguments;
    property public final String navRoute;
  }

  public static final class NavigationScreens.Collection extends com.google.android.horologist.media.ui.navigation.NavigationScreens {
    method public String destination(String id, String name);
    property public java.util.List<androidx.navigation.NamedNavArgument> arguments;
    field public static final com.google.android.horologist.media.ui.navigation.NavigationScreens.Collection INSTANCE;
    field public static final String id = "id";
    field public static final String name = "name";
  }

  public static final class NavigationScreens.Collections extends com.google.android.horologist.media.ui.navigation.NavigationScreens {
    method public String destination();
    field public static final com.google.android.horologist.media.ui.navigation.NavigationScreens.Collections INSTANCE;
  }

  public static final class NavigationScreens.Login extends com.google.android.horologist.media.ui.navigation.NavigationScreens {
    method public String destination();
    field public static final com.google.android.horologist.media.ui.navigation.NavigationScreens.Login INSTANCE;
  }

  public static final class NavigationScreens.MediaItem extends com.google.android.horologist.media.ui.navigation.NavigationScreens {
    method public String destination(String id, optional String? collectionId);
    method public String getCollectionId();
    method public String getId();
    property public java.util.List<androidx.navigation.NamedNavArgument> arguments;
    property public final String collectionId;
    property public final String id;
    field public static final com.google.android.horologist.media.ui.navigation.NavigationScreens.MediaItem INSTANCE;
  }

  public static final class NavigationScreens.Player extends com.google.android.horologist.media.ui.navigation.NavigationScreens {
    method public String getPage();
    method public Integer? getPageParam(androidx.navigation.NavBackStackEntry backStack, optional boolean remove);
    method public String libraryDestination();
    method public String playerDestination();
    property public java.util.List<androidx.navigation.NamedNavArgument> arguments;
    property public final String page;
    field public static final com.google.android.horologist.media.ui.navigation.NavigationScreens.Player INSTANCE;
  }

  public static final class NavigationScreens.Settings extends com.google.android.horologist.media.ui.navigation.NavigationScreens {
    method public String destination();
    field public static final com.google.android.horologist.media.ui.navigation.NavigationScreens.Settings INSTANCE;
  }

  public static final class NavigationScreens.Volume extends com.google.android.horologist.media.ui.navigation.NavigationScreens {
    method public String destination();
    field public static final com.google.android.horologist.media.ui.navigation.NavigationScreens.Volume INSTANCE;
  }

}

package com.google.android.horologist.media.ui.screens.browse {

  public final class BrowseScreenKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void BrowseScreen(com.google.android.horologist.compose.layout.ScalingLazyColumnState columnState, optional androidx.compose.ui.Modifier modifier, kotlin.jvm.functions.Function1<? super com.google.android.horologist.media.ui.screens.browse.BrowseScreenScope,kotlin.Unit> content);
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public final class BrowseScreenPlaylistsSectionButton {
    ctor public BrowseScreenPlaylistsSectionButton(@StringRes int textId, androidx.compose.ui.graphics.vector.ImageVector icon, kotlin.jvm.functions.Function0<kotlin.Unit> onClick);
    method public int component1();
    method public androidx.compose.ui.graphics.vector.ImageVector component2();
    method public kotlin.jvm.functions.Function0<kotlin.Unit> component3();
    method public com.google.android.horologist.media.ui.screens.browse.BrowseScreenPlaylistsSectionButton copy(@StringRes int textId, androidx.compose.ui.graphics.vector.ImageVector icon, kotlin.jvm.functions.Function0<kotlin.Unit> onClick);
    method public androidx.compose.ui.graphics.vector.ImageVector getIcon();
    method public kotlin.jvm.functions.Function0<kotlin.Unit> getOnClick();
    method public int getTextId();
    property public final androidx.compose.ui.graphics.vector.ImageVector icon;
    property public final kotlin.jvm.functions.Function0<kotlin.Unit> onClick;
    property public final int textId;
  }

  public final class BrowseScreenPreviewKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void BrowseScreenPreview();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void BrowseScreenPreviewFailed();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void BrowseScreenPreviewLoading();
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public final class BrowseScreenScope {
    ctor public BrowseScreenScope();
    method public void button(com.google.android.horologist.media.ui.screens.browse.BrowseScreenPlaylistsSectionButton button);
    method public <T> void downloadsSection(com.google.android.horologist.composables.Section.State<T> state, optional boolean displayFooterOnlyOnLoadedState, kotlin.jvm.functions.Function1<? super com.google.android.horologist.media.ui.screens.browse.BrowseScreenSectionScope<T>,kotlin.Unit> content);
    method public void playlistsSection(java.util.List<com.google.android.horologist.media.ui.screens.browse.BrowseScreenPlaylistsSectionButton> buttons);
    method public <T> void section(com.google.android.horologist.composables.Section.State<T> state, @StringRes int titleId, @StringRes int emptyMessageId, optional @StringRes Integer? failedMessageId, optional boolean displayFooterOnlyOnLoadedState, kotlin.jvm.functions.Function1<? super com.google.android.horologist.media.ui.screens.browse.BrowseScreenSectionScope<T>,kotlin.Unit> content);
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public final class BrowseScreenSectionScope<T> {
    ctor public BrowseScreenSectionScope();
    method public void footer(kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit> content);
    method public void loaded(kotlin.jvm.functions.Function2<? super com.google.android.horologist.composables.SectionContentScope,? super T,kotlin.Unit> content);
    method public void loading(kotlin.jvm.functions.Function1<? super com.google.android.horologist.composables.SectionContentScope,kotlin.Unit> content);
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public abstract sealed class BrowseScreenState {
  }

  public static final class BrowseScreenState.Failed extends com.google.android.horologist.media.ui.screens.browse.BrowseScreenState {
    field public static final com.google.android.horologist.media.ui.screens.browse.BrowseScreenState.Failed INSTANCE;
  }

  public static final class BrowseScreenState.Loaded extends com.google.android.horologist.media.ui.screens.browse.BrowseScreenState {
    ctor public BrowseScreenState.Loaded(java.util.List<? extends com.google.android.horologist.media.ui.state.model.PlaylistDownloadUiModel> downloadList);
    method public java.util.List<com.google.android.horologist.media.ui.state.model.PlaylistDownloadUiModel> component1();
    method public com.google.android.horologist.media.ui.screens.browse.BrowseScreenState.Loaded copy(java.util.List<? extends com.google.android.horologist.media.ui.state.model.PlaylistDownloadUiModel> downloadList);
    method public java.util.List<com.google.android.horologist.media.ui.state.model.PlaylistDownloadUiModel> getDownloadList();
    property public final java.util.List<com.google.android.horologist.media.ui.state.model.PlaylistDownloadUiModel> downloadList;
  }

  public static final class BrowseScreenState.Loading extends com.google.android.horologist.media.ui.screens.browse.BrowseScreenState {
    field public static final com.google.android.horologist.media.ui.screens.browse.BrowseScreenState.Loading INSTANCE;
  }

  public final class PlaylistDownloadBrowseScreenA11yScreenshotTest {
    ctor public PlaylistDownloadBrowseScreenA11yScreenshotTest();
    method public void browseScreen();
    method public error.NonExistentClass! getPaparazzi();
    method public void secondPage();
    property public final error.NonExistentClass! paparazzi;
  }

  public final class PlaylistDownloadBrowseScreenA11yScreenshotTestKt {
  }

  public final class PlaylistDownloadBrowseScreenA11yTallScreenshotTest {
    ctor public PlaylistDownloadBrowseScreenA11yTallScreenshotTest();
    method public void browseScreen();
    method public error.NonExistentClass! getPaparazzi();
    property public final error.NonExistentClass! paparazzi;
  }

  public final class PlaylistDownloadBrowseScreenA11yTallScreenshotTestKt {
    method public static com.google.android.horologist.compose.layout.ScalingLazyColumnState copy(com.google.android.horologist.compose.layout.ScalingLazyColumnState, androidx.wear.compose.foundation.lazy.ScalingParams scalingParams);
    method public static com.google.android.horologist.compose.layout.ScalingLazyColumnState.Factory copy(com.google.android.horologist.compose.layout.ScalingLazyColumnState.Factory, androidx.wear.compose.foundation.lazy.ScalingParams scalingParams);
  }

  public final class PlaylistDownloadBrowseScreenKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void PlaylistDownloadBrowseScreen(com.google.android.horologist.compose.layout.ScalingLazyColumnState columnState, com.google.android.horologist.media.ui.screens.browse.BrowseScreenState browseScreenState, kotlin.jvm.functions.Function1<? super com.google.android.horologist.media.ui.state.model.PlaylistDownloadUiModel,kotlin.Unit> onDownloadItemClick, kotlin.jvm.functions.Function1<? super com.google.android.horologist.media.ui.state.model.PlaylistDownloadUiModel,kotlin.Unit> onDownloadItemInProgressClick, kotlin.jvm.functions.Function0<kotlin.Unit> onPlaylistsClick, kotlin.jvm.functions.Function0<kotlin.Unit> onSettingsClick, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.graphics.painter.Painter? downloadItemArtworkPlaceholder, optional String? onDownloadItemInProgressClickActionLabel);
  }

  public final class PlaylistDownloadBrowseScreenPreviewKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void PlaylistDownloadBrowseScreenPreview();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void PlaylistDownloadBrowseScreenPreviewLoading();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void PlaylistDownloadBrowseScreenPreviewNoDownloads();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void PlaylistDownloadBrowseScreenPreviewUampTheme();
  }

}

package com.google.android.horologist.media.ui.screens.entity {

  public final class CreatePlaylistDownloadScreenStateLoadedTest {
    ctor public CreatePlaylistDownloadScreenStateLoadedTest();
    method public void givenDownloadedAndDownloading_thenDownloadMediaListStateIsPartially();
    method public void givenDownloaded_thenDownloadMediaListStateIsFully();
    method public void givenDownloading_thenDownloadsProgressIsInProgress();
    method public void givenEmptyDownloads_thenDownloadMediaListStateIsFully();
    method public void givenEmptyDownloads_thenDownloadsProgressIsIdle();
    method public void givenMixed_thenDownloadMediaListStateIsPartially();
    method public void givenNoDownloaded_thenDownloadMediaListStateIsNone();
    method public void givenNoDownloading_thenDownloadsProgressIsIdle();
  }

  public final class EntityScreenKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void DefaultEntityScreenHeader(String title, optional androidx.compose.ui.Modifier modifier);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void EntityScreen(com.google.android.horologist.compose.layout.ScalingLazyColumnState columnState, kotlin.jvm.functions.Function0<kotlin.Unit> headerContent, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? buttonsContent, optional kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.ScalingLazyListScope,kotlin.Unit>? content);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static <Media> void EntityScreen(com.google.android.horologist.compose.layout.ScalingLazyColumnState columnState, kotlin.jvm.functions.Function0<kotlin.Unit> headerContent, java.util.List<? extends Media> mediaList, kotlin.jvm.functions.Function1<? super Media,kotlin.Unit> mediaContent, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? buttonsContent);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static <Media> void EntityScreen(com.google.android.horologist.compose.layout.ScalingLazyColumnState columnState, com.google.android.horologist.media.ui.screens.entity.EntityScreenState<Media> entityScreenState, kotlin.jvm.functions.Function0<kotlin.Unit> headerContent, kotlin.jvm.functions.Function1<? super androidx.wear.compose.foundation.lazy.ScalingLazyListScope,kotlin.Unit> loadingContent, kotlin.jvm.functions.Function1<? super Media,kotlin.Unit> mediaContent, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? buttonsContent, optional kotlin.jvm.functions.Function0<kotlin.Unit>? failedContent);
  }

  public final class EntityScreenPreviewKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void EntityScreenPreview();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void EntityScreenPreviewFailedState();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void EntityScreenPreviewLoadedState();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void EntityScreenPreviewLoadingState();
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public abstract sealed class EntityScreenState<Media> {
  }

  public static final class EntityScreenState.Failed<Media> extends com.google.android.horologist.media.ui.screens.entity.EntityScreenState<Media> {
    ctor public EntityScreenState.Failed();
  }

  public static final class EntityScreenState.Loaded<Media> extends com.google.android.horologist.media.ui.screens.entity.EntityScreenState<Media> {
    ctor public EntityScreenState.Loaded(java.util.List<? extends Media> mediaList);
    method public java.util.List<Media> component1();
    method public com.google.android.horologist.media.ui.screens.entity.EntityScreenState.Loaded<Media> copy(java.util.List<? extends Media> mediaList);
    method public java.util.List<Media> getMediaList();
    property public final java.util.List<Media> mediaList;
  }

  public static final class EntityScreenState.Loading<Media> extends com.google.android.horologist.media.ui.screens.entity.EntityScreenState<Media> {
    ctor public EntityScreenState.Loading();
  }

  public final class PlaylistDownloadScreenA11yScreenshotTest {
    ctor public PlaylistDownloadScreenA11yScreenshotTest();
    method public error.NonExistentClass! getPaparazzi();
    method public void playlistDownloadScreenPreviewFailed();
    method public void playlistDownloadScreenPreviewLoadedFullyDownloaded();
    method public void playlistDownloadScreenPreviewLoadedNoneDownloaded();
    method public void playlistDownloadScreenPreviewLoadedNoneDownloadedDownloading();
    method public void playlistDownloadScreenPreviewLoadedPartiallyDownloaded();
    method public void playlistDownloadScreenPreviewLoadedPartiallyDownloadedDownloadingUnknownSize();
    method public void playlistDownloadScreenPreviewLoadedPartiallyDownloadedDownloadingWaiting();
    method public void playlistDownloadScreenPreviewLoading();
    property public final error.NonExistentClass! paparazzi;
  }

  public final class PlaylistDownloadScreenA11yScreenshotTestKt {
  }

  public final class PlaylistDownloadScreenKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void PlaylistDownloadScreen(com.google.android.horologist.compose.layout.ScalingLazyColumnState columnState, String playlistName, com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState<com.google.android.horologist.media.ui.state.model.PlaylistUiModel,com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel> playlistDownloadScreenState, kotlin.jvm.functions.Function1<? super com.google.android.horologist.media.ui.state.model.PlaylistUiModel,kotlin.Unit> onDownloadButtonClick, kotlin.jvm.functions.Function1<? super com.google.android.horologist.media.ui.state.model.PlaylistUiModel,kotlin.Unit> onCancelDownloadButtonClick, kotlin.jvm.functions.Function1<? super com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel,kotlin.Unit> onDownloadItemClick, kotlin.jvm.functions.Function1<? super com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel,kotlin.Unit> onDownloadItemInProgressClick, kotlin.jvm.functions.Function1<? super com.google.android.horologist.media.ui.state.model.PlaylistUiModel,kotlin.Unit> onShuffleButtonClick, kotlin.jvm.functions.Function1<? super com.google.android.horologist.media.ui.state.model.PlaylistUiModel,kotlin.Unit> onPlayButtonClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function1<? super com.google.android.horologist.media.ui.state.model.PlaylistUiModel,kotlin.Unit>? onDownloadCompletedButtonClick, optional String defaultMediaTitle, optional androidx.compose.ui.graphics.painter.Painter? downloadItemArtworkPlaceholder, optional String? onDownloadItemInProgressClickActionLabel);
    method @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState.Loaded<com.google.android.horologist.media.ui.state.model.PlaylistUiModel,com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel> createPlaylistDownloadScreenStateLoaded(com.google.android.horologist.media.ui.state.model.PlaylistUiModel playlistModel, java.util.List<? extends com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel> downloadMediaList);
  }

  public final class PlaylistDownloadScreenPreviewKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void PlaylistDownloadScreenPreviewFailed();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void PlaylistDownloadScreenPreviewLoadedFullyDownloaded();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void PlaylistDownloadScreenPreviewLoadedNoneDownloaded();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void PlaylistDownloadScreenPreviewLoadedNoneDownloadedDownloading();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void PlaylistDownloadScreenPreviewLoadedPartiallyDownloaded();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void PlaylistDownloadScreenPreviewLoadedPartiallyDownloadedDownloadingUnknownSize();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void PlaylistDownloadScreenPreviewLoadedPartiallyDownloadedDownloadingWaiting();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void PlaylistDownloadScreenPreviewLoading();
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public abstract sealed class PlaylistDownloadScreenState<Collection, Media> {
  }

  public static final class PlaylistDownloadScreenState.Failed<Collection, Media> extends com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState<Collection,Media> {
    ctor public PlaylistDownloadScreenState.Failed();
  }

  public static final class PlaylistDownloadScreenState.Loaded<Collection, Media> extends com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState<Collection,Media> {
    ctor public PlaylistDownloadScreenState.Loaded(Collection? collectionModel, java.util.List<? extends Media> mediaList, com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState.Loaded.DownloadMediaListState downloadMediaListState, optional com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState.Loaded.DownloadsProgress downloadsProgress);
    method public Collection! component1();
    method public java.util.List<Media> component2();
    method public com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState.Loaded.DownloadMediaListState component3();
    method public com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState.Loaded.DownloadsProgress component4();
    method public com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState.Loaded<Collection,Media> copy(Collection! collectionModel, java.util.List<? extends Media> mediaList, com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState.Loaded.DownloadMediaListState downloadMediaListState, com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState.Loaded.DownloadsProgress downloadsProgress);
    method public Collection! getCollectionModel();
    method public com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState.Loaded.DownloadMediaListState getDownloadMediaListState();
    method public com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState.Loaded.DownloadsProgress getDownloadsProgress();
    method public java.util.List<Media> getMediaList();
    property public final Collection! collectionModel;
    property public final com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState.Loaded.DownloadMediaListState downloadMediaListState;
    property public final com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState.Loaded.DownloadsProgress downloadsProgress;
    property public final java.util.List<Media> mediaList;
  }

  public enum PlaylistDownloadScreenState.Loaded.DownloadMediaListState {
    method public static com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState.Loaded.DownloadMediaListState valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState.Loaded.DownloadMediaListState[] values();
    enum_constant public static final com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState.Loaded.DownloadMediaListState Fully;
    enum_constant public static final com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState.Loaded.DownloadMediaListState None;
    enum_constant public static final com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState.Loaded.DownloadMediaListState Partially;
  }

  public abstract static sealed class PlaylistDownloadScreenState.Loaded.DownloadsProgress {
  }

  public static final class PlaylistDownloadScreenState.Loaded.DownloadsProgress.Idle extends com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState.Loaded.DownloadsProgress {
    field public static final com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState.Loaded.DownloadsProgress.Idle INSTANCE;
  }

  public static final class PlaylistDownloadScreenState.Loaded.DownloadsProgress.InProgress extends com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState.Loaded.DownloadsProgress {
    ctor public PlaylistDownloadScreenState.Loaded.DownloadsProgress.InProgress(float progress);
    method public float component1();
    method public com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState.Loaded.DownloadsProgress.InProgress copy(float progress);
    method public float getProgress();
    property public final float progress;
  }

  public static final class PlaylistDownloadScreenState.Loading<Collection, Media> extends com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState<Collection,Media> {
    ctor public PlaylistDownloadScreenState.Loading();
  }

  public final class PlaylistStreamingScreenKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void PlaylistStreamingScreen(com.google.android.horologist.compose.layout.ScalingLazyColumnState columnState, String playlistName, com.google.android.horologist.media.ui.screens.entity.PlaylistDownloadScreenState<com.google.android.horologist.media.ui.state.model.PlaylistUiModel,com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel> playlistDownloadScreenState, kotlin.jvm.functions.Function0<kotlin.Unit> onShuffleButtonClick, kotlin.jvm.functions.Function0<kotlin.Unit> onPlayButtonClick, kotlin.jvm.functions.Function1<? super com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel,kotlin.Unit> onPlayItemClick, optional androidx.compose.ui.Modifier modifier, optional String defaultMediaTitle);
  }

}

package com.google.android.horologist.media.ui.screens.player {

  public final class PlayerScreenKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void DefaultPlayerScreenControlButtons(com.google.android.horologist.media.ui.state.PlayerUiController playerController, com.google.android.horologist.media.ui.state.PlayerUiState playerUiState);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void DefaultPlayerScreenMediaDisplay(com.google.android.horologist.media.ui.state.PlayerUiState playerUiState, optional androidx.compose.ui.Modifier modifier);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void PlayerScreen(com.google.android.horologist.media.ui.state.PlayerViewModel playerViewModel, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.ColumnScope,? super com.google.android.horologist.media.ui.state.PlayerUiState,kotlin.Unit> mediaDisplay, optional kotlin.jvm.functions.Function3<? super androidx.compose.foundation.layout.RowScope,? super com.google.android.horologist.media.ui.state.PlayerUiController,? super com.google.android.horologist.media.ui.state.PlayerUiState,kotlin.Unit> controlButtons, optional kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.RowScope,? super com.google.android.horologist.media.ui.state.PlayerUiState,kotlin.Unit> buttons, optional kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.BoxScope,? super com.google.android.horologist.media.ui.state.PlayerUiState,kotlin.Unit> background);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void PlayerScreen(kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> mediaDisplay, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> controlButtons, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> buttons, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> background);
  }

  public final class PlayerScreenPreviewKt {
    method @androidx.compose.runtime.Composable public static void DefaultMediaPreview();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(group="Large Round", device=androidx.compose.ui.tooling.preview.Devices.WEAR_OS_LARGE_ROUND, showSystemUi=true, backgroundColor=com.google.android.horologist.media.ui.screens.player.PlayerScreenPreviewKt.BACKGROUND_COLOR, showBackground=true) @androidx.compose.ui.tooling.preview.Preview(group="Small Round", device=androidx.compose.ui.tooling.preview.Devices.WEAR_OS_SMALL_ROUND, showSystemUi=true, backgroundColor=com.google.android.horologist.media.ui.screens.player.PlayerScreenPreviewKt.BACKGROUND_COLOR, showBackground=true) @androidx.compose.ui.tooling.preview.Preview(group="Square", device=androidx.compose.ui.tooling.preview.Devices.WEAR_OS_SQUARE, showSystemUi=true, backgroundColor=com.google.android.horologist.media.ui.screens.player.PlayerScreenPreviewKt.BACKGROUND_COLOR, showBackground=true) public static void PlayerScreenPreview();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="With custom background", group="Large Round", device=androidx.compose.ui.tooling.preview.Devices.WEAR_OS_LARGE_ROUND, showSystemUi=true, backgroundColor=com.google.android.horologist.media.ui.screens.player.PlayerScreenPreviewKt.BACKGROUND_COLOR, showBackground=true) @androidx.compose.ui.tooling.preview.Preview(name="With custom background", group="Small Round", device=androidx.compose.ui.tooling.preview.Devices.WEAR_OS_SMALL_ROUND, showSystemUi=true, backgroundColor=com.google.android.horologist.media.ui.screens.player.PlayerScreenPreviewKt.BACKGROUND_COLOR, showBackground=true) @androidx.compose.ui.tooling.preview.Preview(name="With custom background", group="Square", device=androidx.compose.ui.tooling.preview.Devices.WEAR_OS_SQUARE, showSystemUi=true, backgroundColor=com.google.android.horologist.media.ui.screens.player.PlayerScreenPreviewKt.BACKGROUND_COLOR, showBackground=true) public static void PlayerScreenPreviewCustomBackground();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(name="With custom media display", group="Large Round", device=androidx.compose.ui.tooling.preview.Devices.WEAR_OS_LARGE_ROUND, showSystemUi=true, backgroundColor=com.google.android.horologist.media.ui.screens.player.PlayerScreenPreviewKt.BACKGROUND_COLOR, showBackground=true) @androidx.compose.ui.tooling.preview.Preview(name="With custom media display", group="Small Round", device=androidx.compose.ui.tooling.preview.Devices.WEAR_OS_SMALL_ROUND, showSystemUi=true, backgroundColor=com.google.android.horologist.media.ui.screens.player.PlayerScreenPreviewKt.BACKGROUND_COLOR, showBackground=true) @androidx.compose.ui.tooling.preview.Preview(name="With custom media display", group="Square", device=androidx.compose.ui.tooling.preview.Devices.WEAR_OS_SQUARE, showSystemUi=true, backgroundColor=com.google.android.horologist.media.ui.screens.player.PlayerScreenPreviewKt.BACKGROUND_COLOR, showBackground=true) public static void PlayerScreenPreviewCustomMediaDisplay();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices @com.google.android.horologist.compose.tools.WearPreviewFontSizes public static void PlayerScreenPreviewDevices();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearLargeRoundDevicePreview public static void VolumeScreenTheme(@androidx.compose.ui.tooling.preview.PreviewParameter(provider=WearPreviewThemes::class) com.google.android.horologist.compose.tools.ThemeValues themeValues);
  }

  public final class PlayerScreenPreviewUampKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearLargeRoundDevicePreview public static void PlayerScreenPreviewUamp();
  }

  public final class PlayerScreenTest {
    ctor public PlayerScreenTest();
    method public error.NonExistentClass! getComposeTestRule();
    method public void givenCustomBackground_thenCustomIsDisplayed();
    method public void givenCustomButtons_thenCustomIsDisplayed();
    method public void givenCustomControlButtons_thenCustomIsDisplayed();
    method public void givenCustomMediaDisplay_thenCustomIsDisplayed();
    method public void givenMediaList_whenSeekToNextIsClicked_thenNextItemIsPlaying();
    method public void givenMediaList_whenSeekToPreviousIsClicked_thenPreviousItemIsPlaying();
    method public void givenMedia_thenCorrectTitleAndArtistAndIsDisplayed();
    method public void givenPlayerRepoIsNOTPlaying_whenPlayIsClicked_thenPlayerRepoIsPlaying();
    method public void givenPlayerRepoIsPlaying_whenPauseIsClicked_thenPlayerRepoIsNOTPlaying();
    method public void givenShowProgressIsFalse_thenProgressBarIsNOTDisplayed();
    method public void givenShowProgressIsTrue_thenProgressBarIsDisplayed();
    method public void whenPlayPauseCommandBecomesAvailable_thenPlayPauseButtonGetsEnabled();
    method public void whenSeekToNextMediaCommandBecomesAvailable_thenSeekToNextButtonGetsEnabled();
    method public void whenSeekToPreviousMediaCommandBecomesAvailable_thenSeekToPreviousButtonGetsEnabled();
    method public void whenUpdatePosition_thenProgressIsUpdated();
    property public final error.NonExistentClass! composeTestRule;
  }

}

package com.google.android.horologist.media.ui.screens.playerlibrarypager {

  public final class PlayerLibraryPagerScreenKt {
    method @androidx.compose.runtime.Composable public static void PlayerLibraryPagerScreen(androidx.compose.foundation.pager.PagerState pagerState, kotlin.jvm.functions.Function1<? super java.lang.Float,kotlin.Unit> onVolumeChangeByScroll, kotlin.jvm.functions.Function0<com.google.android.horologist.audio.VolumeState> volumeState, kotlin.jvm.functions.Function1<? super androidx.compose.ui.Modifier,kotlin.Unit> timeText, kotlin.jvm.functions.Function0<kotlin.Unit> playerScreen, kotlin.jvm.functions.Function1<? super com.google.android.horologist.compose.layout.ScalingLazyColumnState,kotlin.Unit> libraryScreen, androidx.navigation.NavBackStackEntry backStack, optional androidx.compose.ui.Modifier modifier);
  }

}

package com.google.android.horologist.media.ui.screens.playlists {

  public final class PlaylistsScreenKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static <T> void PlaylistsScreen(com.google.android.horologist.compose.layout.ScalingLazyColumnState columnState, java.util.List<? extends T> playlists, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> playlistContent, optional androidx.compose.ui.Modifier modifier);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static <T> void PlaylistsScreen(com.google.android.horologist.compose.layout.ScalingLazyColumnState columnState, com.google.android.horologist.media.ui.screens.playlists.PlaylistsScreenState<T> playlistsScreenState, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> playlistContent, optional androidx.compose.ui.Modifier modifier);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void PlaylistsScreen(com.google.android.horologist.compose.layout.ScalingLazyColumnState columnState, com.google.android.horologist.media.ui.screens.playlists.PlaylistsScreenState<com.google.android.horologist.media.ui.state.model.PlaylistUiModel> playlistsScreenState, kotlin.jvm.functions.Function1<? super com.google.android.horologist.media.ui.state.model.PlaylistUiModel,kotlin.Unit> onPlaylistItemClick, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.graphics.painter.Painter? playlistItemArtworkPlaceholder);
  }

  public final class PlaylistsScreenPreviewKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void PlaylistsScreenPreview();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void PlaylistsScreenPreviewCustomLayout();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void PlaylistsScreenPreviewFailed();
    method @androidx.compose.runtime.Composable @com.google.android.horologist.compose.tools.WearPreviewDevices public static void PlaylistsScreenPreviewLoading();
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public abstract sealed class PlaylistsScreenState<T> {
  }

  public static final class PlaylistsScreenState.Failed<T> extends com.google.android.horologist.media.ui.screens.playlists.PlaylistsScreenState<T> {
    ctor public PlaylistsScreenState.Failed();
  }

  public static final class PlaylistsScreenState.Loaded<T> extends com.google.android.horologist.media.ui.screens.playlists.PlaylistsScreenState<T> {
    ctor public PlaylistsScreenState.Loaded(java.util.List<? extends T> playlistList);
    method public java.util.List<T> component1();
    method public com.google.android.horologist.media.ui.screens.playlists.PlaylistsScreenState.Loaded<T> copy(java.util.List<? extends T> playlistList);
    method public java.util.List<T> getPlaylistList();
    property public final java.util.List<T> playlistList;
  }

  public static final class PlaylistsScreenState.Loading<T> extends com.google.android.horologist.media.ui.screens.playlists.PlaylistsScreenState<T> {
    ctor public PlaylistsScreenState.Loading();
  }

}

package com.google.android.horologist.media.ui.semantics {

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public final class CustomSemanticsProperties {
    method public androidx.compose.ui.graphics.vector.ImageVector getIconImageVector(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.graphics.vector.ImageVector> getIconImageVectorKey();
    method public void setIconImageVector(androidx.compose.ui.semantics.SemanticsPropertyReceiver, androidx.compose.ui.graphics.vector.ImageVector);
    property public final androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.graphics.vector.ImageVector> IconImageVectorKey;
    field public static final com.google.android.horologist.media.ui.semantics.CustomSemanticsProperties INSTANCE;
  }

}

package com.google.android.horologist.media.ui.snackbar {

  public final class SnackbarManager {
    ctor public SnackbarManager();
    method public kotlinx.coroutines.flow.StateFlow<java.util.List<com.google.android.horologist.media.ui.snackbar.UiMessage>> getMessages();
    method public void setMessageShown(String messageId);
    method public void showMessage(com.google.android.horologist.media.ui.snackbar.UiMessage message);
    method public void showMessage(String message);
    property public final kotlinx.coroutines.flow.StateFlow<java.util.List<com.google.android.horologist.media.ui.snackbar.UiMessage>> messages;
  }

  public class SnackbarViewModel extends androidx.lifecycle.ViewModel {
    ctor public SnackbarViewModel(com.google.android.horologist.media.ui.snackbar.SnackbarManager snackbarManager);
    method public final com.google.android.horologist.compose.snackbar.SnackbarHostState getSnackbarHostState();
    property public final com.google.android.horologist.compose.snackbar.SnackbarHostState snackbarHostState;
    field public static final com.google.android.horologist.media.ui.snackbar.SnackbarViewModel.Companion Companion;
  }

  public static final class SnackbarViewModel.Companion {
    method public androidx.lifecycle.ViewModelProvider.Factory getFactory();
    method public androidx.lifecycle.viewmodel.CreationExtras.Key<com.google.android.horologist.media.ui.snackbar.SnackbarManager> getSnackbarManagerKey();
    property public final androidx.lifecycle.ViewModelProvider.Factory Factory;
    property public final androidx.lifecycle.viewmodel.CreationExtras.Key<com.google.android.horologist.media.ui.snackbar.SnackbarManager> SnackbarManagerKey;
  }

  public final class UiMessage {
    ctor public UiMessage(String message, optional String id, optional boolean error);
    method public String component1();
    method public String component2();
    method public boolean component3();
    method public com.google.android.horologist.media.ui.snackbar.UiMessage copy(String message, String id, boolean error);
    method public boolean getError();
    method public String getId();
    method public String getMessage();
    property public final boolean error;
    property public final String id;
    property public final String message;
  }

}

package com.google.android.horologist.media.ui.state {

  public final class LocalTimestampProviderKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<com.google.android.horologist.media.model.TimestampProvider> getLocalTimestampProvider();
    property public static final androidx.compose.runtime.ProvidableCompositionLocal<com.google.android.horologist.media.model.TimestampProvider> LocalTimestampProvider;
  }

  @androidx.compose.runtime.Stable public final class PlayerUiController {
    ctor public PlayerUiController(com.google.android.horologist.media.repository.PlayerRepository playerRepository);
    method public com.google.android.horologist.media.ui.state.PlayerUiController copy(com.google.android.horologist.media.repository.PlayerRepository playerRepository);
    method public void pause();
    method public void play();
    method public void seekBack();
    method public void seekForward();
    method public void setPlaybackSpeed(float speed);
    method public void skipToNextMedia();
    method public void skipToPreviousMedia();
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public final class PlayerUiState {
    ctor public PlayerUiState(boolean playEnabled, boolean pauseEnabled, boolean seekBackEnabled, boolean seekForwardEnabled, boolean seekToPreviousEnabled, boolean seekToNextEnabled, boolean shuffleEnabled, boolean shuffleOn, boolean playPauseEnabled, boolean playing, com.google.android.horologist.media.ui.state.model.MediaUiModel? media, com.google.android.horologist.media.ui.state.model.TrackPositionUiModel trackPositionUiModel, optional com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekBackButtonIncrement, optional com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekForwardButtonIncrement, boolean connected);
    method public boolean component1();
    method public boolean component10();
    method public com.google.android.horologist.media.ui.state.model.MediaUiModel? component11();
    method public com.google.android.horologist.media.ui.state.model.TrackPositionUiModel component12();
    method public com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement component13();
    method public com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement component14();
    method public boolean component15();
    method public boolean component2();
    method public boolean component3();
    method public boolean component4();
    method public boolean component5();
    method public boolean component6();
    method public boolean component7();
    method public boolean component8();
    method public boolean component9();
    method public com.google.android.horologist.media.ui.state.PlayerUiState copy(boolean playEnabled, boolean pauseEnabled, boolean seekBackEnabled, boolean seekForwardEnabled, boolean seekToPreviousEnabled, boolean seekToNextEnabled, boolean shuffleEnabled, boolean shuffleOn, boolean playPauseEnabled, boolean playing, com.google.android.horologist.media.ui.state.model.MediaUiModel? media, com.google.android.horologist.media.ui.state.model.TrackPositionUiModel trackPositionUiModel, com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekBackButtonIncrement, com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekForwardButtonIncrement, boolean connected);
    method public boolean getConnected();
    method public com.google.android.horologist.media.ui.state.model.MediaUiModel? getMedia();
    method public boolean getPauseEnabled();
    method public boolean getPlayEnabled();
    method public boolean getPlayPauseEnabled();
    method public boolean getPlaying();
    method public com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement getSeekBackButtonIncrement();
    method public boolean getSeekBackEnabled();
    method public com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement getSeekForwardButtonIncrement();
    method public boolean getSeekForwardEnabled();
    method public boolean getSeekToNextEnabled();
    method public boolean getSeekToPreviousEnabled();
    method public boolean getShuffleEnabled();
    method public boolean getShuffleOn();
    method public com.google.android.horologist.media.ui.state.model.TrackPositionUiModel getTrackPositionUiModel();
    property public final boolean connected;
    property public final com.google.android.horologist.media.ui.state.model.MediaUiModel? media;
    property public final boolean pauseEnabled;
    property public final boolean playEnabled;
    property public final boolean playPauseEnabled;
    property public final boolean playing;
    property public final com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekBackButtonIncrement;
    property public final boolean seekBackEnabled;
    property public final com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekForwardButtonIncrement;
    property public final boolean seekForwardEnabled;
    property public final boolean seekToNextEnabled;
    property public final boolean seekToPreviousEnabled;
    property public final boolean shuffleEnabled;
    property public final boolean shuffleOn;
    property public final com.google.android.horologist.media.ui.state.model.TrackPositionUiModel trackPositionUiModel;
    field public static final com.google.android.horologist.media.ui.state.PlayerUiState.Companion Companion;
  }

  public static final class PlayerUiState.Companion {
    method public com.google.android.horologist.media.ui.state.PlayerUiState getNotConnected();
    property public final com.google.android.horologist.media.ui.state.PlayerUiState NotConnected;
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public final class PlayerUiStateProducer {
    ctor public PlayerUiStateProducer(com.google.android.horologist.media.repository.PlayerRepository playerRepository);
    method public kotlinx.coroutines.flow.Flow<com.google.android.horologist.media.ui.state.PlayerUiState> getPlayerUiStateFlow();
    property public final kotlinx.coroutines.flow.Flow<com.google.android.horologist.media.ui.state.PlayerUiState> playerUiStateFlow;
  }

  public final class PlayerUiStateProducerTest {
    ctor public PlayerUiStateProducerTest();
    method public error.NonExistentClass! given a PlayerRepository produces correct PlayerUiState();
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public class PlayerViewModel extends androidx.lifecycle.ViewModel {
    ctor public PlayerViewModel(com.google.android.horologist.media.repository.PlayerRepository playerRepository);
    method public final com.google.android.horologist.media.ui.state.PlayerUiController getPlayerUiController();
    method public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.ui.state.PlayerUiState> getPlayerUiState();
    property public final com.google.android.horologist.media.ui.state.PlayerUiController playerUiController;
    property public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.ui.state.PlayerUiState> playerUiState;
  }

  public final class PlayerViewModelTest {
    ctor public PlayerViewModelTest();
    method public error.NonExistentClass! givenANonConnectedPlayerRepository_thenPlayerUiStateHasPlayAndPauseDisabled();
    method public void setUp();
  }

}

package com.google.android.horologist.media.ui.state.mapper {

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public final class DownloadMediaUiModelMapper {
    method public com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel map(com.google.android.horologist.media.model.MediaDownload mediaDownload);
    field public static final com.google.android.horologist.media.ui.state.mapper.DownloadMediaUiModelMapper INSTANCE;
  }

  public final class DownloadMediaUiModelMapperTest {
    ctor public DownloadMediaUiModelMapperTest();
    method public void givenStatusCompleted_thenMapsCorrectly();
    method public void givenStatusIdle_thenMapsCorrectly();
    method public void givenStatusInProgressZeroSizeUnknown_thenMapsCorrectly();
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public final class MediaUiModelMapper {
    method public com.google.android.horologist.media.ui.state.model.MediaUiModel map(com.google.android.horologist.media.model.Media media);
    field public static final com.google.android.horologist.media.ui.state.mapper.MediaUiModelMapper INSTANCE;
  }

  public final class MediaUiModelMapperTest {
    ctor public MediaUiModelMapperTest();
    method public void givenMedia_thenMapsCorrectly();
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public final class PlayerUiStateMapper {
    method public com.google.android.horologist.media.ui.state.PlayerUiState map(com.google.android.horologist.media.model.PlayerState currentState, java.util.Set<? extends com.google.android.horologist.media.model.Command> availableCommands, com.google.android.horologist.media.model.Media? media, com.google.android.horologist.media.model.PlaybackStateEvent playbackStateEvent, boolean shuffleModeEnabled, boolean connected, kotlin.time.Duration? seekBackIncrement, kotlin.time.Duration? seekForwardIncrement);
    field public static final com.google.android.horologist.media.ui.state.mapper.PlayerUiStateMapper INSTANCE;
  }

  public final class PlayerUiStateMapperTest {
    ctor public PlayerUiStateMapperTest();
    method public void givenIncrements_thenIncrementsAreMappedCorrectly();
    method public void givenIsNOTPlaying_thenPlayingIsFalse();
    method public void givenIsPlaying_thenPlayingIsTrue();
    method public void givenMediaPosition_thenTrackPositionIsMappedCorrectly();
    method public void givenMedia_thenMediaItemIsMappedCorrectly();
    method public void givenNoCommandsAreAvailable_thenAllIsDisabled();
    method public void givenNullIncrements_thenIncrementsAreUnknown();
    method public void givenPlayPauseCommandIsAvailable_thenPauseIsEnabled();
    method public void givenPlayPauseCommandIsAvailable_thenPlayIsEnabled();
    method public void givenPlayPauseCommandIsAvailable_thenPlayPauseIsEnabled();
    method public void givenSeekBackCommandIsAvailable_thenSeekBackIsEnabled();
    method public void givenSeekForwardCommandIsAvailable_thenSeekForwardIsEnabled();
    method public void givenSetShuffleModeCommandIsAvailable_thenShuffleIsEnabled();
    method public void givenShuffleDisabled_thenShuffleOnIsFalse();
    method public void givenShuffleEnabled_thenShuffleOnIsTrue();
    method public void givenSkipToNextMediaCommandIsAvailable_thenSeekToNextIsEnabled();
    method public void givenSkipToPreviousMediaCommandIsAvailable_thenSeekToPreviousIsEnabled();
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public final class PlaylistDownloadUiModelMapper {
    method public com.google.android.horologist.media.ui.state.model.PlaylistDownloadUiModel.Completed map(com.google.android.horologist.media.model.Playlist playlist);
    field public static final com.google.android.horologist.media.ui.state.mapper.PlaylistDownloadUiModelMapper INSTANCE;
  }

  public final class PlaylistDownloadUiModelMapperTest {
    ctor public PlaylistDownloadUiModelMapperTest();
    method public void givenPlaylist_thenMapsCorrectly();
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public final class PlaylistUiModelMapper {
    method public com.google.android.horologist.media.ui.state.model.PlaylistUiModel map(com.google.android.horologist.media.model.Playlist playlist);
    field public static final com.google.android.horologist.media.ui.state.mapper.PlaylistUiModelMapper INSTANCE;
  }

  public final class PlaylistUiModelMapperTest {
    ctor public PlaylistUiModelMapperTest();
    method public void givenPlaylist_thenMapsCorrectly();
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public final class TrackPositionUiModelMapper {
    method public com.google.android.horologist.media.ui.state.model.TrackPositionUiModel map(com.google.android.horologist.media.model.PlaybackStateEvent event);
    field public static final com.google.android.horologist.media.ui.state.mapper.TrackPositionUiModelMapper INSTANCE;
  }

  public final class TrackPositionUiModelMapperTest {
    ctor public TrackPositionUiModelMapperTest();
    method public void givenMediaPositionNotPlaying_thenMapsCorrectly();
    method public void givenMediaPosition_thenMapsCorrectly();
    method public void givenUnknownMediaPosition_thenMapsCorrectly();
  }

}

package com.google.android.horologist.media.ui.state.model {

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public abstract sealed class DownloadMediaUiModel {
    method public String? getArtworkUri();
    method public String getId();
    method public String? getTitle();
    property public String? artworkUri;
    property public String id;
    property public String? title;
  }

  public static final class DownloadMediaUiModel.Downloaded extends com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel {
    ctor public DownloadMediaUiModel.Downloaded(String id, optional String? title, optional String? artist, optional String? artworkUri);
    method public String component1();
    method public String? component2();
    method public String? component3();
    method public String? component4();
    method public com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel.Downloaded copy(String id, String? title, String? artist, String? artworkUri);
    method public String? getArtist();
    property public final String? artist;
    property public String? artworkUri;
    property public String id;
    property public String? title;
  }

  public static final class DownloadMediaUiModel.Downloading extends com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel {
    ctor public DownloadMediaUiModel.Downloading(String id, optional String? title, com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel.Progress progress, com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel.Size size, optional String? artworkUri);
    method public String component1();
    method public String? component2();
    method public com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel.Progress component3();
    method public com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel.Size component4();
    method public String? component5();
    method public com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel.Downloading copy(String id, String? title, com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel.Progress progress, com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel.Size size, String? artworkUri);
    method public com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel.Progress getProgress();
    method public com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel.Size getSize();
    property public String? artworkUri;
    property public String id;
    property public final com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel.Progress progress;
    property public final com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel.Size size;
    property public String? title;
  }

  public static final class DownloadMediaUiModel.NotDownloaded extends com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel {
    ctor public DownloadMediaUiModel.NotDownloaded(String id, optional String? title, optional String? artist, optional String? artworkUri);
    method public String component1();
    method public String? component2();
    method public String? component3();
    method public String? component4();
    method public com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel.NotDownloaded copy(String id, String? title, String? artist, String? artworkUri);
    method public String? getArtist();
    property public final String? artist;
    property public String? artworkUri;
    property public String id;
    property public String? title;
  }

  public abstract static sealed class DownloadMediaUiModel.Progress {
  }

  public static final class DownloadMediaUiModel.Progress.InProgress extends com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel.Progress {
    ctor public DownloadMediaUiModel.Progress.InProgress(float progress);
    method public float component1();
    method public com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel.Progress.InProgress copy(float progress);
    method public float getProgress();
    property public final float progress;
  }

  public static final class DownloadMediaUiModel.Progress.Waiting extends com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel.Progress {
    field public static final com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel.Progress.Waiting INSTANCE;
  }

  public abstract static sealed class DownloadMediaUiModel.Size {
  }

  public static final class DownloadMediaUiModel.Size.Known extends com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel.Size {
    ctor public DownloadMediaUiModel.Size.Known(long sizeInBytes);
    method public long component1();
    method public com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel.Size.Known copy(long sizeInBytes);
    method public long getSizeInBytes();
    property public final long sizeInBytes;
  }

  public static final class DownloadMediaUiModel.Size.Unknown extends com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel.Size {
    field public static final com.google.android.horologist.media.ui.state.model.DownloadMediaUiModel.Size.Unknown INSTANCE;
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public final class MediaUiModel {
    ctor public MediaUiModel(String id, optional String? title, optional String? subtitle, optional String? artworkUri, optional androidx.compose.ui.graphics.Color? artworkColor);
    method public String component1();
    method public String? component2();
    method public String? component3();
    method public String? component4();
    method public androidx.compose.ui.graphics.Color? component5-QN2ZGVo();
    method public com.google.android.horologist.media.ui.state.model.MediaUiModel copy-6nskv5g(String id, String? title, String? subtitle, String? artworkUri, androidx.compose.ui.graphics.Color? artworkColor);
    method public androidx.compose.ui.graphics.Color? getArtworkColor();
    method public String? getArtworkUri();
    method public String getId();
    method public String? getSubtitle();
    method public String? getTitle();
    property public final androidx.compose.ui.graphics.Color? artworkColor;
    property public final String? artworkUri;
    property public final String id;
    property public final String? subtitle;
    property public final String? title;
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public abstract sealed class PlaylistDownloadUiModel {
    method public com.google.android.horologist.media.ui.state.model.PlaylistUiModel getPlaylistUiModel();
    property public com.google.android.horologist.media.ui.state.model.PlaylistUiModel playlistUiModel;
  }

  public static final class PlaylistDownloadUiModel.Completed extends com.google.android.horologist.media.ui.state.model.PlaylistDownloadUiModel {
    ctor public PlaylistDownloadUiModel.Completed(com.google.android.horologist.media.ui.state.model.PlaylistUiModel playlistUiModel);
    method public com.google.android.horologist.media.ui.state.model.PlaylistUiModel component1();
    method public com.google.android.horologist.media.ui.state.model.PlaylistDownloadUiModel.Completed copy(com.google.android.horologist.media.ui.state.model.PlaylistUiModel playlistUiModel);
    property public com.google.android.horologist.media.ui.state.model.PlaylistUiModel playlistUiModel;
  }

  public static final class PlaylistDownloadUiModel.InProgress extends com.google.android.horologist.media.ui.state.model.PlaylistDownloadUiModel {
    ctor public PlaylistDownloadUiModel.InProgress(com.google.android.horologist.media.ui.state.model.PlaylistUiModel playlistUiModel, int percentage);
    method public com.google.android.horologist.media.ui.state.model.PlaylistUiModel component1();
    method public int component2();
    method public com.google.android.horologist.media.ui.state.model.PlaylistDownloadUiModel.InProgress copy(com.google.android.horologist.media.ui.state.model.PlaylistUiModel playlistUiModel, int percentage);
    method public int getPercentage();
    property public final int percentage;
    property public com.google.android.horologist.media.ui.state.model.PlaylistUiModel playlistUiModel;
  }

  public final class PlaylistUiModel {
    ctor public PlaylistUiModel(String id, String title, optional String? artworkUri);
    method public String component1();
    method public String component2();
    method public String? component3();
    method public com.google.android.horologist.media.ui.state.model.PlaylistUiModel copy(String id, String title, String? artworkUri);
    method public String? getArtworkUri();
    method public String getId();
    method public String getTitle();
    property public final String? artworkUri;
    property public final String id;
    property public final String title;
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public abstract sealed class TrackPositionUiModel {
    method public abstract boolean getShouldAnimate();
    method public abstract boolean getShowProgress();
    property public abstract boolean shouldAnimate;
    property public abstract boolean showProgress;
  }

  public static final class TrackPositionUiModel.Actual extends com.google.android.horologist.media.ui.state.model.TrackPositionUiModel {
    ctor public TrackPositionUiModel.Actual(float percent, long duration, long position, optional boolean shouldAnimate);
    method public float component1();
    method public long component2-UwyO8pc();
    method public long component3-UwyO8pc();
    method public boolean component4();
    method public com.google.android.horologist.media.ui.state.model.TrackPositionUiModel.Actual copy-vLdBGDU(float percent, long duration, long position, boolean shouldAnimate);
    method public long getDuration();
    method public float getPercent();
    method public long getPosition();
    method public boolean getShouldAnimate();
    method public boolean getShowProgress();
    property public final long duration;
    property public final float percent;
    property public final long position;
    property public boolean shouldAnimate;
    property public boolean showProgress;
    field public static final com.google.android.horologist.media.ui.state.model.TrackPositionUiModel.Actual.Companion Companion;
  }

  public static final class TrackPositionUiModel.Actual.Companion {
    method public com.google.android.horologist.media.ui.state.model.TrackPositionUiModel.Actual getZERO();
    property public final com.google.android.horologist.media.ui.state.model.TrackPositionUiModel.Actual ZERO;
  }

  public static final class TrackPositionUiModel.Hidden extends com.google.android.horologist.media.ui.state.model.TrackPositionUiModel {
    method public boolean getShouldAnimate();
    method public boolean getShowProgress();
    property public boolean shouldAnimate;
    property public boolean showProgress;
    field public static final com.google.android.horologist.media.ui.state.model.TrackPositionUiModel.Hidden INSTANCE;
  }

  public static final class TrackPositionUiModel.Predictive extends com.google.android.horologist.media.ui.state.model.TrackPositionUiModel {
    ctor public TrackPositionUiModel.Predictive(com.google.android.horologist.media.model.PositionPredictor predictor, optional boolean shouldAnimate);
    method public com.google.android.horologist.media.model.PositionPredictor component1();
    method public boolean component2();
    method public com.google.android.horologist.media.ui.state.model.TrackPositionUiModel.Predictive copy(com.google.android.horologist.media.model.PositionPredictor predictor, boolean shouldAnimate);
    method public com.google.android.horologist.media.model.PositionPredictor getPredictor();
    method public boolean getShouldAnimate();
    method public boolean getShowProgress();
    property public final com.google.android.horologist.media.model.PositionPredictor predictor;
    property public boolean shouldAnimate;
    property public boolean showProgress;
  }

}

package com.google.android.horologist.media.ui.tiles {

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public final class MediaCollectionsTileRenderer extends com.google.android.horologist.tiles.render.SingleTileLayoutRenderer<com.google.android.horologist.media.ui.tiles.MediaCollectionsTileRenderer.MediaCollectionsState,com.google.android.horologist.media.ui.tiles.MediaCollectionsTileRenderer.ResourceState> {
    ctor public MediaCollectionsTileRenderer(android.content.Context context, androidx.wear.tiles.material.Colors materialTheme, boolean debugResourceMode);
    method public void produceRequestedResources(androidx.wear.tiles.ResourceBuilders.Resources.Builder, com.google.android.horologist.media.ui.tiles.MediaCollectionsTileRenderer.ResourceState resourceState, androidx.wear.tiles.DeviceParametersBuilders.DeviceParameters deviceParameters, java.util.List<java.lang.String> resourceIds);
    method public androidx.wear.tiles.LayoutElementBuilders.LayoutElement renderTile(com.google.android.horologist.media.ui.tiles.MediaCollectionsTileRenderer.MediaCollectionsState state, androidx.wear.tiles.DeviceParametersBuilders.DeviceParameters deviceParameters);
  }

  public static final class MediaCollectionsTileRenderer.MediaCollection {
    ctor public MediaCollectionsTileRenderer.MediaCollection(String name, String artworkId, androidx.wear.tiles.ActionBuilders.Action action);
    method public String component1();
    method public String component2();
    method public androidx.wear.tiles.ActionBuilders.Action component3();
    method public com.google.android.horologist.media.ui.tiles.MediaCollectionsTileRenderer.MediaCollection copy(String name, String artworkId, androidx.wear.tiles.ActionBuilders.Action action);
    method public androidx.wear.tiles.ActionBuilders.Action getAction();
    method public String getArtworkId();
    method public String getName();
    property public final androidx.wear.tiles.ActionBuilders.Action action;
    property public final String artworkId;
    property public final String name;
  }

  public static final class MediaCollectionsTileRenderer.MediaCollectionsState {
    ctor public MediaCollectionsTileRenderer.MediaCollectionsState(@StringRes int chipName, androidx.wear.tiles.ActionBuilders.Action chipAction, com.google.android.horologist.media.ui.tiles.MediaCollectionsTileRenderer.MediaCollection collection1, com.google.android.horologist.media.ui.tiles.MediaCollectionsTileRenderer.MediaCollection collection2);
    method public int component1();
    method public androidx.wear.tiles.ActionBuilders.Action component2();
    method public com.google.android.horologist.media.ui.tiles.MediaCollectionsTileRenderer.MediaCollection component3();
    method public com.google.android.horologist.media.ui.tiles.MediaCollectionsTileRenderer.MediaCollection component4();
    method public com.google.android.horologist.media.ui.tiles.MediaCollectionsTileRenderer.MediaCollectionsState copy(@StringRes int chipName, androidx.wear.tiles.ActionBuilders.Action chipAction, com.google.android.horologist.media.ui.tiles.MediaCollectionsTileRenderer.MediaCollection collection1, com.google.android.horologist.media.ui.tiles.MediaCollectionsTileRenderer.MediaCollection collection2);
    method public androidx.wear.tiles.ActionBuilders.Action getChipAction();
    method public int getChipName();
    method public com.google.android.horologist.media.ui.tiles.MediaCollectionsTileRenderer.MediaCollection getCollection1();
    method public com.google.android.horologist.media.ui.tiles.MediaCollectionsTileRenderer.MediaCollection getCollection2();
    property public final androidx.wear.tiles.ActionBuilders.Action chipAction;
    property public final int chipName;
    property public final com.google.android.horologist.media.ui.tiles.MediaCollectionsTileRenderer.MediaCollection collection1;
    property public final com.google.android.horologist.media.ui.tiles.MediaCollectionsTileRenderer.MediaCollection collection2;
  }

  public static final class MediaCollectionsTileRenderer.ResourceState {
    ctor public MediaCollectionsTileRenderer.ResourceState(@DrawableRes int appIcon, java.util.Map<java.lang.String,androidx.wear.tiles.ResourceBuilders.ImageResource> images);
    method public int component1();
    method public java.util.Map<java.lang.String,androidx.wear.tiles.ResourceBuilders.ImageResource> component2();
    method public com.google.android.horologist.media.ui.tiles.MediaCollectionsTileRenderer.ResourceState copy(@DrawableRes int appIcon, java.util.Map<java.lang.String,androidx.wear.tiles.ResourceBuilders.ImageResource> images);
    method public int getAppIcon();
    method public java.util.Map<java.lang.String,androidx.wear.tiles.ResourceBuilders.ImageResource> getImages();
    property public final int appIcon;
    property public final java.util.Map<java.lang.String,androidx.wear.tiles.ResourceBuilders.ImageResource> images;
  }

  public final class MediaCollectionsTileTest {
    ctor public MediaCollectionsTileTest(error.NonExistentClass deviceConfig);
    method @androidx.compose.runtime.Composable public void SampleTilePreview();
    method public static error.NonExistentClass! devices();
    method public String getName();
    method public error.NonExistentClass! getPaparazzi();
    method public void mediaCollectionsTile();
    property public final String name;
    property public final error.NonExistentClass! paparazzi;
    field public static final com.google.android.horologist.media.ui.tiles.MediaCollectionsTileTest.Companion Companion;
  }

  public static final class MediaCollectionsTileTest.Companion {
    method public error.NonExistentClass! devices();
  }

  public final class ToTileColorsKt {
    method @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static androidx.wear.tiles.material.Colors toTileColors(androidx.wear.compose.material.Colors);
  }

}

package com.google.android.horologist.media.ui.uamp {

  public final class UampThemeKt {
    method @androidx.compose.runtime.Composable public static void UampTheme(kotlin.jvm.functions.Function0<kotlin.Unit> block);
    method public static androidx.wear.compose.material.Colors getUampColors();
    property public static final androidx.wear.compose.material.Colors UampColors;
  }

}

package com.google.android.horologist.media.ui.util {

  public final class IfNanKt {
  }

}

package com.google.android.horologist.test.toolbox.matchers {

  public final class HasProgressBarKt {
    method public static error.NonExistentClass! hasProgressBar();
  }

}

package com.google.android.horologist.test.toolbox.testdoubles {

  public final class FakePlayerRepository implements com.google.android.horologist.media.repository.PlayerRepository {
    ctor public FakePlayerRepository();
    method public void addCommand(com.google.android.horologist.media.model.Command command);
    method public void addMedia(com.google.android.horologist.media.model.Media media);
    method public void addMedia(int index, com.google.android.horologist.media.model.Media media);
    method public void clearMediaList();
    method public kotlinx.coroutines.flow.StateFlow<java.util.Set<com.google.android.horologist.media.model.Command>> getAvailableCommands();
    method public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> getConnected();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.Media> getCurrentMedia();
    method public int getCurrentMediaIndex();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.PlaybackStateEvent> getLatestPlaybackState();
    method public com.google.android.horologist.media.model.Media? getMediaAt(int index);
    method public int getMediaCount();
    method public kotlinx.coroutines.flow.StateFlow<kotlin.time.Duration> getSeekBackIncrement();
    method public kotlinx.coroutines.flow.StateFlow<kotlin.time.Duration> getSeekForwardIncrement();
    method public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> getShuffleModeEnabled();
    method public boolean hasNextMedia();
    method public boolean hasPreviousMedia();
    method public void pause();
    method public void play();
    method public void removeMedia(int index);
    method public void seekBack();
    method public void seekForward();
    method public void seekToDefaultPosition(int mediaIndex);
    method public void setMedia(com.google.android.horologist.media.model.Media media);
    method public void setMediaList(java.util.List<com.google.android.horologist.media.model.Media> mediaList);
    method public void setMediaList(java.util.List<com.google.android.horologist.media.model.Media> mediaList, int index, kotlin.time.Duration? position);
    method public void setPlaybackSpeed(float speed);
    method public void setPosition(kotlin.time.Duration? position, kotlin.time.Duration? duration);
    method public void setShuffleModeEnabled(boolean shuffleModeEnabled);
    method public void skipToNextMedia();
    method public void skipToPreviousMedia();
    property public kotlinx.coroutines.flow.StateFlow<java.util.Set<com.google.android.horologist.media.model.Command>> availableCommands;
    property public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> connected;
    property public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.Media> currentMedia;
    property public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.PlaybackStateEvent> latestPlaybackState;
    property public kotlinx.coroutines.flow.StateFlow<kotlin.time.Duration> seekBackIncrement;
    property public kotlinx.coroutines.flow.StateFlow<kotlin.time.Duration> seekForwardIncrement;
    property public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> shuffleModeEnabled;
  }

  public final class MockPlayerRepository implements com.google.android.horologist.media.repository.PlayerRepository {
    ctor public MockPlayerRepository(optional boolean connectedValue, optional java.util.Set<? extends com.google.android.horologist.media.model.Command> availableCommandsValue, optional com.google.android.horologist.media.model.PlaybackStateEvent playbackStateEvent, optional com.google.android.horologist.media.model.Media? currentMediaValue, optional boolean shuffleModeEnabledValue, optional kotlin.time.Duration? seekBackIncrementValue, optional kotlin.time.Duration? seekForwardIncrementValue);
    method public void addMedia(com.google.android.horologist.media.model.Media media);
    method public void addMedia(int index, com.google.android.horologist.media.model.Media media);
    method public void clearMediaList();
    method public kotlinx.coroutines.flow.StateFlow<java.util.Set<com.google.android.horologist.media.model.Command>> getAvailableCommands();
    method public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> getConnected();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.Media> getCurrentMedia();
    method public int getCurrentMediaIndex();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.PlaybackStateEvent> getLatestPlaybackState();
    method public com.google.android.horologist.media.model.Media? getMediaAt(int index);
    method public int getMediaCount();
    method public kotlinx.coroutines.flow.StateFlow<kotlin.time.Duration> getSeekBackIncrement();
    method public kotlinx.coroutines.flow.StateFlow<kotlin.time.Duration> getSeekForwardIncrement();
    method public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> getShuffleModeEnabled();
    method public boolean hasNextMedia();
    method public boolean hasPreviousMedia();
    method public void pause();
    method public void play();
    method public void removeMedia(int index);
    method public void seekBack();
    method public void seekForward();
    method public void seekToDefaultPosition(int mediaIndex);
    method public void setMedia(com.google.android.horologist.media.model.Media media);
    method public void setMediaList(java.util.List<com.google.android.horologist.media.model.Media> mediaList);
    method public void setMediaList(java.util.List<com.google.android.horologist.media.model.Media> mediaList, int index, kotlin.time.Duration? position);
    method public void setPlaybackSpeed(float speed);
    method public void setShuffleModeEnabled(boolean shuffleModeEnabled);
    method public void skipToNextMedia();
    method public void skipToPreviousMedia();
    property public kotlinx.coroutines.flow.StateFlow<java.util.Set<com.google.android.horologist.media.model.Command>> availableCommands;
    property public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> connected;
    property public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.Media> currentMedia;
    property public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.PlaybackStateEvent> latestPlaybackState;
    property public kotlinx.coroutines.flow.StateFlow<kotlin.time.Duration> seekBackIncrement;
    property public kotlinx.coroutines.flow.StateFlow<kotlin.time.Duration> seekForwardIncrement;
    property public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> shuffleModeEnabled;
  }

}

