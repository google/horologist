// Signature format: 4.0
package com.google.android.horologist.media.ui {

  @kotlin.RequiresOptIn(message="Horologist Media UI is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public @interface ExperimentalHorologistMediaUiApi {
  }

}

package com.google.android.horologist.media.ui.components {

  public final class DefaultMediaDisplayKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void DefaultMediaDisplay(com.google.android.horologist.media.ui.state.model.MediaItemUiModel? mediaItem, optional androidx.compose.ui.Modifier modifier);
  }

  public final class EntityButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void EntityButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, androidx.compose.ui.graphics.vector.ImageVector icon, String contentDescription, optional androidx.compose.ui.Modifier modifier, optional boolean enabled);
  }

  public final class InfoMediaDisplayKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void InfoMediaDisplay(optional androidx.compose.ui.Modifier modifier, optional String? message);
  }

  public final class LoadingMediaDisplayKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void LoadingMediaDisplay(optional androidx.compose.ui.Modifier modifier);
  }

  public final class MediaArtworkKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void MediaArtwork(com.google.android.horologist.media.ui.state.model.MediaItemUiModel mediaItem, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.graphics.painter.Painter? placeholder);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void MediaArtwork(Object? artworkUri, String? contentDescription, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.graphics.painter.Painter? placeholder);
  }

  public final class MediaChipKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void MediaChip(com.google.android.horologist.media.ui.state.model.MediaItemUiModel mediaItem, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional String defaultTitle, optional androidx.compose.ui.graphics.painter.Painter? placeholder);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void MediaChip(String title, Object? artworkUri, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.graphics.painter.Painter? placeholder);
  }

  public final class MediaControlButtonsKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void MediaControlButtons(kotlin.jvm.functions.Function0<kotlin.Unit> onPlayButtonClick, kotlin.jvm.functions.Function0<kotlin.Unit> onPauseButtonClick, boolean playPauseButtonEnabled, boolean playing, float percent, kotlin.jvm.functions.Function0<kotlin.Unit> onSeekToPreviousButtonClick, boolean seekToPreviousButtonEnabled, kotlin.jvm.functions.Function0<kotlin.Unit> onSeekToNextButtonClick, boolean seekToNextButtonEnabled, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material.ButtonColors colors, optional long progressColour);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void MediaControlButtons(kotlin.jvm.functions.Function0<kotlin.Unit> onPlayButtonClick, kotlin.jvm.functions.Function0<kotlin.Unit> onPauseButtonClick, boolean playPauseButtonEnabled, boolean playing, kotlin.jvm.functions.Function0<kotlin.Unit> onSeekToPreviousButtonClick, boolean seekToPreviousButtonEnabled, kotlin.jvm.functions.Function0<kotlin.Unit> onSeekToNextButtonClick, boolean seekToNextButtonEnabled, optional androidx.compose.ui.Modifier modifier, optional androidx.wear.compose.material.ButtonColors colors);
  }

  public final class PlayPauseButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void PlayPauseButton(kotlin.jvm.functions.Function0<kotlin.Unit> onPlayClick, kotlin.jvm.functions.Function0<kotlin.Unit> onPauseClick, boolean playing, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors, optional kotlin.jvm.functions.Function0<kotlin.Unit> progress);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void PlayPauseProgressButton(kotlin.jvm.functions.Function0<kotlin.Unit> onPlayClick, kotlin.jvm.functions.Function0<kotlin.Unit> onPauseClick, boolean playing, float percent, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors, optional long progressColour);
  }

  public final class PodcastControlButtonsKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void PodcastControlButtons(kotlin.jvm.functions.Function0<kotlin.Unit> onPlayButtonClick, kotlin.jvm.functions.Function0<kotlin.Unit> onPauseButtonClick, boolean playPauseButtonEnabled, boolean playing, float percent, kotlin.jvm.functions.Function0<kotlin.Unit> onSeekBackButtonClick, boolean seekBackButtonEnabled, kotlin.jvm.functions.Function0<kotlin.Unit> onSeekForwardButtonClick, boolean seekForwardButtonEnabled, optional androidx.compose.ui.Modifier modifier, optional com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekBackButtonIncrement, optional com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekForwardButtonIncrement, optional androidx.wear.compose.material.ButtonColors colors, optional long progressColour);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void PodcastControlButtons(kotlin.jvm.functions.Function0<kotlin.Unit> onPlayButtonClick, kotlin.jvm.functions.Function0<kotlin.Unit> onPauseButtonClick, boolean playPauseButtonEnabled, boolean playing, kotlin.jvm.functions.Function0<kotlin.Unit> onSeekBackButtonClick, boolean seekBackButtonEnabled, kotlin.jvm.functions.Function0<kotlin.Unit> onSeekForwardButtonClick, boolean seekForwardButtonEnabled, optional androidx.compose.ui.Modifier modifier, optional com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekBackButtonIncrement, optional com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekForwardButtonIncrement, optional androidx.wear.compose.material.ButtonColors colors);
  }

  public final class TextMediaDisplayKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void TextMediaDisplay(optional androidx.compose.ui.Modifier modifier, optional String? title, optional String? artist);
  }

}

package com.google.android.horologist.media.ui.components.actions {

  public final class ShowPlaylistChipKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void ShowPlaylistChip(Object? artworkUri, String? name, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.graphics.painter.Painter? placeholder);
  }

}

package com.google.android.horologist.media.ui.components.animated {

  public final class AnimatedMediaButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void AnimatedMediaButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, com.airbnb.lottie.LottieComposition? composition, com.airbnb.lottie.compose.LottieAnimatable lottieAnimatable, String contentDescription, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors, optional com.airbnb.lottie.compose.LottieDynamicProperties? dynamicProperties);
  }

  public final class AnimatedSeekToNextButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void AnimatedSeekToNextButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors);
  }

  public final class AnimatedSeekToPreviousButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void AnimatedSeekToPreviousButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors);
  }

}

package com.google.android.horologist.media.ui.components.background {

  public final class ArtworkColorBackgroundKt {
    method @androidx.compose.runtime.Composable public static void ArtworkColorBackground(Object? artworkUri, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.graphics.Color? defaultColor);
    method @androidx.compose.runtime.Composable public static void ColorBackground(androidx.compose.ui.graphics.Color? color, optional androidx.compose.ui.Modifier modifier);
  }

  public final class RadialBackgroundKt {
    method @androidx.compose.runtime.Composable public static void RadialBackground(androidx.compose.ui.graphics.Color? color);
  }

}

package com.google.android.horologist.media.ui.components.controls {

  public final class MediaButtonDefaults {
    method @androidx.compose.runtime.Composable public androidx.wear.compose.material.ButtonColors getMediaButtonDefaultColors();
    property @androidx.compose.runtime.Composable public final androidx.wear.compose.material.ButtonColors mediaButtonDefaultColors;
    field public static final com.google.android.horologist.media.ui.components.controls.MediaButtonDefaults INSTANCE;
  }

  public final class MediaButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void MediaButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, androidx.compose.ui.graphics.vector.ImageVector icon, String contentDescription, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors);
  }

  public final class PauseButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void PauseButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors);
  }

  public final class PlayButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void PlayButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors);
  }

  public final class SeekBackButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void SeekBackButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekButtonIncrement, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors);
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public abstract sealed class SeekButtonIncrement {
    method public int getSeconds();
    property public int seconds;
  }

  public static final class SeekButtonIncrement.Five extends com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement {
    field public static final com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement.Five INSTANCE;
  }

  public static final class SeekButtonIncrement.Other extends com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement {
    ctor public SeekButtonIncrement.Other(int seconds);
    method public int component1();
    method public com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement.Other copy(int seconds);
    property public int seconds;
  }

  public static final class SeekButtonIncrement.Ten extends com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement {
    field public static final com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement.Ten INSTANCE;
  }

  public static final class SeekButtonIncrement.Thirty extends com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement {
    field public static final com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement.Thirty INSTANCE;
  }

  public static final class SeekButtonIncrement.Unknown extends com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement {
    field public static final com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement.Unknown INSTANCE;
  }

  public final class SeekForwardButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void SeekForwardButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekButtonIncrement, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors);
  }

  public final class SeekToNextButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void SeekToNextButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors);
  }

  public final class SeekToPreviousButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void SeekToPreviousButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors);
  }

  public final class ShuffleButtonKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void ShuffleButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, boolean shuffleOn, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.wear.compose.material.ButtonColors colors);
  }

}

package com.google.android.horologist.media.ui.navigation {

  public final class MediaNavController {
    method public void navigateToCollection(androidx.navigation.NavController, String collectionId);
    method public void navigateToCollections(androidx.navigation.NavController);
    method public void navigateToLibrary(androidx.navigation.NavController);
    method public void navigateToMediaItem(androidx.navigation.NavController, String mediaItemId, String? collectionId);
    method public void navigateToPlayer(androidx.navigation.NavController);
    method public void navigateToSettings(androidx.navigation.NavController);
    method public void navigateToVolume(androidx.navigation.NavController);
    field public static final com.google.android.horologist.media.ui.navigation.MediaNavController INSTANCE;
  }

  public final class MediaPlayerScaffoldKt {
    method @androidx.compose.runtime.Composable public static void MediaPlayerScaffold(optional androidx.compose.ui.Modifier modifier, optional com.google.android.horologist.media.ui.snackbar.SnackbarViewModel snackbarViewModel, optional com.google.android.horologist.audio.ui.VolumeViewModel volumeViewModel, kotlin.jvm.functions.Function1<? super androidx.compose.ui.focus.FocusRequester,kotlin.Unit> playerScreen, kotlin.jvm.functions.Function2<? super androidx.compose.ui.focus.FocusRequester,? super androidx.wear.compose.material.ScalingLazyListState,kotlin.Unit> libraryScreen, kotlin.jvm.functions.Function2<? super androidx.compose.ui.focus.FocusRequester,? super androidx.wear.compose.material.ScalingLazyListState,kotlin.Unit> categoryEntityScreen, kotlin.jvm.functions.Function2<? super androidx.compose.ui.focus.FocusRequester,? super androidx.wear.compose.material.ScalingLazyListState,kotlin.Unit> mediaEntityScreen, kotlin.jvm.functions.Function2<? super androidx.compose.ui.focus.FocusRequester,? super androidx.wear.compose.material.ScalingLazyListState,kotlin.Unit> playlistsScreen, kotlin.jvm.functions.Function2<? super androidx.compose.ui.focus.FocusRequester,? super androidx.wear.compose.material.ScalingLazyListState,kotlin.Unit> settingsScreen, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.focus.FocusRequester,kotlin.Unit> volumeScreen, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.Modifier,kotlin.Unit> timeText, optional com.google.accompanist.pager.PagerState pagerState, String deepLinkPrefix, androidx.navigation.NavHostController navController, optional kotlin.jvm.functions.Function1<? super androidx.navigation.NavGraphBuilder,kotlin.Unit> additionalNavRoutes);
  }

  public abstract sealed class NavigationScreens {
    method public final String getRoute();
    property public final String route;
  }

  public static final class NavigationScreens.Collection extends com.google.android.horologist.media.ui.navigation.NavigationScreens {
    field public static final com.google.android.horologist.media.ui.navigation.NavigationScreens.Collection INSTANCE;
  }

  public static final class NavigationScreens.Collections extends com.google.android.horologist.media.ui.navigation.NavigationScreens {
    field public static final com.google.android.horologist.media.ui.navigation.NavigationScreens.Collections INSTANCE;
  }

  public static final class NavigationScreens.Login extends com.google.android.horologist.media.ui.navigation.NavigationScreens {
    field public static final com.google.android.horologist.media.ui.navigation.NavigationScreens.Login INSTANCE;
  }

  public static final class NavigationScreens.MediaItem extends com.google.android.horologist.media.ui.navigation.NavigationScreens {
    field public static final com.google.android.horologist.media.ui.navigation.NavigationScreens.MediaItem INSTANCE;
  }

  public static final class NavigationScreens.Player extends com.google.android.horologist.media.ui.navigation.NavigationScreens {
    method public String getLibrary();
    method public String getPlayer();
    property public final String library;
    property public final String player;
    field public static final com.google.android.horologist.media.ui.navigation.NavigationScreens.Player INSTANCE;
  }

  public static final class NavigationScreens.Settings extends com.google.android.horologist.media.ui.navigation.NavigationScreens {
    field public static final com.google.android.horologist.media.ui.navigation.NavigationScreens.Settings INSTANCE;
  }

  public static final class NavigationScreens.Volume extends com.google.android.horologist.media.ui.navigation.NavigationScreens {
    field public static final com.google.android.horologist.media.ui.navigation.NavigationScreens.Volume INSTANCE;
  }

}

package com.google.android.horologist.media.ui.screens {

  public final class PlayerLibraryPagerScreenKt {
    method @androidx.compose.runtime.Composable public static void PlayerLibraryPagerScreen(com.google.accompanist.pager.PagerState pagerState, com.google.android.horologist.audio.ui.VolumeScrollableState volumeScrollableState, kotlin.jvm.functions.Function0<com.google.android.horologist.audio.VolumeState> volumeState, kotlin.jvm.functions.Function1<? super androidx.compose.ui.Modifier,kotlin.Unit> timeText, kotlin.jvm.functions.Function1<? super androidx.compose.ui.focus.FocusRequester,kotlin.Unit> playerScreen, kotlin.jvm.functions.Function2<? super androidx.compose.ui.focus.FocusRequester,? super androidx.wear.compose.material.ScalingLazyListState,kotlin.Unit> libraryScreen, androidx.navigation.NavBackStackEntry backStack, optional androidx.compose.ui.Modifier modifier);
  }

  public final class PlayerScreenKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void DefaultPlayerScreenControlButtons(com.google.android.horologist.media.ui.state.PlayerViewModel playerViewModel, com.google.android.horologist.media.ui.state.PlayerUiState playerUiState, optional boolean showProgress);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void DefaultPlayerScreenMediaDisplay(com.google.android.horologist.media.ui.state.PlayerUiState playerUiState, optional androidx.compose.ui.Modifier modifier);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void PlayerScreen(com.google.android.horologist.media.ui.state.PlayerViewModel playerViewModel, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.ColumnScope,? super com.google.android.horologist.media.ui.state.PlayerUiState,kotlin.Unit> mediaDisplay, optional kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.RowScope,? super com.google.android.horologist.media.ui.state.PlayerUiState,kotlin.Unit> controlButtons, optional kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.RowScope,? super com.google.android.horologist.media.ui.state.PlayerUiState,kotlin.Unit> buttons, optional kotlin.jvm.functions.Function2<? super androidx.compose.foundation.layout.BoxScope,? super com.google.android.horologist.media.ui.state.PlayerUiState,kotlin.Unit> background);
    method @androidx.compose.runtime.Composable @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public static void PlayerScreen(kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> mediaDisplay, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> controlButtons, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> buttons, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> background);
  }

}

package com.google.android.horologist.media.ui.semantics {

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public final class CustomSemanticsProperties {
    method public androidx.compose.ui.graphics.vector.ImageVector getIconImageVector(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.graphics.vector.ImageVector> getIconImageVectorKey();
    method public void setIconImageVector(androidx.compose.ui.semantics.SemanticsPropertyReceiver, androidx.compose.ui.graphics.vector.ImageVector iconImageVector);
    property public final androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.graphics.vector.ImageVector> IconImageVectorKey;
    property public final androidx.compose.ui.graphics.vector.ImageVector iconImageVector;
    field public static final com.google.android.horologist.media.ui.semantics.CustomSemanticsProperties INSTANCE;
  }

}

package com.google.android.horologist.media.ui.snackbar {

  public final class SnackbarManager {
    ctor public SnackbarManager();
    method public kotlinx.coroutines.flow.StateFlow<java.util.List<com.google.android.horologist.media.ui.snackbar.UiMessage>> getMessages();
    method public void setMessageShown(String messageId);
    method public void showMessage(com.google.android.horologist.media.ui.snackbar.UiMessage message);
    method public void showMessage(String message);
    property public final kotlinx.coroutines.flow.StateFlow<java.util.List<com.google.android.horologist.media.ui.snackbar.UiMessage>> messages;
  }

  public class SnackbarViewModel extends androidx.lifecycle.ViewModel {
    ctor public SnackbarViewModel(com.google.android.horologist.media.ui.snackbar.SnackbarManager snackbarManager);
    method public final com.google.android.horologist.compose.snackbar.SnackbarHostState getSnackbarHostState();
    property public final com.google.android.horologist.compose.snackbar.SnackbarHostState snackbarHostState;
    field public static final com.google.android.horologist.media.ui.snackbar.SnackbarViewModel.Companion Companion;
  }

  public static final class SnackbarViewModel.Companion {
    method public androidx.lifecycle.ViewModelProvider.Factory getFactory();
    method public androidx.lifecycle.viewmodel.CreationExtras.Key<com.google.android.horologist.media.ui.snackbar.SnackbarManager> getSnackbarManagerKey();
    property public final androidx.lifecycle.ViewModelProvider.Factory Factory;
    property public final androidx.lifecycle.viewmodel.CreationExtras.Key<com.google.android.horologist.media.ui.snackbar.SnackbarManager> SnackbarManagerKey;
  }

  public final class UiMessage {
    ctor public UiMessage(String message, optional String id, optional boolean error);
    method public String component1();
    method public String component2();
    method public boolean component3();
    method public com.google.android.horologist.media.ui.snackbar.UiMessage copy(String message, String id, boolean error);
    method public boolean getError();
    method public String getId();
    method public String getMessage();
    property public final boolean error;
    property public final String id;
    property public final String message;
  }

}

package com.google.android.horologist.media.ui.state {

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public final class PlayerUiState {
    ctor public PlayerUiState(boolean playEnabled, boolean pauseEnabled, boolean seekBackEnabled, boolean seekForwardEnabled, boolean seekToPreviousEnabled, boolean seekToNextEnabled, boolean shuffleEnabled, boolean shuffleOn, boolean playPauseEnabled, boolean playing, com.google.android.horologist.media.ui.state.model.MediaItemUiModel? mediaItem, com.google.android.horologist.media.ui.state.model.TrackPositionUiModel? trackPosition, optional com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekBackButtonIncrement, optional com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekForwardButtonIncrement, boolean connected);
    method public boolean component1();
    method public boolean component10();
    method public com.google.android.horologist.media.ui.state.model.MediaItemUiModel? component11();
    method public com.google.android.horologist.media.ui.state.model.TrackPositionUiModel? component12();
    method public com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement component13();
    method public com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement component14();
    method public boolean component15();
    method public boolean component2();
    method public boolean component3();
    method public boolean component4();
    method public boolean component5();
    method public boolean component6();
    method public boolean component7();
    method public boolean component8();
    method public boolean component9();
    method public com.google.android.horologist.media.ui.state.PlayerUiState copy(boolean playEnabled, boolean pauseEnabled, boolean seekBackEnabled, boolean seekForwardEnabled, boolean seekToPreviousEnabled, boolean seekToNextEnabled, boolean shuffleEnabled, boolean shuffleOn, boolean playPauseEnabled, boolean playing, com.google.android.horologist.media.ui.state.model.MediaItemUiModel? mediaItem, com.google.android.horologist.media.ui.state.model.TrackPositionUiModel? trackPosition, com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekBackButtonIncrement, com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekForwardButtonIncrement, boolean connected);
    method public boolean getConnected();
    method public com.google.android.horologist.media.ui.state.model.MediaItemUiModel? getMediaItem();
    method public boolean getPauseEnabled();
    method public boolean getPlayEnabled();
    method public boolean getPlayPauseEnabled();
    method public boolean getPlaying();
    method public com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement getSeekBackButtonIncrement();
    method public boolean getSeekBackEnabled();
    method public com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement getSeekForwardButtonIncrement();
    method public boolean getSeekForwardEnabled();
    method public boolean getSeekToNextEnabled();
    method public boolean getSeekToPreviousEnabled();
    method public boolean getShuffleEnabled();
    method public boolean getShuffleOn();
    method public com.google.android.horologist.media.ui.state.model.TrackPositionUiModel? getTrackPosition();
    property public final boolean connected;
    property public final com.google.android.horologist.media.ui.state.model.MediaItemUiModel? mediaItem;
    property public final boolean pauseEnabled;
    property public final boolean playEnabled;
    property public final boolean playPauseEnabled;
    property public final boolean playing;
    property public final com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekBackButtonIncrement;
    property public final boolean seekBackEnabled;
    property public final com.google.android.horologist.media.ui.components.controls.SeekButtonIncrement seekForwardButtonIncrement;
    property public final boolean seekForwardEnabled;
    property public final boolean seekToNextEnabled;
    property public final boolean seekToPreviousEnabled;
    property public final boolean shuffleEnabled;
    property public final boolean shuffleOn;
    property public final com.google.android.horologist.media.ui.state.model.TrackPositionUiModel? trackPosition;
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public class PlayerViewModel extends androidx.lifecycle.ViewModel {
    ctor public PlayerViewModel(com.google.android.horologist.media.repository.PlayerRepository playerRepository);
    method public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.ui.state.PlayerUiState> getPlayerUiState();
    method public final void pause();
    method public final void play();
    method public final void seekBack();
    method public final void seekForward();
    method public final void skipToNextMediaItem();
    method public final void skipToPreviousMediaItem();
    property public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.ui.state.PlayerUiState> playerUiState;
    field public static final com.google.android.horologist.media.ui.state.PlayerViewModel.Companion Companion;
  }

  public static final class PlayerViewModel.Companion {
  }

}

package com.google.android.horologist.media.ui.state.mapper {

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public final class MediaItemUiModelMapper {
    method public com.google.android.horologist.media.ui.state.model.MediaItemUiModel map(com.google.android.horologist.media.model.MediaItem mediaItem);
    field public static final com.google.android.horologist.media.ui.state.mapper.MediaItemUiModelMapper INSTANCE;
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public final class PlayerUiStateMapper {
    method public com.google.android.horologist.media.ui.state.PlayerUiState map(com.google.android.horologist.media.model.PlayerState currentState, java.util.Set<? extends com.google.android.horologist.media.model.Command> availableCommands, com.google.android.horologist.media.model.MediaItem? mediaItem, com.google.android.horologist.media.model.MediaItemPosition? mediaItemPosition, boolean shuffleModeEnabled, boolean connected);
    field public static final com.google.android.horologist.media.ui.state.mapper.PlayerUiStateMapper INSTANCE;
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public final class TrackPositionUiModelMapper {
    method public com.google.android.horologist.media.ui.state.model.TrackPositionUiModel map(com.google.android.horologist.media.model.MediaItemPosition mediaItemPosition);
    field public static final com.google.android.horologist.media.ui.state.mapper.TrackPositionUiModelMapper INSTANCE;
  }

}

package com.google.android.horologist.media.ui.state.model {

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public final class MediaItemUiModel {
    ctor public MediaItemUiModel(String id, optional String? title, optional String? artist, optional String? artworkUri);
    method public String component1();
    method public String? component2();
    method public String? component3();
    method public String? component4();
    method public com.google.android.horologist.media.ui.state.model.MediaItemUiModel copy(String id, String? title, String? artist, String? artworkUri);
    method public String? getArtist();
    method public String? getArtworkUri();
    method public String getId();
    method public String? getTitle();
    property public final String? artist;
    property public final String? artworkUri;
    property public final String id;
    property public final String? title;
  }

  @com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi public final class TrackPositionUiModel {
    ctor public TrackPositionUiModel(long current, long duration, float percent);
    method public long component1();
    method public long component2();
    method public float component3();
    method public com.google.android.horologist.media.ui.state.model.TrackPositionUiModel copy(long current, long duration, float percent);
    method public long getCurrent();
    method public long getDuration();
    method public float getPercent();
    property public final long current;
    property public final long duration;
    property public final float percent;
  }

}

