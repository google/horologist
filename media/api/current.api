// Signature format: 4.0
package com.google.android.horologist.media {

  @kotlin.RequiresOptIn(message="Horologist Media is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalHorologistMediaApi {
  }

}

package com.google.android.horologist.media.model {

  @com.google.android.horologist.media.ExperimentalHorologistMediaApi public enum Command {
    enum_constant public static final com.google.android.horologist.media.model.Command PlayPause;
    enum_constant public static final com.google.android.horologist.media.model.Command SeekBack;
    enum_constant public static final com.google.android.horologist.media.model.Command SeekForward;
    enum_constant public static final com.google.android.horologist.media.model.Command SetShuffle;
    enum_constant public static final com.google.android.horologist.media.model.Command SkipToNextMedia;
    enum_constant public static final com.google.android.horologist.media.model.Command SkipToPreviousMedia;
  }

  @com.google.android.horologist.media.ExperimentalHorologistMediaApi public final class Media {
    ctor public Media(String id, String uri, String title, String artist, optional String? artworkUri, optional java.util.Map<java.lang.String,?> extras);
    method public String component1();
    method public String component2();
    method public String component3();
    method public String component4();
    method public String? component5();
    method public java.util.Map<java.lang.String,java.lang.Object> component6();
    method public com.google.android.horologist.media.model.Media copy(String id, String uri, String title, String artist, String? artworkUri, java.util.Map<java.lang.String,?> extras);
    method public boolean equals(Object? other);
    method public String getArtist();
    method public String? getArtworkUri();
    method public java.util.Map<java.lang.String,java.lang.Object> getExtras();
    method public String getId();
    method public String getTitle();
    method public String getUri();
    method public int hashCode();
    method public String toString();
    property public final String artist;
    property public final String? artworkUri;
    property public final java.util.Map<java.lang.String,java.lang.Object> extras;
    property public final String id;
    property public final String title;
    property public final String uri;
  }

  @com.google.android.horologist.media.ExperimentalHorologistMediaApi public abstract sealed class MediaPosition {
    method public long getCurrent();
    property public long current;
    field public static final com.google.android.horologist.media.model.MediaPosition.Companion Companion;
  }

  public static final class MediaPosition.Companion {
    method public com.google.android.horologist.media.model.MediaPosition.KnownDuration create(long current, long duration);
  }

  public static final class MediaPosition.KnownDuration extends com.google.android.horologist.media.model.MediaPosition {
    method public long getDuration();
    method public float getPercent();
    property public long current;
    property public final long duration;
    property public final float percent;
  }

  public static final class MediaPosition.UnknownDuration extends com.google.android.horologist.media.model.MediaPosition {
    ctor public MediaPosition.UnknownDuration(long current);
    method public long component1-UwyO8pc();
    method public com.google.android.horologist.media.model.MediaPosition.UnknownDuration copy-LRDsOJo(long current);
    method public boolean equals(Object? other);
    method public int hashCode();
    method public String toString();
    property public long current;
  }

  @com.google.android.horologist.media.ExperimentalHorologistMediaApi public enum PlayerState {
    enum_constant public static final com.google.android.horologist.media.model.PlayerState Ended;
    enum_constant public static final com.google.android.horologist.media.model.PlayerState Idle;
    enum_constant public static final com.google.android.horologist.media.model.PlayerState Loading;
    enum_constant public static final com.google.android.horologist.media.model.PlayerState Playing;
    enum_constant public static final com.google.android.horologist.media.model.PlayerState Ready;
  }

}

package com.google.android.horologist.media.repository {

  @com.google.android.horologist.media.ExperimentalHorologistMediaApi public interface PlayerRepository {
    method public void addMedia(com.google.android.horologist.media.model.Media media);
    method public void addMedia(int index, com.google.android.horologist.media.model.Media media);
    method public void clearMediaList();
    method public kotlinx.coroutines.flow.StateFlow<java.util.Set<com.google.android.horologist.media.model.Command>> getAvailableCommands();
    method public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> getConnected();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.Media> getCurrentMedia();
    method public int getCurrentMediaIndex();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.PlayerState> getCurrentState();
    method public com.google.android.horologist.media.model.Media? getMediaAt(int index);
    method public int getMediaCount();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.MediaPosition> getMediaPosition();
    method public long getSeekBackIncrement();
    method public long getSeekForwardIncrement();
    method public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> getShuffleModeEnabled();
    method public boolean hasNextMedia();
    method public boolean hasPreviousMedia();
    method public void pause();
    method public void play();
    method public void prepare();
    method public void release();
    method public void removeMedia(int index);
    method public void seekBack();
    method public void seekForward();
    method public void seekToDefaultPosition(int mediaIndex);
    method public void setMedia(com.google.android.horologist.media.model.Media media);
    method public void setMediaList(java.util.List<com.google.android.horologist.media.model.Media> mediaList);
    method public void setShuffleModeEnabled(boolean shuffleModeEnabled);
    method public void skipToNextMedia();
    method public void skipToPreviousMedia();
    property public abstract kotlinx.coroutines.flow.StateFlow<java.util.Set<com.google.android.horologist.media.model.Command>> availableCommands;
    property public abstract kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> connected;
    property public abstract kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.Media> currentMedia;
    property public abstract kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.PlayerState> currentState;
    property public abstract kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.MediaPosition> mediaPosition;
    property public abstract kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> shuffleModeEnabled;
  }

}

