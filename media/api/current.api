// Signature format: 4.0
package com.google.android.horologist.media {

  @kotlin.RequiresOptIn(message="Horologist Media is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public @interface ExperimentalHorologistMediaApi {
  }

}

package com.google.android.horologist.media.model {

  public enum Command {
    enum_constant public static final com.google.android.horologist.media.model.Command PlayPause;
    enum_constant public static final com.google.android.horologist.media.model.Command SeekBack;
    enum_constant public static final com.google.android.horologist.media.model.Command SeekForward;
    enum_constant public static final com.google.android.horologist.media.model.Command SeekToNextMediaItem;
    enum_constant public static final com.google.android.horologist.media.model.Command SeekToPreviousMediaItem;
    enum_constant public static final com.google.android.horologist.media.model.Command SetShuffle;
  }

  public final class MediaItem {
    ctor public MediaItem(optional String? title, optional String? artist);
    method public String? component1();
    method public String? component2();
    method public com.google.android.horologist.media.model.MediaItem copy(String? title, String? artist);
    method public boolean equals(Object? other);
    method public String? getArtist();
    method public String? getTitle();
    method public int hashCode();
    method public String toString();
    property public final String? artist;
    property public final String? title;
  }

  public final class MediaItemPosition {
    ctor public MediaItemPosition(long current, long duration);
    method public long component1();
    method public long component2();
    method public com.google.android.horologist.media.model.MediaItemPosition copy(long current, long duration);
    method public boolean equals(Object? other);
    method public long getCurrent();
    method public long getDuration();
    method public float getPercent();
    method public int hashCode();
    method public String toString();
    property public final long current;
    property public final long duration;
    property public final float percent;
  }

  public enum PlayerState {
    enum_constant public static final com.google.android.horologist.media.model.PlayerState Ended;
    enum_constant public static final com.google.android.horologist.media.model.PlayerState Idle;
    enum_constant public static final com.google.android.horologist.media.model.PlayerState Loading;
    enum_constant public static final com.google.android.horologist.media.model.PlayerState Playing;
    enum_constant public static final com.google.android.horologist.media.model.PlayerState Ready;
  }

}

package com.google.android.horologist.media.repository {

  @com.google.android.horologist.media.ExperimentalHorologistMediaApi public interface PlayerRepository {
    method public void addMediaItem(com.google.android.horologist.media.model.MediaItem mediaItem);
    method public void addMediaItem(int index, com.google.android.horologist.media.model.MediaItem mediaItem);
    method public void clearMediaItems();
    method public kotlinx.coroutines.flow.StateFlow<java.util.Set<com.google.android.horologist.media.model.Command>> getAvailableCommands();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.MediaItem> getCurrentMediaItem();
    method public int getCurrentMediaItemIndex();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.PlayerState> getCurrentState();
    method public com.google.android.horologist.media.model.MediaItem? getMediaItemAt(int index);
    method public int getMediaItemCount();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.MediaItemPosition> getMediaItemPosition();
    method public long getSeekBackIncrement();
    method public long getSeekForwardIncrement();
    method public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> getShuffleModeEnabled();
    method public boolean getShuffleModeEnabled();
    method public boolean hasNextMediaItem();
    method public boolean hasPreviousMediaItem();
    method public void pause();
    method public void play();
    method public void prepare();
    method public void release();
    method public void removeMediaItem(int index);
    method public void seekBack();
    method public void seekForward();
    method public void seekToNextMediaItem();
    method public void seekToPreviousMediaItem();
    method public void setMediaItem(com.google.android.horologist.media.model.MediaItem mediaItem);
    method public void setMediaItems(java.util.List<com.google.android.horologist.media.model.MediaItem> mediaItems);
    method public void setShuffleModeEnabled(boolean shuffleModeEnabled);
    property public abstract kotlinx.coroutines.flow.StateFlow<java.util.Set<com.google.android.horologist.media.model.Command>> availableCommands;
    property public abstract kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.MediaItem> currentMediaItem;
    property public abstract kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.PlayerState> currentState;
    property public abstract kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.MediaItemPosition> mediaItemPosition;
    property public abstract kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> shuffleModeEnabled;
  }

}

