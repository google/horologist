// Signature format: 4.0
package com.google.android.horologist.media {

  @kotlin.RequiresOptIn(message="Horologist Media is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalHorologistMediaApi {
  }

}

package com.google.android.horologist.media.model {

  @com.google.android.horologist.media.ExperimentalHorologistMediaApi public enum Command {
    enum_constant public static final com.google.android.horologist.media.model.Command PlayPause;
    enum_constant public static final com.google.android.horologist.media.model.Command SeekBack;
    enum_constant public static final com.google.android.horologist.media.model.Command SeekForward;
    enum_constant public static final com.google.android.horologist.media.model.Command SetShuffle;
    enum_constant public static final com.google.android.horologist.media.model.Command SkipToNextMedia;
    enum_constant public static final com.google.android.horologist.media.model.Command SkipToPreviousMedia;
  }

  @com.google.android.horologist.media.ExperimentalHorologistMediaApi public final class Media {
    ctor public Media(String id, String uri, String title, String artist, optional String? artworkUri, optional java.util.Map<java.lang.String,?> extras);
    method public String component1();
    method public String component2();
    method public String component3();
    method public String component4();
    method public String? component5();
    method public java.util.Map<java.lang.String,java.lang.Object> component6();
    method public com.google.android.horologist.media.model.Media copy(String id, String uri, String title, String artist, String? artworkUri, java.util.Map<java.lang.String,?> extras);
    method public boolean equals(Object? other);
    method public String getArtist();
    method public String? getArtworkUri();
    method public java.util.Map<java.lang.String,java.lang.Object> getExtras();
    method public String getId();
    method public String getTitle();
    method public String getUri();
    method public int hashCode();
    method public String toString();
    property public final String artist;
    property public final String? artworkUri;
    property public final java.util.Map<java.lang.String,java.lang.Object> extras;
    property public final String id;
    property public final String title;
    property public final String uri;
  }

  @com.google.android.horologist.media.ExperimentalHorologistMediaApi public final class MediaDownload {
    ctor public MediaDownload(com.google.android.horologist.media.model.Media media, com.google.android.horologist.media.model.MediaDownload.Status status, com.google.android.horologist.media.model.MediaDownload.Size size);
    method public com.google.android.horologist.media.model.Media component1();
    method public com.google.android.horologist.media.model.MediaDownload.Status component2();
    method public com.google.android.horologist.media.model.MediaDownload.Size component3();
    method public com.google.android.horologist.media.model.MediaDownload copy(com.google.android.horologist.media.model.Media media, com.google.android.horologist.media.model.MediaDownload.Status status, com.google.android.horologist.media.model.MediaDownload.Size size);
    method public boolean equals(Object? other);
    method public com.google.android.horologist.media.model.Media getMedia();
    method public com.google.android.horologist.media.model.MediaDownload.Size getSize();
    method public com.google.android.horologist.media.model.MediaDownload.Status getStatus();
    method public int hashCode();
    method public String toString();
    property public final com.google.android.horologist.media.model.Media media;
    property public final com.google.android.horologist.media.model.MediaDownload.Size size;
    property public final com.google.android.horologist.media.model.MediaDownload.Status status;
  }

  public abstract static sealed class MediaDownload.Size {
  }

  public static final class MediaDownload.Size.Known extends com.google.android.horologist.media.model.MediaDownload.Size {
    ctor public MediaDownload.Size.Known(long sizeInBytes);
    method public long component1();
    method public com.google.android.horologist.media.model.MediaDownload.Size.Known copy(long sizeInBytes);
    method public boolean equals(Object? other);
    method public long getSizeInBytes();
    method public int hashCode();
    method public String toString();
    property public final long sizeInBytes;
  }

  public static final class MediaDownload.Size.Unknown extends com.google.android.horologist.media.model.MediaDownload.Size {
    field public static final com.google.android.horologist.media.model.MediaDownload.Size.Unknown INSTANCE;
  }

  public abstract static sealed class MediaDownload.Status {
  }

  public static final class MediaDownload.Status.Completed extends com.google.android.horologist.media.model.MediaDownload.Status {
    field public static final com.google.android.horologist.media.model.MediaDownload.Status.Completed INSTANCE;
  }

  public static final class MediaDownload.Status.Idle extends com.google.android.horologist.media.model.MediaDownload.Status {
    field public static final com.google.android.horologist.media.model.MediaDownload.Status.Idle INSTANCE;
  }

  public static final class MediaDownload.Status.InProgress extends com.google.android.horologist.media.model.MediaDownload.Status {
    ctor public MediaDownload.Status.InProgress(float progress);
    method public float component1();
    method public com.google.android.horologist.media.model.MediaDownload.Status.InProgress copy(float progress);
    method public boolean equals(Object? other);
    method public float getProgress();
    method public int hashCode();
    method public String toString();
    property public final float progress;
  }

  @com.google.android.horologist.media.ExperimentalHorologistMediaApi public abstract sealed class MediaPosition {
    field public static final com.google.android.horologist.media.model.MediaPosition.Companion Companion;
  }

  public static final class MediaPosition.Companion {
    method public com.google.android.horologist.media.model.MediaPosition.KnownDuration create(long current, long duration);
  }

  public static final class MediaPosition.KnownDuration extends com.google.android.horologist.media.model.MediaPosition {
    method public long component1-UwyO8pc();
    method public long component2-UwyO8pc();
    method public float component3();
    method public com.google.android.horologist.media.model.MediaPosition.KnownDuration copy-NqJ4yvY(long current, long duration, float percent);
    method public boolean equals(Object? other);
    method public long getCurrent();
    method public long getDuration();
    method public float getPercent();
    method public int hashCode();
    method public String toString();
    property public final long current;
    property public final long duration;
    property public final float percent;
  }

  public static final class MediaPosition.Unknown extends com.google.android.horologist.media.model.MediaPosition {
    field public static final com.google.android.horologist.media.model.MediaPosition.Unknown INSTANCE;
  }

  @com.google.android.horologist.media.ExperimentalHorologistMediaApi public enum PlayerState {
    enum_constant public static final com.google.android.horologist.media.model.PlayerState Ended;
    enum_constant public static final com.google.android.horologist.media.model.PlayerState Idle;
    enum_constant public static final com.google.android.horologist.media.model.PlayerState Loading;
    enum_constant public static final com.google.android.horologist.media.model.PlayerState Playing;
    enum_constant public static final com.google.android.horologist.media.model.PlayerState Ready;
  }

  @com.google.android.horologist.media.ExperimentalHorologistMediaApi public final class Playlist {
    ctor public Playlist(String id, String name, optional String? artworkUri, java.util.List<com.google.android.horologist.media.model.Media> mediaList);
    method public String component1();
    method public String component2();
    method public String? component3();
    method public java.util.List<com.google.android.horologist.media.model.Media> component4();
    method public com.google.android.horologist.media.model.Playlist copy(String id, String name, String? artworkUri, java.util.List<com.google.android.horologist.media.model.Media> mediaList);
    method public boolean equals(Object? other);
    method public String? getArtworkUri();
    method public String getId();
    method public java.util.List<com.google.android.horologist.media.model.Media> getMediaList();
    method public String getName();
    method public int hashCode();
    method public String toString();
    property public final String? artworkUri;
    property public final String id;
    property public final java.util.List<com.google.android.horologist.media.model.Media> mediaList;
    property public final String name;
  }

  @com.google.android.horologist.media.ExperimentalHorologistMediaApi public final class PlaylistDownload {
    ctor public PlaylistDownload(com.google.android.horologist.media.model.Playlist playlist, java.util.List<com.google.android.horologist.media.model.MediaDownload> mediaList);
    method public com.google.android.horologist.media.model.Playlist component1();
    method public java.util.List<com.google.android.horologist.media.model.MediaDownload> component2();
    method public com.google.android.horologist.media.model.PlaylistDownload copy(com.google.android.horologist.media.model.Playlist playlist, java.util.List<com.google.android.horologist.media.model.MediaDownload> mediaList);
    method public boolean equals(Object? other);
    method public java.util.List<com.google.android.horologist.media.model.MediaDownload> getMediaList();
    method public com.google.android.horologist.media.model.Playlist getPlaylist();
    method public int hashCode();
    method public String toString();
    property public final java.util.List<com.google.android.horologist.media.model.MediaDownload> mediaList;
    property public final com.google.android.horologist.media.model.Playlist playlist;
  }

}

package com.google.android.horologist.media.repository {

  @com.google.android.horologist.media.ExperimentalHorologistMediaApi public interface PlayerRepository {
    method public void addMedia(com.google.android.horologist.media.model.Media media);
    method public void addMedia(int index, com.google.android.horologist.media.model.Media media);
    method public void clearMediaList();
    method public kotlinx.coroutines.flow.StateFlow<java.util.Set<com.google.android.horologist.media.model.Command>> getAvailableCommands();
    method public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> getConnected();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.Media> getCurrentMedia();
    method public int getCurrentMediaIndex();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.PlayerState> getCurrentState();
    method public com.google.android.horologist.media.model.Media? getMediaAt(int index);
    method public int getMediaCount();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.MediaPosition> getMediaPosition();
    method public kotlinx.coroutines.flow.StateFlow<kotlin.time.Duration> getSeekBackIncrement();
    method public kotlinx.coroutines.flow.StateFlow<kotlin.time.Duration> getSeekForwardIncrement();
    method public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> getShuffleModeEnabled();
    method public boolean hasNextMedia();
    method public boolean hasPreviousMedia();
    method public void pause();
    method public void play();
    method public void prepare();
    method public void release();
    method public void removeMedia(int index);
    method public void seekBack();
    method public void seekForward();
    method public void seekToDefaultPosition(int mediaIndex);
    method public void setMedia(com.google.android.horologist.media.model.Media media);
    method public void setMediaList(java.util.List<com.google.android.horologist.media.model.Media> mediaList);
    method public void setMediaListAndPlay(java.util.List<com.google.android.horologist.media.model.Media> mediaList, int index);
    method public void setPlaybackSpeed(float speed);
    method public void setShuffleModeEnabled(boolean shuffleModeEnabled);
    method public void skipToNextMedia();
    method public void skipToPreviousMedia();
    property public abstract kotlinx.coroutines.flow.StateFlow<java.util.Set<com.google.android.horologist.media.model.Command>> availableCommands;
    property public abstract kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> connected;
    property public abstract kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.Media> currentMedia;
    property public abstract kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.PlayerState> currentState;
    property public abstract kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media.model.MediaPosition> mediaPosition;
    property public abstract kotlinx.coroutines.flow.StateFlow<kotlin.time.Duration> seekBackIncrement;
    property public abstract kotlinx.coroutines.flow.StateFlow<kotlin.time.Duration> seekForwardIncrement;
    property public abstract kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> shuffleModeEnabled;
  }

  @com.google.android.horologist.media.ExperimentalHorologistMediaApi public interface PlaylistDownloadRepository {
    method public void download(com.google.android.horologist.media.model.Playlist playlist);
    method public kotlinx.coroutines.flow.Flow<com.google.android.horologist.media.model.PlaylistDownload> get(String playlistId);
    method public void remove(com.google.android.horologist.media.model.Playlist playlist);
  }

  @com.google.android.horologist.media.ExperimentalHorologistMediaApi public interface PlaylistRepository {
    method public suspend Object? get(String playlistId, kotlin.coroutines.Continuation<? super com.google.android.horologist.media.model.Playlist> p);
    method public kotlinx.coroutines.flow.Flow<java.util.List<com.google.android.horologist.media.model.Playlist>> getAll();
    method public kotlinx.coroutines.flow.Flow<java.util.List<com.google.android.horologist.media.model.Playlist>> getAllDownloaded();
  }

}

