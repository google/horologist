// Signature format: 4.0
package com.google.android.horologist.media.benchmark {

  @org.junit.runner.RunWith(AndroidJUnit4::class) public abstract class BaseMediaBaselineProfile {
    ctor public BaseMediaBaselineProfile();
    method public suspend Object? checkPlayingState(androidx.media3.session.MediaBrowser mediaController, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @org.junit.Rule public final androidx.benchmark.macro.junit4.BaselineProfileRule getBaselineRule();
    method @org.junit.Rule public final androidx.test.rule.GrantPermissionRule getGrantPermissionRule();
    method public abstract com.google.android.horologist.media.benchmark.MediaApp getMediaApp();
    method public void onStartup(androidx.benchmark.macro.MacrobenchmarkScope);
    method @org.junit.Test public final void profile();
    method @org.junit.Before public final void setUp();
    property @org.junit.Rule public final androidx.benchmark.macro.junit4.BaselineProfileRule baselineRule;
    property @org.junit.Rule public final androidx.test.rule.GrantPermissionRule grantPermissionRule;
    property public abstract com.google.android.horologist.media.benchmark.MediaApp mediaApp;
  }

  @androidx.test.filters.LargeTest public abstract class BasePlaybackBenchmark {
    ctor public BasePlaybackBenchmark();
    method public suspend Object? checkPlayingState(androidx.media3.session.MediaBrowser mediaController, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @org.junit.Rule public final androidx.benchmark.macro.junit4.MacrobenchmarkRule getBenchmarkRule();
    method @org.junit.Rule public final androidx.test.rule.GrantPermissionRule getGrantPermissionRule();
    method public abstract com.google.android.horologist.media.benchmark.MediaApp getMediaApp();
    method public final com.google.common.util.concurrent.ListenableFuture<androidx.media3.session.MediaBrowser> getMediaControllerFuture();
    method public java.util.List<androidx.benchmark.macro.Metric> metrics();
    method public void onStartup(androidx.benchmark.macro.MacrobenchmarkScope);
    method public final void setMediaControllerFuture(com.google.common.util.concurrent.ListenableFuture<androidx.media3.session.MediaBrowser>);
    method @org.junit.Test public final void startup();
    property @org.junit.Rule public final androidx.benchmark.macro.junit4.MacrobenchmarkRule benchmarkRule;
    property @org.junit.Rule public final androidx.test.rule.GrantPermissionRule grantPermissionRule;
    property public abstract com.google.android.horologist.media.benchmark.MediaApp mediaApp;
    property public final com.google.common.util.concurrent.ListenableFuture<androidx.media3.session.MediaBrowser> mediaControllerFuture;
    field public com.google.common.util.concurrent.ListenableFuture<androidx.media3.session.MediaBrowser> mediaControllerFuture;
  }

  @androidx.test.filters.LargeTest @org.junit.runner.RunWith(Parameterized::class) public abstract class BaseStartupBenchmark {
    ctor public BaseStartupBenchmark();
    method @org.junit.Rule public final androidx.benchmark.macro.junit4.MacrobenchmarkRule getBenchmarkRule();
    method public androidx.benchmark.macro.CompilationMode getCompilationMode();
    method public abstract com.google.android.horologist.media.benchmark.MediaApp getMediaApp();
    method public java.util.List<androidx.benchmark.macro.Metric> metrics();
    method @org.junit.Test public final void startup();
    property @org.junit.Rule public final androidx.benchmark.macro.junit4.MacrobenchmarkRule benchmarkRule;
    property public androidx.benchmark.macro.CompilationMode compilationMode;
    property public abstract com.google.android.horologist.media.benchmark.MediaApp mediaApp;
  }

  public final class MediaApp {
    ctor public MediaApp(String packageName, String service, java.util.List<androidx.media3.common.MediaItem> testMedia);
    method public String component1();
    method public String component2();
    method public java.util.List<androidx.media3.common.MediaItem> component3();
    method public com.google.android.horologist.media.benchmark.MediaApp copy(String packageName, String service, java.util.List<androidx.media3.common.MediaItem> testMedia);
    method public String getPackageName();
    method public android.content.ComponentName getPlayerComponentName();
    method public String getService();
    method public java.util.List<androidx.media3.common.MediaItem> getTestMedia();
    property public final String packageName;
    property public final android.content.ComponentName playerComponentName;
    property public final String service;
    property public final java.util.List<androidx.media3.common.MediaItem> testMedia;
  }

  public final class MediaControllerHelper {
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media3.session.MediaBrowser> lookupController(android.content.ComponentName component);
    method public suspend Object? startPlaying(androidx.media3.session.MediaController, java.util.List<androidx.media3.common.MediaItem> mediaItems, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? stopPlaying(androidx.media3.session.MediaController, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    field public static final com.google.android.horologist.media.benchmark.MediaControllerHelper INSTANCE;
  }

  public final class MediaItems {
    method public androidx.media3.common.MediaItem buildMediaItem(String id, String mediaUri, String? artworkUri, String title, String artist);
    field public static final com.google.android.horologist.media.benchmark.MediaItems INSTANCE;
  }

}

package com.google.android.horologist.media.benchmark.metrics {

  public final class CompositionMetric extends androidx.benchmark.macro.TraceMetric {
    ctor public CompositionMetric(String composable);
    method public java.util.List<androidx.benchmark.macro.Metric.Measurement> getMeasurements(androidx.benchmark.macro.Metric.CaptureInfo captureInfo, androidx.benchmark.perfetto.PerfettoTraceProcessor.Session traceSession);
  }

}

