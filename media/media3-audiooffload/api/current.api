// Signature format: 4.0
package com.google.android.horologist.media3.offload {

  public final class AudioError {
    ctor public AudioError(long time, String message, androidx.media3.exoplayer.analytics.AnalyticsListener.EventTime? eventTime);
    method public long component1();
    method public String component2();
    method public androidx.media3.exoplayer.analytics.AnalyticsListener.EventTime? component3();
    method public com.google.android.horologist.media3.offload.AudioError copy(long time, String message, androidx.media3.exoplayer.analytics.AnalyticsListener.EventTime? eventTime);
    method public androidx.media3.exoplayer.analytics.AnalyticsListener.EventTime? getEventTime();
    method public String getMessage();
    method public long getTime();
    property public final androidx.media3.exoplayer.analytics.AnalyticsListener.EventTime? eventTime;
    property public final String message;
    property public final long time;
  }

  @com.google.android.horologist.annotations.ExperimentalHorologistApi public final class AudioOffloadManager {
    ctor public AudioOffloadManager(com.google.android.horologist.media3.logging.ErrorReporter errorReporter, optional kotlinx.coroutines.flow.Flow<? extends com.google.android.horologist.media3.offload.AudioOffloadStrategy> audioOffloadStrategyFlow);
    method @RequiresApi(29) public suspend Object? connect(androidx.media3.exoplayer.ExoPlayer exoPlayer, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public androidx.media3.exoplayer.ExoPlayer.AudioOffloadListener getAudioOffloadListener();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media3.offload.AudioOffloadStatus> getOffloadStatus();
    method @RequiresApi(29) public suspend Object? printDebugLogsLoop(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public final androidx.media3.exoplayer.ExoPlayer.AudioOffloadListener audioOffloadListener;
    property public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media3.offload.AudioOffloadStatus> offloadStatus;
  }

  @com.google.android.horologist.annotations.ExperimentalHorologistApi public final class AudioOffloadStatus {
    ctor public AudioOffloadStatus(boolean offloadSchedulingEnabled, boolean sleepingForOffload, optional boolean trackOffload, androidx.media3.common.Format? format, boolean isPlaying, java.util.List<com.google.android.horologist.media3.offload.AudioError> errors, com.google.android.horologist.media3.offload.OffloadTimes offloadTimes, String? strategyStatus, com.google.android.horologist.media3.offload.AudioOffloadStrategy? strategy);
    method public boolean component1();
    method public boolean component2();
    method public boolean component3();
    method public androidx.media3.common.Format? component4();
    method public boolean component5();
    method public java.util.List<com.google.android.horologist.media3.offload.AudioError> component6();
    method public com.google.android.horologist.media3.offload.OffloadTimes component7();
    method public String? component8();
    method public com.google.android.horologist.media3.offload.AudioOffloadStrategy? component9();
    method public com.google.android.horologist.media3.offload.AudioOffloadStatus copy(boolean offloadSchedulingEnabled, boolean sleepingForOffload, boolean trackOffload, androidx.media3.common.Format? format, boolean isPlaying, java.util.List<com.google.android.horologist.media3.offload.AudioError> errors, com.google.android.horologist.media3.offload.OffloadTimes offloadTimes, String? strategyStatus, com.google.android.horologist.media3.offload.AudioOffloadStrategy? strategy);
    method public String describe();
    method public java.util.List<com.google.android.horologist.media3.offload.AudioError> getErrors();
    method public androidx.media3.common.Format? getFormat();
    method public boolean getOffloadSchedulingEnabled();
    method public com.google.android.horologist.media3.offload.OffloadTimes getOffloadTimes();
    method public boolean getSleepingForOffload();
    method public com.google.android.horologist.media3.offload.AudioOffloadStrategy? getStrategy();
    method public String? getStrategyStatus();
    method public boolean getTrackOffload();
    method public boolean isPlaying();
    method public String trackOffloadDescription();
    method public com.google.android.horologist.media3.offload.OffloadTimes updateToNow();
    property public final java.util.List<com.google.android.horologist.media3.offload.AudioError> errors;
    property public final androidx.media3.common.Format? format;
    property public final boolean isPlaying;
    property public final boolean offloadSchedulingEnabled;
    property public final com.google.android.horologist.media3.offload.OffloadTimes offloadTimes;
    property public final boolean sleepingForOffload;
    property public final com.google.android.horologist.media3.offload.AudioOffloadStrategy? strategy;
    property public final String? strategyStatus;
    property public final boolean trackOffload;
    field public static final com.google.android.horologist.media3.offload.AudioOffloadStatus.Companion Companion;
  }

  public static final class AudioOffloadStatus.Companion {
    method public com.google.android.horologist.media3.offload.AudioOffloadStatus getDisabled();
    property public final com.google.android.horologist.media3.offload.AudioOffloadStatus Disabled;
  }

  @com.google.android.horologist.annotations.ExperimentalHorologistApi public interface AudioOffloadStrategy {
    method public kotlinx.coroutines.flow.Flow<java.lang.String> applyIndefinitely(androidx.media3.exoplayer.ExoPlayer exoPlayer, com.google.android.horologist.media3.logging.ErrorReporter errorReporter);
    method public boolean getOffloadEnabled();
    property public abstract boolean offloadEnabled;
  }

  public static final class AudioOffloadStrategy.Always implements com.google.android.horologist.media3.offload.AudioOffloadStrategy {
    method public kotlinx.coroutines.flow.Flow<java.lang.String> applyIndefinitely(androidx.media3.exoplayer.ExoPlayer exoPlayer, com.google.android.horologist.media3.logging.ErrorReporter errorReporter);
    method public boolean getOffloadEnabled();
    property public boolean offloadEnabled;
    field public static final com.google.android.horologist.media3.offload.AudioOffloadStrategy.Always INSTANCE;
  }

  public static final class AudioOffloadStrategy.Never implements com.google.android.horologist.media3.offload.AudioOffloadStrategy {
    method public kotlinx.coroutines.flow.Flow<java.lang.String> applyIndefinitely(androidx.media3.exoplayer.ExoPlayer exoPlayer, com.google.android.horologist.media3.logging.ErrorReporter errorReporter);
    method public boolean getOffloadEnabled();
    property public boolean offloadEnabled;
    field public static final com.google.android.horologist.media3.offload.AudioOffloadStrategy.Never INSTANCE;
  }

  @com.google.android.horologist.annotations.ExperimentalHorologistApi public final class BackgroundAudioOffloadStrategy implements com.google.android.horologist.media3.offload.AudioOffloadStrategy {
    method public kotlinx.coroutines.flow.Flow<java.lang.String> applyIndefinitely(androidx.media3.exoplayer.ExoPlayer exoPlayer, com.google.android.horologist.media3.logging.ErrorReporter errorReporter);
    method public boolean getOffloadEnabled();
    property public boolean offloadEnabled;
    field public static final com.google.android.horologist.media3.offload.BackgroundAudioOffloadStrategy INSTANCE;
  }

  @com.google.android.horologist.annotations.ExperimentalHorologistApi public final class OffloadTimes {
    ctor public OffloadTimes(optional long enabled, optional long disabled, optional long notPlaying, optional boolean isPlaying, optional long updated);
    method public long component1();
    method public long component2();
    method public long component3();
    method public boolean component4();
    method public long component5();
    method public com.google.android.horologist.media3.offload.OffloadTimes copy(long enabled, long disabled, long notPlaying, boolean isPlaying, long updated);
    method public long getDisabled();
    method public long getEnabled();
    method public long getNotPlaying();
    method public String getPercent();
    method public String getShortDescription();
    method public long getUpdated();
    method public boolean isPlaying();
    method public com.google.android.horologist.media3.offload.OffloadTimes timesToNow(boolean sleepingForOffload, boolean updatedIsPlaying);
    property public final long disabled;
    property public final long enabled;
    property public final boolean isPlaying;
    property public final long notPlaying;
    property public final String percent;
    property public final String shortDescription;
    property public final long updated;
  }

  public final class PrintKt {
  }

}

