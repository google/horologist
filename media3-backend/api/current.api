// Signature format: 4.0
package com.google.android.horologist.media3 {

  @kotlin.RequiresOptIn(message="Horologist Media3 Backend is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public @interface ExperimentalHorologistMedia3BackendApi {
  }

  @com.google.android.horologist.media3.ExperimentalHorologistMedia3BackendApi public final class WearConfiguredPlayer extends androidx.media3.common.ForwardingPlayer {
    ctor public WearConfiguredPlayer(androidx.media3.common.Player player, com.google.android.horologist.audio.AudioOutputRepository audioOutputRepository, com.google.android.horologist.media3.audio.AudioOutputSelector audioOutputSelector, com.google.android.horologist.media3.rules.PlaybackRules playbackRules, com.google.android.horologist.media3.logging.ErrorReporter errorReporter, kotlinx.coroutines.CoroutineScope coroutineScope);
    method public suspend Object? startNoiseDetection(kotlin.coroutines.Continuation<? super kotlin.Unit> p);
  }

}

package com.google.android.horologist.media3.audio {

  @com.google.android.horologist.media3.ExperimentalHorologistMedia3BackendApi public interface AudioOutputSelector {
    method public void launchSelector();
    method public suspend Object? selectNewOutput(com.google.android.horologist.audio.AudioOutput currentAudioOutput, kotlin.coroutines.Continuation<? super com.google.android.horologist.audio.AudioOutput> p);
  }

  @com.google.android.horologist.media3.ExperimentalHorologistMedia3BackendApi public final class BluetoothSettingsOutputSelector implements com.google.android.horologist.media3.audio.AudioOutputSelector {
    ctor public BluetoothSettingsOutputSelector(com.google.android.horologist.audio.AudioOutputRepository audioOutputRepository);
    method public void launchSelector();
    method public suspend Object? selectNewOutput(com.google.android.horologist.audio.AudioOutput currentAudioOutput, kotlin.coroutines.Continuation<? super com.google.android.horologist.audio.AudioOutput> p);
  }

}

package com.google.android.horologist.media3.config {

  public class WearMedia3Factory {
    ctor public WearMedia3Factory(android.content.Context context);
    method public final androidx.media3.exoplayer.RenderersFactory audioOnlyRenderersFactory(androidx.media3.exoplayer.audio.AudioSink audioSink, optional androidx.media3.exoplayer.mediacodec.MediaCodecSelector mediaCodecSelector);
    method public final androidx.media3.exoplayer.audio.AudioSink audioSink(boolean attemptOffload, optional int offloadMode);
    method public final androidx.media3.exoplayer.mediacodec.MediaCodecSelector mediaCodecSelector();
  }

}

package com.google.android.horologist.media3.flows {

  public final class BuildSuspendKt {
    method @com.google.android.horologist.media3.ExperimentalHorologistMedia3BackendApi public static suspend Object? buildSuspend(androidx.media3.session.MediaBrowser.Builder, kotlin.coroutines.Continuation<? super androidx.media3.session.MediaBrowser> p);
  }

  public final class CurrentMediaItemFlowKt {
    method @com.google.android.horologist.media3.ExperimentalHorologistMedia3BackendApi public static kotlinx.coroutines.flow.Flow<androidx.media3.common.MediaItem> currentMediaItemFlow(androidx.media3.common.Player);
  }

  public final class IsPlayingFlowKt {
    method @com.google.android.horologist.media3.ExperimentalHorologistMedia3BackendApi public static kotlinx.coroutines.flow.Flow<java.lang.Boolean> isPlayingFlow(androidx.media3.common.Player);
  }

  public final class WaitForPlayingKt {
    method public static suspend Object? waitForNotPlaying(androidx.media3.common.Player, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
    method public static suspend Object? waitForPlaying(androidx.media3.common.Player, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
  }

}

package com.google.android.horologist.media3.logging {

  @com.google.android.horologist.media3.ExperimentalHorologistMedia3BackendApi public final class AnalyticsEventLogger extends androidx.media3.exoplayer.util.EventLogger {
    ctor public AnalyticsEventLogger(com.google.android.horologist.media3.logging.ErrorReporter appEventLogger);
  }

  @com.google.android.horologist.media3.ExperimentalHorologistMedia3BackendApi public interface ErrorReporter {
    method public void logMessage(String message, optional com.google.android.horologist.media3.logging.ErrorReporter.Category category, optional com.google.android.horologist.media3.logging.ErrorReporter.Level level);
    method public void showMessage(@StringRes int message);
  }

  public enum ErrorReporter.Category {
    enum_constant public static final com.google.android.horologist.media3.logging.ErrorReporter.Category App;
    enum_constant public static final com.google.android.horologist.media3.logging.ErrorReporter.Category DB;
    enum_constant public static final com.google.android.horologist.media3.logging.ErrorReporter.Category Downloads;
    enum_constant public static final com.google.android.horologist.media3.logging.ErrorReporter.Category Jobs;
    enum_constant public static final com.google.android.horologist.media3.logging.ErrorReporter.Category Network;
    enum_constant public static final com.google.android.horologist.media3.logging.ErrorReporter.Category Playback;
    enum_constant public static final com.google.android.horologist.media3.logging.ErrorReporter.Category Unknown;
  }

  public enum ErrorReporter.Level {
    enum_constant public static final com.google.android.horologist.media3.logging.ErrorReporter.Level Debug;
    enum_constant public static final com.google.android.horologist.media3.logging.ErrorReporter.Level Error;
    enum_constant public static final com.google.android.horologist.media3.logging.ErrorReporter.Level Info;
  }

  @com.google.android.horologist.media3.ExperimentalHorologistMedia3BackendApi public final class TransferListener implements androidx.media3.datasource.cache.CacheDataSource.EventListener androidx.media3.datasource.TransferListener {
    ctor public TransferListener(com.google.android.horologist.media3.logging.ErrorReporter appEventLogger);
    method public void onBytesTransferred(androidx.media3.datasource.DataSource source, androidx.media3.datasource.DataSpec dataSpec, boolean isNetwork, int bytesTransferred);
    method public void onCacheIgnored(int reason);
    method public void onCachedBytesRead(long cacheSizeBytes, long cachedBytesRead);
    method public void onTransferEnd(androidx.media3.datasource.DataSource source, androidx.media3.datasource.DataSpec dataSpec, boolean isNetwork);
    method public void onTransferInitializing(androidx.media3.datasource.DataSource source, androidx.media3.datasource.DataSpec dataSpec, boolean isNetwork);
    method public void onTransferStart(androidx.media3.datasource.DataSource source, androidx.media3.datasource.DataSpec dataSpec, boolean isNetwork);
  }

}

package com.google.android.horologist.media3.navigation {

  public interface IntentBuilder {
    method public android.app.PendingIntent buildDownloadIntent();
    method public android.app.PendingIntent buildPlayerIntent();
  }

  public final class NavDeepLinkIntentBuilder implements com.google.android.horologist.media3.navigation.IntentBuilder {
    ctor public NavDeepLinkIntentBuilder(android.content.Context application, String downloadUri, String playerUri);
    method public android.app.PendingIntent buildDownloadIntent();
    method public android.app.PendingIntent buildPlayerIntent();
  }

}

package com.google.android.horologist.media3.offload {

  @com.google.android.horologist.media3.ExperimentalHorologistMedia3BackendApi public final class AudioOffloadManager {
    ctor public AudioOffloadManager(com.google.android.horologist.media3.logging.ErrorReporter errorReporter);
    method public void connect(androidx.media3.exoplayer.ExoPlayer exoPlayer);
    method public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> getForeground();
    method public kotlinx.coroutines.flow.StateFlow<androidx.media3.common.Format> getFormat();
    method public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> getOffloadSchedulingEnabled();
    method public kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> getSleepingForOffload();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media3.offload.OffloadTimes> getTimes();
    method public com.google.android.horologist.media3.offload.OffloadTimes snapOffloadTimes();
    property public final kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> foreground;
    property public final kotlinx.coroutines.flow.StateFlow<androidx.media3.common.Format> format;
    property public final kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> offloadSchedulingEnabled;
    property public final kotlinx.coroutines.flow.StateFlow<java.lang.Boolean> sleepingForOffload;
    property public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.media3.offload.OffloadTimes> times;
  }

  @com.google.android.horologist.media3.ExperimentalHorologistMedia3BackendApi public final class OffloadTimes {
    ctor public OffloadTimes(long enabled, long disabled, optional long updated);
    method public long component1();
    method public long component2();
    method public long component3();
    method public com.google.android.horologist.media3.offload.OffloadTimes copy(long enabled, long disabled, long updated);
    method public long getDisabled();
    method public long getEnabled();
    method public String getPercent();
    method public long getUpdated();
    method public com.google.android.horologist.media3.offload.OffloadTimes timesToNow(boolean sleepingForOffload);
    property public final long disabled;
    property public final long enabled;
    property public final String percent;
    property public final long updated;
  }

}

package com.google.android.horologist.media3.rules {

  @com.google.android.horologist.media3.ExperimentalHorologistMedia3BackendApi public interface PlaybackRules {
    method public suspend Object? canPlayItem(androidx.media3.common.MediaItem mediaItem, kotlin.coroutines.Continuation<? super java.lang.Boolean> p);
    method public boolean canPlayWithOutput(com.google.android.horologist.audio.AudioOutput audioOutput);
  }

  @com.google.android.horologist.media3.ExperimentalHorologistMedia3BackendApi public static final class PlaybackRules.Normal implements com.google.android.horologist.media3.rules.PlaybackRules {
    method public suspend Object? canPlayItem(androidx.media3.common.MediaItem mediaItem, kotlin.coroutines.Continuation<? super java.lang.Boolean> p);
    method public boolean canPlayWithOutput(com.google.android.horologist.audio.AudioOutput audioOutput);
    field public static final com.google.android.horologist.media3.rules.PlaybackRules.Normal INSTANCE;
  }

  @com.google.android.horologist.media3.ExperimentalHorologistMedia3BackendApi public static final class PlaybackRules.SpeakerAllowed implements com.google.android.horologist.media3.rules.PlaybackRules {
    method public suspend Object? canPlayItem(androidx.media3.common.MediaItem mediaItem, kotlin.coroutines.Continuation<? super java.lang.Boolean> p);
    method public boolean canPlayWithOutput(com.google.android.horologist.audio.AudioOutput audioOutput);
    field public static final com.google.android.horologist.media3.rules.PlaybackRules.SpeakerAllowed INSTANCE;
  }

}

package com.google.android.horologist.media3.service {

  @com.google.android.horologist.media3.ExperimentalHorologistMedia3BackendApi public abstract class CoroutinesMediaLibrarySessionCallback implements androidx.media3.session.MediaLibraryService.MediaLibrarySession.Callback {
    ctor public CoroutinesMediaLibrarySessionCallback(kotlinx.coroutines.CoroutineScope serviceScope, com.google.android.horologist.media3.logging.ErrorReporter appEventLogger);
    method protected suspend Object? onAddMediaItemsInternal(androidx.media3.session.MediaSession mediaSession, androidx.media3.session.MediaSession.ControllerInfo controller, java.util.List<androidx.media3.common.MediaItem> mediaItems, kotlin.coroutines.Continuation<? super java.util.List<androidx.media3.common.MediaItem>> p);
    method protected abstract suspend Object? onGetChildrenInternal(androidx.media3.session.MediaLibraryService.MediaLibrarySession session, androidx.media3.session.MediaSession.ControllerInfo browser, String parentId, int page, int pageSize, androidx.media3.session.MediaLibraryService.LibraryParams? params, kotlin.coroutines.Continuation<? super androidx.media3.session.LibraryResult<com.google.common.collect.ImmutableList<androidx.media3.common.MediaItem>>> p);
    method protected abstract suspend Object? onGetItemInternal(androidx.media3.session.MediaLibraryService.MediaLibrarySession session, androidx.media3.session.MediaSession.ControllerInfo browser, String mediaId, kotlin.coroutines.Continuation<? super androidx.media3.session.LibraryResult<androidx.media3.common.MediaItem>> p);
    method protected abstract suspend Object? onGetLibraryRootInternal(androidx.media3.session.MediaLibraryService.MediaLibrarySession session, androidx.media3.session.MediaSession.ControllerInfo browser, androidx.media3.session.MediaLibraryService.LibraryParams? params, kotlin.coroutines.Continuation<? super androidx.media3.session.LibraryResult<androidx.media3.common.MediaItem>> p);
  }

  public abstract class LifecycleMediaLibraryService extends androidx.media3.session.MediaLibraryService implements androidx.lifecycle.LifecycleOwner {
    ctor public LifecycleMediaLibraryService();
    method public androidx.lifecycle.Lifecycle getLifecycle();
    method protected abstract androidx.media3.session.MediaLibraryService.MediaLibrarySession getMediaLibrarySession();
    method public androidx.media3.session.MediaLibraryService.MediaLibrarySession? onGetSession(androidx.media3.session.MediaSession.ControllerInfo controllerInfo);
    method @Deprecated public final void onStart(android.content.Intent? intent, int startId);
    method @CallSuper public final int onStartCommand(android.content.Intent? intent, int flags, int startId);
    property protected abstract androidx.media3.session.MediaLibraryService.MediaLibrarySession mediaLibrarySession;
  }

}

