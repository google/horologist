// Signature format: 4.0
package com.google.android.horologist.networks {

  @kotlin.RequiresOptIn(message="Horologist Network Awareness is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalHorologistNetworksApi {
  }

}

package com.google.android.horologist.networks.data {

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public final class DataRequest {
    ctor public DataRequest(com.google.android.horologist.networks.data.RequestType requestType, com.google.android.horologist.networks.data.NetworkInfo networkInfo, long dataBytes, optional java.time.Instant time);
    method public com.google.android.horologist.networks.data.RequestType component1();
    method public com.google.android.horologist.networks.data.NetworkInfo component2();
    method public long component3();
    method public java.time.Instant component4();
    method public com.google.android.horologist.networks.data.DataRequest copy(com.google.android.horologist.networks.data.RequestType requestType, com.google.android.horologist.networks.data.NetworkInfo networkInfo, long dataBytes, java.time.Instant time);
    method public long getDataBytes();
    method public com.google.android.horologist.networks.data.NetworkInfo getNetworkInfo();
    method public com.google.android.horologist.networks.data.RequestType getRequestType();
    method public java.time.Instant getTime();
    property public final long dataBytes;
    property public final com.google.android.horologist.networks.data.NetworkInfo networkInfo;
    property public final com.google.android.horologist.networks.data.RequestType requestType;
    property public final java.time.Instant time;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public interface DataRequestRepository {
    method public kotlinx.coroutines.flow.Flow<com.google.android.horologist.networks.data.DataUsageReport> currentPeriodUsage();
    method public void storeRequest(com.google.android.horologist.networks.data.DataRequest dataRequest);
  }

  public final class DataUsageReport {
    ctor public DataUsageReport(java.util.Map<com.google.android.horologist.networks.data.NetworkType,java.lang.Long> dataByType, java.time.Instant from, java.time.Instant to);
    method public java.util.Map<com.google.android.horologist.networks.data.NetworkType,java.lang.Long> component1();
    method public java.time.Instant component2();
    method public java.time.Instant component3();
    method public com.google.android.horologist.networks.data.DataUsageReport copy(java.util.Map<com.google.android.horologist.networks.data.NetworkType,java.lang.Long> dataByType, java.time.Instant from, java.time.Instant to);
    method public java.util.Map<com.google.android.horologist.networks.data.NetworkType,java.lang.Long> getDataByType();
    method public java.time.Instant getFrom();
    method public java.time.Instant getTo();
    property public final java.util.Map<com.google.android.horologist.networks.data.NetworkType,java.lang.Long> dataByType;
    property public final java.time.Instant from;
    property public final java.time.Instant to;
    field public static final com.google.android.horologist.networks.data.DataUsageReport.Companion Companion;
  }

  public static final class DataUsageReport.Companion {
    method public com.google.android.horologist.networks.data.DataUsageReport getEmpty();
    property public final com.google.android.horologist.networks.data.DataUsageReport Empty;
  }

  public final class IdKt {
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public final class InMemoryDataRequestRepository implements com.google.android.horologist.networks.data.DataRequestRepository {
    ctor public InMemoryDataRequestRepository();
    method public kotlinx.coroutines.flow.Flow<com.google.android.horologist.networks.data.DataUsageReport> currentPeriodUsage();
    method public void storeRequest(com.google.android.horologist.networks.data.DataRequest dataRequest);
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public sealed interface NetworkInfo {
    method public Boolean? getHighBatteryUsage();
    method public Boolean? getMetered();
    method public String? getName();
    method public com.google.android.horologist.networks.data.NetworkType getType();
    property public abstract Boolean? highBatteryUsage;
    property public abstract Boolean? metered;
    property public abstract String? name;
    property public abstract com.google.android.horologist.networks.data.NetworkType type;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public static final class NetworkInfo.Bluetooth implements com.google.android.horologist.networks.data.NetworkInfo {
    ctor public NetworkInfo.Bluetooth(String name);
    method public String component1();
    method public com.google.android.horologist.networks.data.NetworkInfo.Bluetooth copy(String name);
    method public Boolean getHighBatteryUsage();
    method public Boolean getMetered();
    method public String getName();
    method public com.google.android.horologist.networks.data.NetworkType getType();
    property public Boolean highBatteryUsage;
    property public Boolean metered;
    property public String name;
    property public com.google.android.horologist.networks.data.NetworkType type;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public static final class NetworkInfo.Cellular implements com.google.android.horologist.networks.data.NetworkInfo {
    ctor public NetworkInfo.Cellular(String name, optional Boolean? metered);
    method public String component1();
    method public Boolean? component2();
    method public com.google.android.horologist.networks.data.NetworkInfo.Cellular copy(String name, Boolean? metered);
    method public Boolean getHighBatteryUsage();
    method public Boolean? getMetered();
    method public String getName();
    method public com.google.android.horologist.networks.data.NetworkType getType();
    property public Boolean highBatteryUsage;
    property public Boolean? metered;
    property public String name;
    property public com.google.android.horologist.networks.data.NetworkType type;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public static final class NetworkInfo.Unknown implements com.google.android.horologist.networks.data.NetworkInfo {
    ctor public NetworkInfo.Unknown(optional String? name, optional Boolean? metered);
    method public String? component1();
    method public Boolean? component2();
    method public com.google.android.horologist.networks.data.NetworkInfo.Unknown copy(String? name, Boolean? metered);
    method public Boolean? getHighBatteryUsage();
    method public Boolean? getMetered();
    method public String? getName();
    method public com.google.android.horologist.networks.data.NetworkType getType();
    property public Boolean? highBatteryUsage;
    property public Boolean? metered;
    property public String? name;
    property public com.google.android.horologist.networks.data.NetworkType type;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public static final class NetworkInfo.Wifi implements com.google.android.horologist.networks.data.NetworkInfo {
    ctor public NetworkInfo.Wifi(String name, optional String? ssid);
    method public String component1();
    method public String? component2();
    method public com.google.android.horologist.networks.data.NetworkInfo.Wifi copy(String name, String? ssid);
    method public Boolean getHighBatteryUsage();
    method public Boolean getMetered();
    method public String getName();
    method public String? getSsid();
    method public com.google.android.horologist.networks.data.NetworkType getType();
    property public Boolean highBatteryUsage;
    property public Boolean metered;
    property public String name;
    property public final String? ssid;
    property public com.google.android.horologist.networks.data.NetworkType type;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public final class NetworkStatus {
    ctor public NetworkStatus(String id, com.google.android.horologist.networks.data.Status status, com.google.android.horologist.networks.data.NetworkInfo networkInfo, java.util.List<? extends java.net.InetAddress> addresses, android.net.NetworkCapabilities? capabilities, android.net.LinkProperties? linkProperties, kotlin.jvm.functions.Function1<? super java.net.Socket,kotlin.Unit> bindSocket);
    method public String component1();
    method public com.google.android.horologist.networks.data.Status component2();
    method public com.google.android.horologist.networks.data.NetworkInfo component3();
    method public java.util.List<java.net.InetAddress> component4();
    method public android.net.NetworkCapabilities? component5();
    method public android.net.LinkProperties? component6();
    method public kotlin.jvm.functions.Function1<java.net.Socket,kotlin.Unit> component7();
    method public com.google.android.horologist.networks.data.NetworkStatus copy(String id, com.google.android.horologist.networks.data.Status status, com.google.android.horologist.networks.data.NetworkInfo networkInfo, java.util.List<? extends java.net.InetAddress> addresses, android.net.NetworkCapabilities? capabilities, android.net.LinkProperties? linkProperties, kotlin.jvm.functions.Function1<? super java.net.Socket,kotlin.Unit> bindSocket);
    method public java.util.List<java.net.InetAddress> getAddresses();
    method public kotlin.jvm.functions.Function1<java.net.Socket,kotlin.Unit> getBindSocket();
    method public android.net.NetworkCapabilities? getCapabilities();
    method public java.net.InetAddress? getFirstAddress();
    method public String getId();
    method public android.net.LinkProperties? getLinkProperties();
    method public com.google.android.horologist.networks.data.NetworkInfo getNetworkInfo();
    method public com.google.android.horologist.networks.data.Status getStatus();
    property public final java.util.List<java.net.InetAddress> addresses;
    property public final kotlin.jvm.functions.Function1<java.net.Socket,kotlin.Unit> bindSocket;
    property public final android.net.NetworkCapabilities? capabilities;
    property public final java.net.InetAddress? firstAddress;
    property public final String id;
    property public final android.net.LinkProperties? linkProperties;
    property public final com.google.android.horologist.networks.data.NetworkInfo networkInfo;
    property public final com.google.android.horologist.networks.data.Status status;
  }

  public enum NetworkType {
    enum_constant public static final com.google.android.horologist.networks.data.NetworkType BT;
    enum_constant public static final com.google.android.horologist.networks.data.NetworkType Cell;
    enum_constant public static final com.google.android.horologist.networks.data.NetworkType Unknown;
    enum_constant public static final com.google.android.horologist.networks.data.NetworkType Wifi;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public final class Networks {
    ctor public Networks(com.google.android.horologist.networks.data.NetworkStatus? activeNetwork, java.util.List<com.google.android.horologist.networks.data.NetworkStatus> networks);
    method public com.google.android.horologist.networks.data.NetworkStatus? component1();
    method public java.util.List<com.google.android.horologist.networks.data.NetworkStatus> component2();
    method public com.google.android.horologist.networks.data.Networks copy(com.google.android.horologist.networks.data.NetworkStatus? activeNetwork, java.util.List<com.google.android.horologist.networks.data.NetworkStatus> networks);
    method public com.google.android.horologist.networks.data.NetworkStatus? findNetworkByAddress(java.net.InetAddress localSocketAddress);
    method public com.google.android.horologist.networks.data.NetworkStatus? getActiveNetwork();
    method public java.util.List<com.google.android.horologist.networks.data.NetworkStatus> getNetworks();
    method public com.google.android.horologist.networks.data.Status getStatus();
    property public final com.google.android.horologist.networks.data.NetworkStatus? activeNetwork;
    property public final java.util.List<com.google.android.horologist.networks.data.NetworkStatus> networks;
    property public final com.google.android.horologist.networks.data.Status status;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public interface RequestType {
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public static final class RequestType.ApiRequest implements com.google.android.horologist.networks.data.RequestType {
    field public static final com.google.android.horologist.networks.data.RequestType.ApiRequest INSTANCE;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public static final class RequestType.ImageRequest implements com.google.android.horologist.networks.data.RequestType {
    field public static final com.google.android.horologist.networks.data.RequestType.ImageRequest INSTANCE;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public static final class RequestType.LogsRequest implements com.google.android.horologist.networks.data.RequestType {
    field public static final com.google.android.horologist.networks.data.RequestType.LogsRequest INSTANCE;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public static final class RequestType.MediaRequest implements com.google.android.horologist.networks.data.RequestType {
    ctor public RequestType.MediaRequest(com.google.android.horologist.networks.data.RequestType.MediaRequest.MediaRequestType type);
    method public com.google.android.horologist.networks.data.RequestType.MediaRequest.MediaRequestType component1();
    method public com.google.android.horologist.networks.data.RequestType.MediaRequest copy(com.google.android.horologist.networks.data.RequestType.MediaRequest.MediaRequestType type);
    method public String getName();
    method public com.google.android.horologist.networks.data.RequestType.MediaRequest.MediaRequestType getType();
    property public final String name;
    property public final com.google.android.horologist.networks.data.RequestType.MediaRequest.MediaRequestType type;
    field public static final com.google.android.horologist.networks.data.RequestType.MediaRequest.Companion Companion;
  }

  public static final class RequestType.MediaRequest.Companion {
    method public com.google.android.horologist.networks.data.RequestType.MediaRequest getDownloadRequest();
    method public com.google.android.horologist.networks.data.RequestType.MediaRequest getLiveRequest();
    method public com.google.android.horologist.networks.data.RequestType.MediaRequest getStreamRequest();
    property public final com.google.android.horologist.networks.data.RequestType.MediaRequest DownloadRequest;
    property public final com.google.android.horologist.networks.data.RequestType.MediaRequest LiveRequest;
    property public final com.google.android.horologist.networks.data.RequestType.MediaRequest StreamRequest;
  }

  public enum RequestType.MediaRequest.MediaRequestType {
    enum_constant public static final com.google.android.horologist.networks.data.RequestType.MediaRequest.MediaRequestType Download;
    enum_constant public static final com.google.android.horologist.networks.data.RequestType.MediaRequest.MediaRequestType Live;
    enum_constant public static final com.google.android.horologist.networks.data.RequestType.MediaRequest.MediaRequestType Stream;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public static final class RequestType.UnknownRequest implements com.google.android.horologist.networks.data.RequestType {
    field public static final com.google.android.horologist.networks.data.RequestType.UnknownRequest INSTANCE;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public abstract sealed class Status {
    method public final int getOrder();
    property public final int order;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public static final class Status.Available extends com.google.android.horologist.networks.data.Status {
    field public static final com.google.android.horologist.networks.data.Status.Available INSTANCE;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public static final class Status.Losing extends com.google.android.horologist.networks.data.Status {
    ctor public Status.Losing(java.time.Instant instant);
    method public java.time.Instant getInstant();
    property public final java.time.Instant instant;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public static final class Status.Lost extends com.google.android.horologist.networks.data.Status {
    field public static final com.google.android.horologist.networks.data.Status.Lost INSTANCE;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public static final class Status.Unknown extends com.google.android.horologist.networks.data.Status {
    field public static final com.google.android.horologist.networks.data.Status.Unknown INSTANCE;
  }

}

package com.google.android.horologist.networks.db {

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public final class DBDataRequestRepository implements com.google.android.horologist.networks.data.DataRequestRepository {
    ctor public DBDataRequestRepository(com.google.android.horologist.networks.db.NetworkUsageDao networkUsageDao, kotlinx.coroutines.CoroutineScope coroutineScope);
    method public kotlinx.coroutines.flow.Flow<com.google.android.horologist.networks.data.DataUsageReport> currentPeriodUsage();
    method public kotlinx.coroutines.CoroutineScope getCoroutineScope();
    method public int getDay();
    method public java.time.Instant getFrom();
    method public com.google.android.horologist.networks.db.NetworkUsageDao getNetworkUsageDao();
    method public java.time.Instant getTo();
    method public java.time.LocalDate getToday();
    method public void storeRequest(com.google.android.horologist.networks.data.DataRequest dataRequest);
    property public final kotlinx.coroutines.CoroutineScope coroutineScope;
    property public final int day;
    property public final java.time.Instant from;
    property public final com.google.android.horologist.networks.db.NetworkUsageDao networkUsageDao;
    property public final java.time.Instant to;
    property public final java.time.LocalDate today;
  }

  @androidx.room.Entity public final class DataUsage {
    ctor public DataUsage(@androidx.room.ColumnInfo(name="networkType") @androidx.room.PrimaryKey String networkType, @androidx.room.ColumnInfo(name="bytesTotal") long bytesTotal, @androidx.room.ColumnInfo(name="day") int day);
    method public String component1();
    method public long component2();
    method public int component3();
    method public com.google.android.horologist.networks.db.DataUsage copy(String networkType, long bytesTotal, int day);
    method public long getBytesTotal();
    method public int getDay();
    method public String getNetworkType();
    property public final long bytesTotal;
    property public final int day;
    property public final String networkType;
  }

  @androidx.room.Dao public interface NetworkUsageDao {
    method @androidx.room.Query("SELECT * FROM DataUsage WHERE day = :day") public kotlinx.coroutines.flow.Flow<java.util.List<com.google.android.horologist.networks.db.DataUsage>> getRecords(int day);
    method @androidx.room.Insert(onConflict=androidx.room.OnConflictStrategy.IGNORE) public suspend Object? insert(com.google.android.horologist.networks.db.DataUsage media, kotlin.coroutines.Continuation<? super java.lang.Long> p);
    method @androidx.room.Query("UPDATE DataUsage SET bytesTotal = bytesTotal + :bytes WHERE day = :day") public suspend Object? updateBytes(int day, long bytes, kotlin.coroutines.Continuation<? super java.lang.Integer> p);
  }

  @androidx.room.Database(entities={DataUsage::class}, version=1, exportSchema=false) @androidx.room.TypeConverters(NetworkUsageDatabase.Converters::class) public abstract class NetworkUsageDatabase extends androidx.room.RoomDatabase {
    ctor public NetworkUsageDatabase();
    method public abstract com.google.android.horologist.networks.db.NetworkUsageDao networkUsageDao();
    field public static final com.google.android.horologist.networks.db.NetworkUsageDatabase.Companion Companion;
  }

  public static final class NetworkUsageDatabase.Companion {
    method public com.google.android.horologist.networks.db.NetworkUsageDatabase getDatabase(android.content.Context context, optional boolean multiprocess);
  }

  public static final class NetworkUsageDatabase.Converters {
    ctor public NetworkUsageDatabase.Converters();
    method @androidx.room.TypeConverter public Long? dateToTimestamp(java.time.Instant? date);
    method @androidx.room.TypeConverter public java.time.Instant? fromTimestamp(Long? value);
  }

}

package com.google.android.horologist.networks.highbandwidth {

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public final class AggregatedHighBandwidthNetworkMediator implements com.google.android.horologist.networks.highbandwidth.HighBandwidthNetworkMediator {
    ctor public AggregatedHighBandwidthNetworkMediator(com.google.android.horologist.networks.logging.NetworkStatusLogger logger, com.google.android.horologist.networks.request.NetworkRequester networkRequester);
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.networks.data.NetworkType> getPinned();
    method public kotlinx.coroutines.flow.MutableStateFlow<com.google.android.horologist.networks.highbandwidth.HighBandwidthRequest> getRequested();
    method public com.google.android.horologist.networks.highbandwidth.HighBandwithConnectionLease requestHighBandwidthNetwork(com.google.android.horologist.networks.highbandwidth.HighBandwidthRequest request);
    property public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.networks.data.NetworkType> pinned;
    property public kotlinx.coroutines.flow.MutableStateFlow<com.google.android.horologist.networks.highbandwidth.HighBandwidthRequest> requested;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public interface HighBandwidthNetworkMediator {
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.networks.data.NetworkType> getPinned();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.networks.highbandwidth.HighBandwidthRequest> getRequested();
    method public com.google.android.horologist.networks.highbandwidth.HighBandwithConnectionLease requestHighBandwidthNetwork(com.google.android.horologist.networks.highbandwidth.HighBandwidthRequest request);
    property public abstract kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.networks.data.NetworkType> pinned;
    property public abstract kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.networks.highbandwidth.HighBandwidthRequest> requested;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public final class HighBandwidthRequest {
    ctor public HighBandwidthRequest(optional boolean wifi, optional boolean cell, optional com.google.android.horologist.networks.data.RequestType? requestType, optional okhttp3.HttpUrl? url);
    method public boolean component1();
    method public boolean component2();
    method public com.google.android.horologist.networks.data.RequestType? component3();
    method public okhttp3.HttpUrl? component4();
    method public com.google.android.horologist.networks.highbandwidth.HighBandwidthRequest copy(boolean wifi, boolean cell, com.google.android.horologist.networks.data.RequestType? requestType, okhttp3.HttpUrl? url);
    method public boolean getCell();
    method public com.google.android.horologist.networks.data.RequestType? getRequestType();
    method public okhttp3.HttpUrl? getUrl();
    method public boolean getWifi();
    method public android.net.NetworkRequest toNetworkRequest();
    property public final boolean cell;
    property public final com.google.android.horologist.networks.data.RequestType? requestType;
    property public final okhttp3.HttpUrl? url;
    property public final boolean wifi;
    field public static final com.google.android.horologist.networks.highbandwidth.HighBandwidthRequest.Companion Companion;
  }

  public static final class HighBandwidthRequest.Companion {
    method public com.google.android.horologist.networks.highbandwidth.HighBandwidthRequest from(java.util.List<? extends com.google.android.horologist.networks.data.NetworkType> supportedTypes);
    method public com.google.android.horologist.networks.highbandwidth.HighBandwidthRequest getAll();
    method public com.google.android.horologist.networks.highbandwidth.HighBandwidthRequest getCell();
    method public com.google.android.horologist.networks.highbandwidth.HighBandwidthRequest getWifi();
    property public final com.google.android.horologist.networks.highbandwidth.HighBandwidthRequest All;
    property public final com.google.android.horologist.networks.highbandwidth.HighBandwidthRequest Cell;
    property public final com.google.android.horologist.networks.highbandwidth.HighBandwidthRequest Wifi;
  }

  public interface HighBandwithConnectionLease extends java.lang.AutoCloseable {
    method public suspend Object? awaitGranted(kotlin.coroutines.Continuation<? super com.google.android.horologist.networks.data.NetworkType> p);
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public final class SimpleHighBandwidthNetworkMediator implements com.google.android.horologist.networks.highbandwidth.HighBandwidthNetworkMediator {
    ctor public SimpleHighBandwidthNetworkMediator(android.net.ConnectivityManager connectivityManager, com.google.android.horologist.networks.status.NetworkRepository networkRepository);
    method public kotlinx.coroutines.flow.MutableStateFlow<com.google.android.horologist.networks.data.NetworkType> getPinned();
    method public kotlinx.coroutines.flow.MutableStateFlow<com.google.android.horologist.networks.highbandwidth.HighBandwidthRequest> getRequested();
    method public com.google.android.horologist.networks.highbandwidth.HighBandwithConnectionLease requestHighBandwidthNetwork(com.google.android.horologist.networks.highbandwidth.HighBandwidthRequest request);
    property public kotlinx.coroutines.flow.MutableStateFlow<com.google.android.horologist.networks.data.NetworkType> pinned;
    property public kotlinx.coroutines.flow.MutableStateFlow<com.google.android.horologist.networks.highbandwidth.HighBandwidthRequest> requested;
  }

}

package com.google.android.horologist.networks.logging {

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public interface NetworkStatusLogger {
    method public void debugNetworkEvent(String event);
    method public void logJobEvent(String event, optional boolean error);
    method public void logNetworkEvent(String event, optional boolean error);
    method public void logNetworkResponse(com.google.android.horologist.networks.data.RequestType requestType, com.google.android.horologist.networks.data.NetworkInfo networkInfo, long bytesTransferred);
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public static final class NetworkStatusLogger.InMemory implements com.google.android.horologist.networks.logging.NetworkStatusLogger {
    ctor public NetworkStatusLogger.InMemory();
    method public void debugNetworkEvent(String event);
    method public java.util.List<java.lang.String> getEvents();
    method public void logJobEvent(String event, boolean error);
    method public void logNetworkEvent(String event, boolean error);
    method public void logNetworkResponse(com.google.android.horologist.networks.data.RequestType requestType, com.google.android.horologist.networks.data.NetworkInfo networkInfo, long bytesTransferred);
    property public final java.util.List<java.lang.String> events;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public static final class NetworkStatusLogger.Logging implements com.google.android.horologist.networks.logging.NetworkStatusLogger {
    method public void debugNetworkEvent(String event);
    method public void logJobEvent(String event, boolean error);
    method public void logNetworkEvent(String event, boolean error);
    method public void logNetworkResponse(com.google.android.horologist.networks.data.RequestType requestType, com.google.android.horologist.networks.data.NetworkInfo networkInfo, long bytesTransferred);
    field public static final com.google.android.horologist.networks.logging.NetworkStatusLogger.Logging INSTANCE;
  }

}

package com.google.android.horologist.networks.okhttp {

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public final class AlwaysHttpsInterceptor implements okhttp3.Interceptor {
    method public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain);
    field public static final com.google.android.horologist.networks.okhttp.AlwaysHttpsInterceptor INSTANCE;
  }

  public final class AwaitKt {
    method public static suspend Object? await(okhttp3.Call, kotlin.coroutines.Continuation<? super okhttp3.Response> p);
  }

  public class ForwardingEventListener extends okhttp3.EventListener {
    ctor public ForwardingEventListener(okhttp3.EventListener delegate);
    method public void dnsEnd(okhttp3.Call call, String domainName, java.util.List<? extends java.net.InetAddress> inetAddressList);
    method public void proxySelectEnd(okhttp3.Call call, okhttp3.HttpUrl url, java.util.List<? extends java.net.Proxy> proxies);
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public final class NetworkAwareCallFactory implements okhttp3.Call.Factory {
    ctor public NetworkAwareCallFactory(okhttp3.Call.Factory delegate, com.google.android.horologist.networks.data.RequestType defaultRequestType);
    method public okhttp3.Call newCall(okhttp3.Request request);
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public final class NetworkSelectingCallFactory implements okhttp3.Call.Factory {
    ctor public NetworkSelectingCallFactory(com.google.android.horologist.networks.rules.NetworkingRulesEngine networkingRulesEngine, com.google.android.horologist.networks.highbandwidth.HighBandwidthNetworkMediator highBandwidthNetworkMediator, com.google.android.horologist.networks.status.NetworkRepository networkRepository, com.google.android.horologist.networks.data.DataRequestRepository? dataRequestRepository, okhttp3.OkHttpClient rootClient, kotlinx.coroutines.CoroutineScope coroutineScope, optional long timeout);
    method public okhttp3.Call newCall(okhttp3.Request request);
  }

  public final class RequestTypeKt {
    method public static com.google.android.horologist.networks.highbandwidth.HighBandwithConnectionLease? getHighBandwithConnectionLease(okhttp3.Request);
    method public static com.google.android.horologist.networks.data.NetworkInfo? getNetworkInfo(okhttp3.Request);
    method public static com.google.android.horologist.networks.data.RequestType getRequestType(okhttp3.Request);
    method public static com.google.android.horologist.networks.data.RequestType? getRequestTypeOrNull(okhttp3.Request);
    method public static void setHighBandwithConnectionLease(okhttp3.Request, com.google.android.horologist.networks.highbandwidth.HighBandwithConnectionLease? value);
    method public static void setNetworkInfo(okhttp3.Request, com.google.android.horologist.networks.data.NetworkInfo? value);
  }

}

package com.google.android.horologist.networks.okhttp.impl {

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public final class NetworkAwareEventListenerFactory extends com.google.android.horologist.networks.okhttp.impl.NetworkLoggingEventListenerFactory {
    ctor public NetworkAwareEventListenerFactory(com.google.android.horologist.networks.rules.NetworkingRulesEngine networkingRulesEngine, com.google.android.horologist.networks.status.NetworkRepository networkRepository, okhttp3.EventListener.Factory delegateEventListenerFactory, optional com.google.android.horologist.networks.data.DataRequestRepository? dataRequestRepository);
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public class NetworkLoggingEventListenerFactory implements okhttp3.EventListener.Factory {
    ctor public NetworkLoggingEventListenerFactory(com.google.android.horologist.networks.logging.NetworkStatusLogger logger, com.google.android.horologist.networks.status.NetworkRepository networkRepository, okhttp3.EventListener.Factory delegateEventListenerFactory, optional com.google.android.horologist.networks.data.DataRequestRepository? dataRequestRepository);
    method public okhttp3.EventListener create(okhttp3.Call call);
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public final class RequestTypeHolder {
    ctor public RequestTypeHolder(optional com.google.android.horologist.networks.data.RequestType requestType, optional com.google.android.horologist.networks.data.NetworkInfo? networkInfo, optional com.google.android.horologist.networks.highbandwidth.HighBandwithConnectionLease? highBandwithConnectionLease);
    method public com.google.android.horologist.networks.data.RequestType component1();
    method public com.google.android.horologist.networks.data.NetworkInfo? component2();
    method public com.google.android.horologist.networks.highbandwidth.HighBandwithConnectionLease? component3();
    method public com.google.android.horologist.networks.okhttp.impl.RequestTypeHolder copy(com.google.android.horologist.networks.data.RequestType requestType, com.google.android.horologist.networks.data.NetworkInfo? networkInfo, com.google.android.horologist.networks.highbandwidth.HighBandwithConnectionLease? highBandwithConnectionLease);
    method public com.google.android.horologist.networks.highbandwidth.HighBandwithConnectionLease? getHighBandwithConnectionLease();
    method public com.google.android.horologist.networks.data.NetworkInfo? getNetworkInfo();
    method public com.google.android.horologist.networks.data.RequestType getRequestType();
    method public void setHighBandwithConnectionLease(com.google.android.horologist.networks.highbandwidth.HighBandwithConnectionLease? highBandwithConnectionLease);
    method public void setNetworkInfo(com.google.android.horologist.networks.data.NetworkInfo? networkInfo);
    method public void setRequestType(com.google.android.horologist.networks.data.RequestType requestType);
    property public final com.google.android.horologist.networks.highbandwidth.HighBandwithConnectionLease? highBandwithConnectionLease;
    property public final com.google.android.horologist.networks.data.NetworkInfo? networkInfo;
    property public final com.google.android.horologist.networks.data.RequestType requestType;
    field public static final com.google.android.horologist.networks.okhttp.impl.RequestTypeHolder.Companion Companion;
  }

  public static final class RequestTypeHolder.Companion {
    method public okhttp3.Request.Builder requestType(okhttp3.Request.Builder, com.google.android.horologist.networks.data.RequestType value);
    method @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public okhttp3.Request withDefaultRequestType(okhttp3.Request, com.google.android.horologist.networks.data.RequestType defaultRequestType);
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public final class RequestVerifyingInterceptor implements okhttp3.Interceptor {
    ctor public RequestVerifyingInterceptor(com.google.android.horologist.networks.rules.NetworkingRulesEngine networkingRulesEngine);
    method public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain);
  }

}

package com.google.android.horologist.networks.request {

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public interface NetworkRequester {
    method public void clearRequest();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.networks.data.NetworkType> getPinnedNetwork();
    method public void setRequests(com.google.android.horologist.networks.highbandwidth.HighBandwidthRequest request);
    property public abstract kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.networks.data.NetworkType> pinnedNetwork;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public final class NetworkRequesterImpl implements com.google.android.horologist.networks.request.NetworkRequester {
    ctor public NetworkRequesterImpl(android.net.ConnectivityManager connectivityManager, com.google.android.horologist.networks.status.NetworkRepository networkRepository);
    method public void clearRequest();
    method public kotlinx.coroutines.flow.MutableStateFlow<com.google.android.horologist.networks.data.NetworkType> getPinnedNetwork();
    method public void setRequests(com.google.android.horologist.networks.highbandwidth.HighBandwidthRequest request);
    property public kotlinx.coroutines.flow.MutableStateFlow<com.google.android.horologist.networks.data.NetworkType> pinnedNetwork;
  }

}

package com.google.android.horologist.networks.rules {

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public final class Allow implements com.google.android.horologist.networks.rules.RequestCheck {
    method public boolean isForbidden();
    property public boolean isForbidden;
    field public static final com.google.android.horologist.networks.rules.Allow INSTANCE;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public final class Fail implements com.google.android.horologist.networks.rules.RequestCheck {
    ctor public Fail(String reason);
    method public String component1();
    method public com.google.android.horologist.networks.rules.Fail copy(String reason);
    method public String getReason();
    method public boolean isForbidden();
    property public boolean isForbidden;
    property public final String reason;
  }

  public final class ForbiddenRequest extends java.io.IOException {
    ctor public ForbiddenRequest(String message);
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public interface NetworkingRules {
    method public com.google.android.horologist.networks.rules.RequestCheck checkValidRequest(com.google.android.horologist.networks.data.RequestType requestType, com.google.android.horologist.networks.data.NetworkInfo currentNetworkInfo);
    method public com.google.android.horologist.networks.data.NetworkStatus? getPreferredNetwork(com.google.android.horologist.networks.data.Networks networks, com.google.android.horologist.networks.data.RequestType requestType);
    method public boolean isHighBandwidthRequest(com.google.android.horologist.networks.data.RequestType requestType);
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public static final class NetworkingRules.Conservative implements com.google.android.horologist.networks.rules.NetworkingRules {
    method public com.google.android.horologist.networks.rules.RequestCheck checkValidRequest(com.google.android.horologist.networks.data.RequestType requestType, com.google.android.horologist.networks.data.NetworkInfo currentNetworkInfo);
    method public com.google.android.horologist.networks.data.NetworkStatus? getPreferredNetwork(com.google.android.horologist.networks.data.Networks networks, com.google.android.horologist.networks.data.RequestType requestType);
    method public boolean isHighBandwidthRequest(com.google.android.horologist.networks.data.RequestType requestType);
    field public static final com.google.android.horologist.networks.rules.NetworkingRules.Conservative INSTANCE;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public static final class NetworkingRules.Lenient implements com.google.android.horologist.networks.rules.NetworkingRules {
    method public com.google.android.horologist.networks.rules.RequestCheck checkValidRequest(com.google.android.horologist.networks.data.RequestType requestType, com.google.android.horologist.networks.data.NetworkInfo currentNetworkInfo);
    method public com.google.android.horologist.networks.data.NetworkStatus? getPreferredNetwork(com.google.android.horologist.networks.data.Networks networks, com.google.android.horologist.networks.data.RequestType requestType);
    method public boolean isHighBandwidthRequest(com.google.android.horologist.networks.data.RequestType requestType);
    field public static final com.google.android.horologist.networks.rules.NetworkingRules.Lenient INSTANCE;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public final class NetworkingRulesEngine {
    ctor public NetworkingRulesEngine(com.google.android.horologist.networks.status.NetworkRepository networkRepository, optional com.google.android.horologist.networks.logging.NetworkStatusLogger logger, optional com.google.android.horologist.networks.rules.NetworkingRules networkingRules);
    method public com.google.android.horologist.networks.rules.RequestCheck checkValidRequest(com.google.android.horologist.networks.data.RequestType requestType, com.google.android.horologist.networks.data.NetworkInfo? currentNetworkInfo);
    method public boolean isHighBandwidthRequest(com.google.android.horologist.networks.data.RequestType requestType);
    method public com.google.android.horologist.networks.data.NetworkStatus? preferredNetwork(com.google.android.horologist.networks.data.RequestType requestType);
    method public java.util.List<com.google.android.horologist.networks.data.NetworkType> supportedTypes(com.google.android.horologist.networks.data.RequestType requestType);
  }

  public final class NoSuitableNetwork extends java.io.IOException {
    ctor public NoSuitableNetwork(String message);
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public sealed interface RequestCheck {
    method public boolean isForbidden();
    property public abstract boolean isForbidden;
  }

}

package com.google.android.horologist.networks.status {

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public interface NetworkRepository {
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.networks.data.Networks> getNetworkStatus();
    method public com.google.android.horologist.networks.data.NetworkStatus? networkByAddress(java.net.InetAddress localAddress);
    method public void updateNetworkAvailability(android.net.Network network);
    property public abstract kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.networks.data.Networks> networkStatus;
  }

  @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public final class NetworkRepositoryImpl implements com.google.android.horologist.networks.status.NetworkRepository {
    ctor public NetworkRepositoryImpl(android.net.ConnectivityManager connectivityManager, kotlinx.coroutines.CoroutineScope coroutineScope);
    method public void close();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.networks.data.Networks> getNetworkStatus();
    method public com.google.android.horologist.networks.data.NetworkStatus? networkByAddress(java.net.InetAddress localAddress);
    method public void updateNetworkAvailability(android.net.Network network);
    property public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.networks.data.Networks> networkStatus;
    field public static final com.google.android.horologist.networks.status.NetworkRepositoryImpl.Companion Companion;
  }

  public static final class NetworkRepositoryImpl.Companion {
    method @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public com.google.android.horologist.networks.status.NetworkRepositoryImpl fromContext(android.content.Context application, kotlinx.coroutines.CoroutineScope coroutineScope);
  }

}

package com.google.android.horologist.networks.ui {

  public final class ColorKt {
  }

  public final class DataUsageKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public static void LinearDataUsage(com.google.android.horologist.networks.data.Networks networkStatus, com.google.android.horologist.networks.data.DataUsageReport? networkUsage, androidx.compose.ui.text.TextStyle style, android.content.Context context);
    method @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public static void curveDataUsage(androidx.wear.compose.foundation.CurvedScope, optional androidx.compose.ui.Modifier modifier, com.google.android.horologist.networks.data.Networks networkStatus, com.google.android.horologist.networks.data.DataUsageReport? networkUsage, androidx.wear.compose.foundation.CurvedTextStyle style, android.content.Context context, com.google.android.horologist.networks.data.NetworkType? requestedNetwork);
  }

  public final class DataUsageTimeTextKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.networks.ExperimentalHorologistNetworksApi public static void DataUsageTimeText(boolean showData, com.google.android.horologist.networks.data.Networks networkStatus, com.google.android.horologist.networks.data.DataUsageReport? networkUsage, optional androidx.compose.ui.Modifier modifier, optional com.google.android.horologist.networks.data.NetworkType? requestedNetwork);
  }

}

