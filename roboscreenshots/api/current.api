// Signature format: 4.0
package com.google.android.horologist.screenshots {

  public final class DiffingKt {
  }

  public final class FixedTimeSource implements androidx.wear.compose.material.TimeSource {
    method @androidx.compose.runtime.Composable public String getCurrentTime();
    property @androidx.compose.runtime.Composable public String currentTime;
    field public static final com.google.android.horologist.screenshots.FixedTimeSource INSTANCE;
  }

  @com.google.android.horologist.annotations.ExperimentalHorologistApi @org.junit.runner.RunWith(RobolectricTestRunner::class) @org.robolectric.annotation.Config(sdk={30}, qualifiers="w227dp-h227dp-small-notlong-round-watch-xhdpi-keyshidden-nonav") @org.robolectric.annotation.GraphicsMode(org.robolectric.annotation.GraphicsMode.Mode.NATIVE) public abstract class ScreenshotBaseTest {
    ctor public ScreenshotBaseTest(optional com.google.android.horologist.screenshots.ScreenshotTestRule.ScreenshotTestRuleParams params);
    method @org.junit.Rule public final com.google.android.horologist.screenshots.ScreenshotTestRule getScreenshotTestRule();
    property @org.junit.Rule public final com.google.android.horologist.screenshots.ScreenshotTestRule screenshotTestRule;
  }

  @com.google.android.horologist.annotations.ExperimentalHorologistApi public final class ScreenshotTestRule implements org.junit.rules.TestRule {
    ctor public ScreenshotTestRule(optional com.google.android.horologist.screenshots.ScreenshotTestRule.ScreenshotTestRuleParams params);
    method public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description description);
    method public void interact(optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.test.junit4.ComposeTestRule,kotlin.Unit> block);
    method public void setContent(optional boolean isComponent, optional kotlin.jvm.functions.Function1<? super kotlin.jvm.functions.Function0<kotlin.Unit>,kotlin.Unit>? componentDefaultContent, optional boolean takeScreenshot, optional Boolean? roundScreen, optional kotlin.jvm.functions.Function0<kotlin.Unit> timeText, optional kotlin.jvm.functions.Function0<kotlin.Unit> positionIndicator, optional com.google.android.horologist.compose.tools.coil.FakeImageLoader fakeImageLoader, kotlin.jvm.functions.Function0<kotlin.Unit> composable);
    method public void takeScreenshot();
    field public static final com.google.android.horologist.screenshots.ScreenshotTestRule.Companion Companion;
  }

  public static final class ScreenshotTestRule.Companion {
    method public com.google.android.horologist.screenshots.ScreenshotTestRule.ScreenshotTestRuleParams.Builder builder();
    method public inline com.google.android.horologist.screenshots.ScreenshotTestRule.ScreenshotTestRuleParams screenshotTestRuleParams(kotlin.jvm.functions.Function1<? super com.google.android.horologist.screenshots.ScreenshotTestRule.ScreenshotTestRuleParams.Builder,kotlin.Unit> block);
  }

  public static final class ScreenshotTestRule.ScreenshotTestRuleParams {
    ctor public ScreenshotTestRule.ScreenshotTestRuleParams(float tolerance, boolean enableA11y, kotlin.jvm.functions.Function0<kotlin.Unit> screenTimeText, String? testLabel, boolean record);
    method public float component1();
    method public boolean component2();
    method public kotlin.jvm.functions.Function0<kotlin.Unit> component3();
    method public String? component4();
    method public boolean component5();
    method public com.google.android.horologist.screenshots.ScreenshotTestRule.ScreenshotTestRuleParams copy(float tolerance, boolean enableA11y, kotlin.jvm.functions.Function0<kotlin.Unit> screenTimeText, String? testLabel, boolean record);
    method public boolean getEnableA11y();
    method public boolean getRecord();
    method public kotlin.jvm.functions.Function0<kotlin.Unit> getScreenTimeText();
    method public String? getTestLabel();
    method public float getTolerance();
    property public final boolean enableA11y;
    property public final boolean record;
    property public final kotlin.jvm.functions.Function0<kotlin.Unit> screenTimeText;
    property public final String? testLabel;
    property public final float tolerance;
  }

  public static final class ScreenshotTestRule.ScreenshotTestRuleParams.Builder {
    method public com.google.android.horologist.screenshots.ScreenshotTestRule.ScreenshotTestRuleParams build();
    method public boolean getEnableA11y();
    method public boolean getRecord();
    method public kotlin.jvm.functions.Function0<kotlin.Unit> getScreenTimeText();
    method public String? getTestLabel();
    method public float getTolerance();
    method public void setEnableA11y(boolean);
    method public void setRecord(boolean);
    method public void setScreenTimeText(kotlin.jvm.functions.Function0<kotlin.Unit>);
    method public void setTestLabel(String?);
    method public void setTolerance(float);
    property public final boolean enableA11y;
    property public final boolean record;
    property public final kotlin.jvm.functions.Function0<kotlin.Unit> screenTimeText;
    property public final String? testLabel;
    property public final float tolerance;
  }

}

