// Signature format: 4.0
package com.google.android.horologist.screenshots {

  public final class FixedTimeSource implements androidx.wear.compose.material.TimeSource {
    method @androidx.compose.runtime.Composable public String getCurrentTime();
    property @androidx.compose.runtime.Composable public String currentTime;
    field public static final com.google.android.horologist.screenshots.FixedTimeSource INSTANCE;
  }

}

package com.google.android.horologist.screenshots.rng {

  public interface ScreenshotTest {
  }

  public enum WearDevice {
    method public final float getDensity();
    method public final int getDp();
    method public final float getFontScale();
    method public final String! getId();
    method public final String! getModelName();
    method public final int getScreenSizePx();
    method public static com.google.android.horologist.screenshots.rng.WearDevice valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.google.android.horologist.screenshots.rng.WearDevice[] values();
    property public final float density;
    property public final int dp;
    property public final float fontScale;
    property public final String! id;
    property public final String! modelName;
    property public final int screenSizePx;
    enum_constant public static final com.google.android.horologist.screenshots.rng.WearDevice GenericLargeRound;
    enum_constant public static final com.google.android.horologist.screenshots.rng.WearDevice GenericSmallRound;
    enum_constant public static final com.google.android.horologist.screenshots.rng.WearDevice GooglePixelWatch;
    enum_constant public static final com.google.android.horologist.screenshots.rng.WearDevice GooglePixelWatchLargeFont;
    enum_constant public static final com.google.android.horologist.screenshots.rng.WearDevice MobvoiTicWatchPro5;
    enum_constant public static final com.google.android.horologist.screenshots.rng.WearDevice SamsungGalaxyWatch5;
    enum_constant public static final com.google.android.horologist.screenshots.rng.WearDevice SamsungGalaxyWatch6;
    enum_constant public static final com.google.android.horologist.screenshots.rng.WearDevice SamsungGalaxyWatch6SmallFont;
  }

  @org.junit.runner.RunWith(ParameterizedRobolectricTestRunner::class) public abstract class WearDeviceScreenshotTest extends com.google.android.horologist.screenshots.rng.WearScreenshotTest {
    ctor public WearDeviceScreenshotTest(com.google.android.horologist.screenshots.rng.WearDevice device);
    method @org.robolectric.ParameterizedRobolectricTestRunner.Parameters public static final java.util.List<com.google.android.horologist.screenshots.rng.WearDevice> devices();
    method public final void runTest(kotlin.jvm.functions.Function0<kotlin.Unit> content);
    property public com.google.android.horologist.screenshots.rng.WearDevice device;
    property public float tolerance;
    field public static final com.google.android.horologist.screenshots.rng.WearDeviceScreenshotTest.Companion Companion;
  }

  public static final class WearDeviceScreenshotTest.Companion {
    method @org.robolectric.ParameterizedRobolectricTestRunner.Parameters public java.util.List<com.google.android.horologist.screenshots.rng.WearDevice> devices();
  }

  @org.junit.runner.RunWith(AndroidJUnit4::class) @org.robolectric.annotation.Config(sdk={33}, qualifiers=com.github.takahirom.roborazzi.RobolectricDeviceQualifiers.WearOSLargeRound) @org.robolectric.annotation.GraphicsMode(org.robolectric.annotation.GraphicsMode.Mode.NATIVE) public abstract class WearLegacyA11yTest {
    ctor public WearLegacyA11yTest();
    method @androidx.compose.runtime.Composable public void ComponentScaffold(kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public void TestScaffold(kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public final void captureScreenA11yRoboImage(String filePath, com.github.takahirom.roborazzi.RoborazziOptions roborazziOptions);
    method public final void captureScreenshot(optional String suffix);
    method @org.junit.Rule public final androidx.compose.ui.test.junit4.ComposeContentTestRule getComposeRule();
    method public boolean getForceHardware();
    method public coil.test.FakeImageLoaderEngine? getImageLoader();
    method @org.junit.Rule public final org.junit.rules.TestName getTestInfo();
    method public float getTolerance();
    method public final void runComponentTest(optional androidx.compose.ui.graphics.Color? background, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public final void runScreenTest(kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public String testName(String suffix);
    property @org.junit.Rule public final androidx.compose.ui.test.junit4.ComposeContentTestRule composeRule;
    property public boolean forceHardware;
    property public coil.test.FakeImageLoaderEngine? imageLoader;
    property @org.junit.Rule public final org.junit.rules.TestName testInfo;
    property public float tolerance;
    field public static final com.google.android.horologist.screenshots.rng.WearLegacyA11yTest.Companion Companion;
  }

  public static final class WearLegacyA11yTest.Companion {
    method public void enableTouchExploration();
  }

  @org.junit.runner.RunWith(AndroidJUnit4::class) @org.robolectric.annotation.Config(sdk={33}, qualifiers=com.github.takahirom.roborazzi.RobolectricDeviceQualifiers.WearOSLargeRound) @org.robolectric.annotation.GraphicsMode(org.robolectric.annotation.GraphicsMode.Mode.NATIVE) public abstract class WearLegacyComponentTest {
    ctor public WearLegacyComponentTest();
    method @androidx.compose.runtime.Composable public void ComponentScaffold(kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public com.google.android.horologist.screenshots.rng.WearDevice? getDevice();
    method public boolean getForceHardware();
    method public coil.test.FakeImageLoaderEngine? getImageLoader();
    method @org.junit.Rule public final org.junit.rules.TestName getTestInfo();
    method public float getTolerance();
    method public final void runComponentTest(optional androidx.compose.ui.graphics.Color? background, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public String testName(String suffix);
    property public com.google.android.horologist.screenshots.rng.WearDevice? device;
    property public boolean forceHardware;
    property public coil.test.FakeImageLoaderEngine? imageLoader;
    property @org.junit.Rule public final org.junit.rules.TestName testInfo;
    property public float tolerance;
  }

  public abstract class WearLegacyScreenTest extends com.google.android.horologist.screenshots.rng.WearScreenshotTest {
    ctor public WearLegacyScreenTest();
  }

  @org.junit.experimental.categories.Category(ScreenshotTest::class) @org.junit.runner.RunWith(AndroidJUnit4::class) @org.robolectric.annotation.Config(sdk={33}, qualifiers=com.github.takahirom.roborazzi.RobolectricDeviceQualifiers.WearOSLargeRound) @org.robolectric.annotation.GraphicsMode(org.robolectric.annotation.GraphicsMode.Mode.NATIVE) public abstract class WearScreenshotTest {
    ctor public WearScreenshotTest();
    method @androidx.compose.runtime.Composable public void TestScaffold(kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public final void captureScreenshot(optional String suffix);
    method @org.junit.Rule public final androidx.compose.ui.test.junit4.ComposeContentTestRule getComposeRule();
    method public com.google.android.horologist.screenshots.rng.WearDevice? getDevice();
    method public boolean getForceHardware();
    method public coil.test.FakeImageLoaderEngine? getImageLoader();
    method @org.junit.Rule public final org.junit.rules.TestName getTestInfo();
    method public float getTolerance();
    method public final void runTest(optional String? suffix, optional com.google.android.horologist.screenshots.rng.WearDevice? device, optional boolean applyDeviceConfig, optional boolean captureScreenshot, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public String testName(String suffix);
    property @org.junit.Rule public final androidx.compose.ui.test.junit4.ComposeContentTestRule composeRule;
    property public com.google.android.horologist.screenshots.rng.WearDevice? device;
    property public boolean forceHardware;
    property public coil.test.FakeImageLoaderEngine? imageLoader;
    property @org.junit.Rule public final org.junit.rules.TestName testInfo;
    property public float tolerance;
    field public static final com.google.android.horologist.screenshots.rng.WearScreenshotTest.Companion Companion;
  }

  public static final class WearScreenshotTest.Companion {
    method public void useHardwareRenderer();
    method public <R> R withDrawingEnabled(boolean forceHardware, kotlin.jvm.functions.Function0<? extends R> block);
  }

}

