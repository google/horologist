// Signature format: 4.0
package com.google.android.horologist.tiles {

  public abstract class CoroutinesTileService extends androidx.wear.tiles.TileService implements androidx.lifecycle.LifecycleOwner {
    ctor public CoroutinesTileService();
    method public androidx.lifecycle.Lifecycle getLifecycle();
    method protected final com.google.common.util.concurrent.ListenableFuture<androidx.wear.tiles.ResourceBuilders.Resources> onResourcesRequest(androidx.wear.tiles.RequestBuilders.ResourcesRequest requestParams);
    method @Deprecated public final void onStart(android.content.Intent? intent, int startId);
    method public final int onStartCommand(android.content.Intent? intent, int flags, int startId);
    method protected final com.google.common.util.concurrent.ListenableFuture<androidx.wear.tiles.TileBuilders.Tile> onTileRequest(androidx.wear.tiles.RequestBuilders.TileRequest requestParams);
    method public abstract suspend Object? resourcesRequest(androidx.wear.tiles.RequestBuilders.ResourcesRequest requestParams, kotlin.coroutines.Continuation<? super androidx.wear.tiles.ResourceBuilders.Resources> p);
    method public abstract suspend Object? tileRequest(androidx.wear.tiles.RequestBuilders.TileRequest requestParams, kotlin.coroutines.Continuation<? super androidx.wear.tiles.TileBuilders.Tile> p);
  }

  @kotlin.RequiresOptIn(message="Horologist Tiles is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public @interface ExperimentalHorologistTilesApi {
  }

}

package com.google.android.horologist.tiles.images {

  public final class ImagesKt {
    method public static suspend Object? loadImage(coil.ImageLoader, android.content.Context context, Object? data, optional kotlin.jvm.functions.Function1<? super coil.request.ImageRequest.Builder,kotlin.Unit> configurer, optional kotlin.coroutines.Continuation<? super android.graphics.Bitmap> p);
    method public static suspend Object? loadImageResource(coil.ImageLoader, android.content.Context context, Object? data, optional kotlin.jvm.functions.Function1<? super coil.request.ImageRequest.Builder,kotlin.Unit> configurer, optional kotlin.coroutines.Continuation<? super androidx.wear.tiles.ResourceBuilders.ImageResource> p);
    method public static androidx.wear.tiles.ResourceBuilders.ImageResource toImageResource(android.graphics.Bitmap);
  }

  public final class ResourcesKt {
    method public static androidx.wear.tiles.ResourceBuilders.ImageResource drawableResToImageResource(@DrawableRes int id);
  }

}

package com.google.android.horologist.tiles.render {

  @com.google.android.horologist.tiles.ExperimentalHorologistTilesApi public abstract class SingleTileLayoutRenderer<T, R> implements com.google.android.horologist.tiles.render.TileLayoutRenderer<T,R> {
    ctor public SingleTileLayoutRenderer(android.content.Context context);
    method public androidx.wear.tiles.material.Colors createTheme();
    method public final android.content.Context getContext();
    method public final androidx.wear.tiles.material.Colors getTheme();
    method public final androidx.wear.tiles.ResourceBuilders.Resources produceRequestedResources(R? resourceResults, androidx.wear.tiles.RequestBuilders.ResourcesRequest requestParams);
    method public abstract void produceRequestedResources(androidx.wear.tiles.ResourceBuilders.Resources.Builder, R? resourceResults, androidx.wear.tiles.DeviceParametersBuilders.DeviceParameters deviceParameters, java.util.List<java.lang.String> resourceIds);
    method public abstract androidx.wear.tiles.LayoutElementBuilders.LayoutElement renderTile(T? singleTileState, androidx.wear.tiles.DeviceParametersBuilders.DeviceParameters deviceParameters);
    method public final androidx.wear.tiles.TileBuilders.Tile renderTimeline(T? tileState, androidx.wear.tiles.RequestBuilders.TileRequest requestParams);
    property public final android.content.Context context;
    property public final androidx.wear.tiles.material.Colors theme;
  }

  public final class SingleTileLayoutRendererKt {
    field public static final String PERMANENT_RESOURCES_VERSION = "0";
  }

  @com.google.android.horologist.tiles.ExperimentalHorologistTilesApi public interface TileLayoutRenderer<T, R> {
    method public androidx.wear.tiles.ResourceBuilders.Resources produceRequestedResources(R? resourceResults, androidx.wear.tiles.RequestBuilders.ResourcesRequest requestParams);
    method public androidx.wear.tiles.TileBuilders.Tile renderTimeline(T? tileState, androidx.wear.tiles.RequestBuilders.TileRequest requestParams);
  }

}

